// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 32.0
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `pulse/drop_tester/v1/drop_tester.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:pulse.drop_tester.v1.MetricDropTest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MetricDropTest {
    // message fields
    // @@protoc_insertion_point(field:pulse.drop_tester.v1.MetricDropTest.input)
    pub input: ::protobuf::Chars,
    // @@protoc_insertion_point(field:pulse.drop_tester.v1.MetricDropTest.dropped_by)
    pub dropped_by: ::protobuf::Chars,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.drop_tester.v1.MetricDropTest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MetricDropTest {
    fn default() -> &'a MetricDropTest {
        <MetricDropTest as ::protobuf::Message>::default_instance()
    }
}

impl MetricDropTest {
    pub fn new() -> MetricDropTest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "input",
            |m: &MetricDropTest| { &m.input },
            |m: &mut MetricDropTest| { &mut m.input },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dropped_by",
            |m: &MetricDropTest| { &m.dropped_by },
            |m: &mut MetricDropTest| { &mut m.dropped_by },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MetricDropTest>(
            "MetricDropTest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MetricDropTest {
    const NAME: &'static str = "MetricDropTest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.input = is.read_tokio_chars()?;
                },
                18 => {
                    self.dropped_by = is.read_tokio_chars()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.input.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.input);
        }
        if !self.dropped_by.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.dropped_by);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.input.is_empty() {
            os.write_string(1, &self.input)?;
        }
        if !self.dropped_by.is_empty() {
            os.write_string(2, &self.dropped_by)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MetricDropTest {
        MetricDropTest::new()
    }

    fn clear(&mut self) {
        self.input.clear();
        self.dropped_by.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MetricDropTest {
        static instance: MetricDropTest = MetricDropTest {
            input: ::protobuf::Chars::new(),
            dropped_by: ::protobuf::Chars::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MetricDropTest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MetricDropTest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MetricDropTest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricDropTest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pulse.drop_tester.v1.DropTestCase)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DropTestCase {
    // message fields
    // @@protoc_insertion_point(field:pulse.drop_tester.v1.DropTestCase.metrics)
    pub metrics: ::std::vec::Vec<MetricDropTest>,
    // message oneof groups
    pub config_type: ::std::option::Option<drop_test_case::Config_type>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.drop_tester.v1.DropTestCase.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DropTestCase {
    fn default() -> &'a DropTestCase {
        <DropTestCase as ::protobuf::Message>::default_instance()
    }
}

impl DropTestCase {
    pub fn new() -> DropTestCase {
        ::std::default::Default::default()
    }

    // .pulse.config.processor.v1.DropConfig config = 1;

    pub fn config(&self) -> &super::drop::DropConfig {
        match self.config_type {
            ::std::option::Option::Some(drop_test_case::Config_type::Config(ref v)) => v,
            _ => <super::drop::DropConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_config(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_config(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(drop_test_case::Config_type::Config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: super::drop::DropConfig) {
        self.config_type = ::std::option::Option::Some(drop_test_case::Config_type::Config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_config(&mut self) -> &mut super::drop::DropConfig {
        if let ::std::option::Option::Some(drop_test_case::Config_type::Config(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(drop_test_case::Config_type::Config(super::drop::DropConfig::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(drop_test_case::Config_type::Config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_config(&mut self) -> super::drop::DropConfig {
        if self.has_config() {
            match self.config_type.take() {
                ::std::option::Option::Some(drop_test_case::Config_type::Config(v)) => v,
                _ => panic!(),
            }
        } else {
            super::drop::DropConfig::new()
        }
    }

    // string drop_processor_name = 2;

    pub fn drop_processor_name(&self) -> &str {
        match self.config_type {
            ::std::option::Option::Some(drop_test_case::Config_type::DropProcessorName(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_drop_processor_name(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_drop_processor_name(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(drop_test_case::Config_type::DropProcessorName(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_drop_processor_name(&mut self, v: ::protobuf::Chars) {
        self.config_type = ::std::option::Option::Some(drop_test_case::Config_type::DropProcessorName(v))
    }

    // Mutable pointer to the field.
    pub fn mut_drop_processor_name(&mut self) -> &mut ::protobuf::Chars {
        if let ::std::option::Option::Some(drop_test_case::Config_type::DropProcessorName(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(drop_test_case::Config_type::DropProcessorName(::protobuf::Chars::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(drop_test_case::Config_type::DropProcessorName(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_drop_processor_name(&mut self) -> ::protobuf::Chars {
        if self.has_drop_processor_name() {
            match self.config_type.take() {
                ::std::option::Option::Some(drop_test_case::Config_type::DropProcessorName(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::Chars::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::drop::DropConfig>(
            "config",
            DropTestCase::has_config,
            DropTestCase::config,
            DropTestCase::mut_config,
            DropTestCase::set_config,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "drop_processor_name",
            DropTestCase::has_drop_processor_name,
            DropTestCase::drop_processor_name,
            DropTestCase::set_drop_processor_name,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "metrics",
            |m: &DropTestCase| { &m.metrics },
            |m: &mut DropTestCase| { &mut m.metrics },
        ));
        oneofs.push(drop_test_case::Config_type::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DropTestCase>(
            "DropTestCase",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DropTestCase {
    const NAME: &'static str = "DropTestCase";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.config_type = ::std::option::Option::Some(drop_test_case::Config_type::Config(is.read_message()?));
                },
                18 => {
                    self.config_type = ::std::option::Option::Some(drop_test_case::Config_type::DropProcessorName(is.read_tokio_chars()?));
                },
                26 => {
                    self.metrics.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.metrics {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &drop_test_case::Config_type::Config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &drop_test_case::Config_type::DropProcessorName(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.metrics {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &drop_test_case::Config_type::Config(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &drop_test_case::Config_type::DropProcessorName(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DropTestCase {
        DropTestCase::new()
    }

    fn clear(&mut self) {
        self.config_type = ::std::option::Option::None;
        self.config_type = ::std::option::Option::None;
        self.metrics.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DropTestCase {
        static instance: DropTestCase = DropTestCase {
            metrics: ::std::vec::Vec::new(),
            config_type: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DropTestCase {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DropTestCase").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DropTestCase {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DropTestCase {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `DropTestCase`
pub mod drop_test_case {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:pulse.drop_tester.v1.DropTestCase.config_type)
    pub enum Config_type {
        // @@protoc_insertion_point(oneof_field:pulse.drop_tester.v1.DropTestCase.config)
        Config(super::super::drop::DropConfig),
        // @@protoc_insertion_point(oneof_field:pulse.drop_tester.v1.DropTestCase.drop_processor_name)
        DropProcessorName(::protobuf::Chars),
    }

    impl ::protobuf::Oneof for Config_type {
    }

    impl ::protobuf::OneofFull for Config_type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::DropTestCase as ::protobuf::MessageFull>::descriptor().oneof_by_name("config_type").unwrap()).clone()
        }
    }

    impl Config_type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Config_type>("config_type")
        }
    }
}

// @@protoc_insertion_point(message:pulse.drop_tester.v1.DropTesterConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DropTesterConfig {
    // message fields
    // @@protoc_insertion_point(field:pulse.drop_tester.v1.DropTesterConfig.test_cases)
    pub test_cases: ::std::vec::Vec<DropTestCase>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.drop_tester.v1.DropTesterConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DropTesterConfig {
    fn default() -> &'a DropTesterConfig {
        <DropTesterConfig as ::protobuf::Message>::default_instance()
    }
}

impl DropTesterConfig {
    pub fn new() -> DropTesterConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "test_cases",
            |m: &DropTesterConfig| { &m.test_cases },
            |m: &mut DropTesterConfig| { &mut m.test_cases },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DropTesterConfig>(
            "DropTesterConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DropTesterConfig {
    const NAME: &'static str = "DropTesterConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.test_cases.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.test_cases {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.test_cases {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DropTesterConfig {
        DropTesterConfig::new()
    }

    fn clear(&mut self) {
        self.test_cases.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DropTesterConfig {
        static instance: DropTesterConfig = DropTesterConfig {
            test_cases: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DropTesterConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DropTesterConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DropTesterConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DropTesterConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n&pulse/drop_tester/v1/drop_tester.proto\x12\x14pulse.drop_tester.v1\
    \x1a$pulse/config/processor/v1/drop.proto\x1a\x17validate/validate.proto\
    \"N\n\x0eMetricDropTest\x12\x1d\n\x05input\x18\x01\x20\x01(\tR\x05inputB\
    \x07\xfaB\x04r\x02\x10\x01\x12\x1d\n\ndropped_by\x18\x02\x20\x01(\tR\tdr\
    oppedBy\"\xf1\x01\n\x0cDropTestCase\x12H\n\x06config\x18\x01\x20\x01(\
    \x0b2%.pulse.config.processor.v1.DropConfigH\0R\x06configB\x07\xfaB\x04r\
    \x02\x10\x01\x129\n\x13drop_processor_name\x18\x02\x20\x01(\tH\0R\x11dro\
    pProcessorNameB\x07\xfaB\x04r\x02\x10\x01\x12H\n\x07metrics\x18\x03\x20\
    \x03(\x0b2$.pulse.drop_tester.v1.MetricDropTestR\x07metricsB\x08\xfaB\
    \x05\x92\x01\x02\x08\x01B\x12\n\x0bconfig_type\x12\x03\xf8B\x01\"_\n\x10\
    DropTesterConfig\x12K\n\ntest_cases\x18\x01\x20\x03(\x0b2\".pulse.drop_t\
    ester.v1.DropTestCaseR\ttestCasesB\x08\xfaB\x05\x92\x01\x02\x08\x01b\x06\
    proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::drop::file_descriptor().clone());
            deps.push(super::validate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(MetricDropTest::generated_message_descriptor_data());
            messages.push(DropTestCase::generated_message_descriptor_data());
            messages.push(DropTesterConfig::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
