// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 29.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `pulse/config/processor/v1/processor.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:pulse.config.processor.v1.ProcessorConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ProcessorConfig {
    // message fields
    // @@protoc_insertion_point(field:pulse.config.processor.v1.ProcessorConfig.routes)
    pub routes: ::std::vec::Vec<::protobuf::Chars>,
    // @@protoc_insertion_point(field:pulse.config.processor.v1.ProcessorConfig.alt_routes)
    pub alt_routes: ::std::vec::Vec<::protobuf::Chars>,
    // message oneof groups
    pub processor_type: ::std::option::Option<processor_config::Processor_type>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.processor.v1.ProcessorConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProcessorConfig {
    fn default() -> &'a ProcessorConfig {
        <ProcessorConfig as ::protobuf::Message>::default_instance()
    }
}

impl ProcessorConfig {
    pub fn new() -> ProcessorConfig {
        ::std::default::Default::default()
    }

    // .pulse.config.processor.v1.AggregationConfig aggregation = 3;

    pub fn aggregation(&self) -> &super::aggregation::AggregationConfig {
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::Aggregation(ref v)) => v,
            _ => <super::aggregation::AggregationConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_aggregation(&mut self) {
        self.processor_type = ::std::option::Option::None;
    }

    pub fn has_aggregation(&self) -> bool {
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::Aggregation(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_aggregation(&mut self, v: super::aggregation::AggregationConfig) {
        self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::Aggregation(v))
    }

    // Mutable pointer to the field.
    pub fn mut_aggregation(&mut self) -> &mut super::aggregation::AggregationConfig {
        if let ::std::option::Option::Some(processor_config::Processor_type::Aggregation(_)) = self.processor_type {
        } else {
            self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::Aggregation(super::aggregation::AggregationConfig::new()));
        }
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::Aggregation(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_aggregation(&mut self) -> super::aggregation::AggregationConfig {
        if self.has_aggregation() {
            match self.processor_type.take() {
                ::std::option::Option::Some(processor_config::Processor_type::Aggregation(v)) => v,
                _ => panic!(),
            }
        } else {
            super::aggregation::AggregationConfig::new()
        }
    }

    // .pulse.config.processor.v1.ElisionConfig elision = 4;

    pub fn elision(&self) -> &super::elision::ElisionConfig {
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::Elision(ref v)) => v,
            _ => <super::elision::ElisionConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_elision(&mut self) {
        self.processor_type = ::std::option::Option::None;
    }

    pub fn has_elision(&self) -> bool {
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::Elision(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_elision(&mut self, v: super::elision::ElisionConfig) {
        self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::Elision(v))
    }

    // Mutable pointer to the field.
    pub fn mut_elision(&mut self) -> &mut super::elision::ElisionConfig {
        if let ::std::option::Option::Some(processor_config::Processor_type::Elision(_)) = self.processor_type {
        } else {
            self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::Elision(super::elision::ElisionConfig::new()));
        }
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::Elision(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_elision(&mut self) -> super::elision::ElisionConfig {
        if self.has_elision() {
            match self.processor_type.take() {
                ::std::option::Option::Some(processor_config::Processor_type::Elision(v)) => v,
                _ => panic!(),
            }
        } else {
            super::elision::ElisionConfig::new()
        }
    }

    // .pulse.config.processor.v1.InternodeConfig internode = 5;

    pub fn internode(&self) -> &super::internode::InternodeConfig {
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::Internode(ref v)) => v,
            _ => <super::internode::InternodeConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_internode(&mut self) {
        self.processor_type = ::std::option::Option::None;
    }

    pub fn has_internode(&self) -> bool {
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::Internode(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_internode(&mut self, v: super::internode::InternodeConfig) {
        self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::Internode(v))
    }

    // Mutable pointer to the field.
    pub fn mut_internode(&mut self) -> &mut super::internode::InternodeConfig {
        if let ::std::option::Option::Some(processor_config::Processor_type::Internode(_)) = self.processor_type {
        } else {
            self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::Internode(super::internode::InternodeConfig::new()));
        }
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::Internode(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_internode(&mut self) -> super::internode::InternodeConfig {
        if self.has_internode() {
            match self.processor_type.take() {
                ::std::option::Option::Some(processor_config::Processor_type::Internode(v)) => v,
                _ => panic!(),
            }
        } else {
            super::internode::InternodeConfig::new()
        }
    }

    // .pulse.config.processor.v1.PopulateCacheConfig populate_cache = 6;

    pub fn populate_cache(&self) -> &super::populate_cache::PopulateCacheConfig {
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::PopulateCache(ref v)) => v,
            _ => <super::populate_cache::PopulateCacheConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_populate_cache(&mut self) {
        self.processor_type = ::std::option::Option::None;
    }

    pub fn has_populate_cache(&self) -> bool {
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::PopulateCache(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_populate_cache(&mut self, v: super::populate_cache::PopulateCacheConfig) {
        self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::PopulateCache(v))
    }

    // Mutable pointer to the field.
    pub fn mut_populate_cache(&mut self) -> &mut super::populate_cache::PopulateCacheConfig {
        if let ::std::option::Option::Some(processor_config::Processor_type::PopulateCache(_)) = self.processor_type {
        } else {
            self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::PopulateCache(super::populate_cache::PopulateCacheConfig::new()));
        }
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::PopulateCache(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_populate_cache(&mut self) -> super::populate_cache::PopulateCacheConfig {
        if self.has_populate_cache() {
            match self.processor_type.take() {
                ::std::option::Option::Some(processor_config::Processor_type::PopulateCache(v)) => v,
                _ => panic!(),
            }
        } else {
            super::populate_cache::PopulateCacheConfig::new()
        }
    }

    // .pulse.config.processor.v1.SamplerConfig sampler = 7;

    pub fn sampler(&self) -> &super::sampler::SamplerConfig {
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::Sampler(ref v)) => v,
            _ => <super::sampler::SamplerConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_sampler(&mut self) {
        self.processor_type = ::std::option::Option::None;
    }

    pub fn has_sampler(&self) -> bool {
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::Sampler(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sampler(&mut self, v: super::sampler::SamplerConfig) {
        self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::Sampler(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sampler(&mut self) -> &mut super::sampler::SamplerConfig {
        if let ::std::option::Option::Some(processor_config::Processor_type::Sampler(_)) = self.processor_type {
        } else {
            self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::Sampler(super::sampler::SamplerConfig::new()));
        }
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::Sampler(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sampler(&mut self) -> super::sampler::SamplerConfig {
        if self.has_sampler() {
            match self.processor_type.take() {
                ::std::option::Option::Some(processor_config::Processor_type::Sampler(v)) => v,
                _ => panic!(),
            }
        } else {
            super::sampler::SamplerConfig::new()
        }
    }

    // .pulse.config.processor.v1.BufferConfig buffer = 8;

    pub fn buffer(&self) -> &super::buffer::BufferConfig {
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::Buffer(ref v)) => v,
            _ => <super::buffer::BufferConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_buffer(&mut self) {
        self.processor_type = ::std::option::Option::None;
    }

    pub fn has_buffer(&self) -> bool {
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::Buffer(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_buffer(&mut self, v: super::buffer::BufferConfig) {
        self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::Buffer(v))
    }

    // Mutable pointer to the field.
    pub fn mut_buffer(&mut self) -> &mut super::buffer::BufferConfig {
        if let ::std::option::Option::Some(processor_config::Processor_type::Buffer(_)) = self.processor_type {
        } else {
            self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::Buffer(super::buffer::BufferConfig::new()));
        }
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::Buffer(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_buffer(&mut self) -> super::buffer::BufferConfig {
        if self.has_buffer() {
            match self.processor_type.take() {
                ::std::option::Option::Some(processor_config::Processor_type::Buffer(v)) => v,
                _ => panic!(),
            }
        } else {
            super::buffer::BufferConfig::new()
        }
    }

    // .pulse.config.processor.v1.MutateConfig mutate = 9;

    pub fn mutate(&self) -> &super::mutate::MutateConfig {
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::Mutate(ref v)) => v,
            _ => <super::mutate::MutateConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_mutate(&mut self) {
        self.processor_type = ::std::option::Option::None;
    }

    pub fn has_mutate(&self) -> bool {
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::Mutate(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_mutate(&mut self, v: super::mutate::MutateConfig) {
        self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::Mutate(v))
    }

    // Mutable pointer to the field.
    pub fn mut_mutate(&mut self) -> &mut super::mutate::MutateConfig {
        if let ::std::option::Option::Some(processor_config::Processor_type::Mutate(_)) = self.processor_type {
        } else {
            self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::Mutate(super::mutate::MutateConfig::new()));
        }
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::Mutate(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_mutate(&mut self) -> super::mutate::MutateConfig {
        if self.has_mutate() {
            match self.processor_type.take() {
                ::std::option::Option::Some(processor_config::Processor_type::Mutate(v)) => v,
                _ => panic!(),
            }
        } else {
            super::mutate::MutateConfig::new()
        }
    }

    // .pulse.config.processor.v1.CardinalityLimiterConfig cardinality_limiter = 10;

    pub fn cardinality_limiter(&self) -> &super::cardinality_limiter::CardinalityLimiterConfig {
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::CardinalityLimiter(ref v)) => v,
            _ => <super::cardinality_limiter::CardinalityLimiterConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_cardinality_limiter(&mut self) {
        self.processor_type = ::std::option::Option::None;
    }

    pub fn has_cardinality_limiter(&self) -> bool {
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::CardinalityLimiter(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cardinality_limiter(&mut self, v: super::cardinality_limiter::CardinalityLimiterConfig) {
        self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::CardinalityLimiter(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cardinality_limiter(&mut self) -> &mut super::cardinality_limiter::CardinalityLimiterConfig {
        if let ::std::option::Option::Some(processor_config::Processor_type::CardinalityLimiter(_)) = self.processor_type {
        } else {
            self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::CardinalityLimiter(super::cardinality_limiter::CardinalityLimiterConfig::new()));
        }
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::CardinalityLimiter(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cardinality_limiter(&mut self) -> super::cardinality_limiter::CardinalityLimiterConfig {
        if self.has_cardinality_limiter() {
            match self.processor_type.take() {
                ::std::option::Option::Some(processor_config::Processor_type::CardinalityLimiter(v)) => v,
                _ => panic!(),
            }
        } else {
            super::cardinality_limiter::CardinalityLimiterConfig::new()
        }
    }

    // .pulse.config.processor.v1.RegexConfig regex = 11;

    pub fn regex(&self) -> &super::regex::RegexConfig {
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::Regex(ref v)) => v,
            _ => <super::regex::RegexConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_regex(&mut self) {
        self.processor_type = ::std::option::Option::None;
    }

    pub fn has_regex(&self) -> bool {
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::Regex(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_regex(&mut self, v: super::regex::RegexConfig) {
        self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::Regex(v))
    }

    // Mutable pointer to the field.
    pub fn mut_regex(&mut self) -> &mut super::regex::RegexConfig {
        if let ::std::option::Option::Some(processor_config::Processor_type::Regex(_)) = self.processor_type {
        } else {
            self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::Regex(super::regex::RegexConfig::new()));
        }
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::Regex(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_regex(&mut self) -> super::regex::RegexConfig {
        if self.has_regex() {
            match self.processor_type.take() {
                ::std::option::Option::Some(processor_config::Processor_type::Regex(v)) => v,
                _ => panic!(),
            }
        } else {
            super::regex::RegexConfig::new()
        }
    }

    // .pulse.config.processor.v1.CardinalityTrackerConfig cardinality_tracker = 12;

    pub fn cardinality_tracker(&self) -> &super::cardinality_tracker::CardinalityTrackerConfig {
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::CardinalityTracker(ref v)) => v,
            _ => <super::cardinality_tracker::CardinalityTrackerConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_cardinality_tracker(&mut self) {
        self.processor_type = ::std::option::Option::None;
    }

    pub fn has_cardinality_tracker(&self) -> bool {
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::CardinalityTracker(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cardinality_tracker(&mut self, v: super::cardinality_tracker::CardinalityTrackerConfig) {
        self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::CardinalityTracker(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cardinality_tracker(&mut self) -> &mut super::cardinality_tracker::CardinalityTrackerConfig {
        if let ::std::option::Option::Some(processor_config::Processor_type::CardinalityTracker(_)) = self.processor_type {
        } else {
            self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::CardinalityTracker(super::cardinality_tracker::CardinalityTrackerConfig::new()));
        }
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::CardinalityTracker(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cardinality_tracker(&mut self) -> super::cardinality_tracker::CardinalityTrackerConfig {
        if self.has_cardinality_tracker() {
            match self.processor_type.take() {
                ::std::option::Option::Some(processor_config::Processor_type::CardinalityTracker(v)) => v,
                _ => panic!(),
            }
        } else {
            super::cardinality_tracker::CardinalityTrackerConfig::new()
        }
    }

    // .pulse.config.processor.v1.DropProcessorConfig drop = 13;

    pub fn drop(&self) -> &super::drop::DropProcessorConfig {
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::Drop(ref v)) => v,
            _ => <super::drop::DropProcessorConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_drop(&mut self) {
        self.processor_type = ::std::option::Option::None;
    }

    pub fn has_drop(&self) -> bool {
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::Drop(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_drop(&mut self, v: super::drop::DropProcessorConfig) {
        self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::Drop(v))
    }

    // Mutable pointer to the field.
    pub fn mut_drop(&mut self) -> &mut super::drop::DropProcessorConfig {
        if let ::std::option::Option::Some(processor_config::Processor_type::Drop(_)) = self.processor_type {
        } else {
            self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::Drop(super::drop::DropProcessorConfig::new()));
        }
        match self.processor_type {
            ::std::option::Option::Some(processor_config::Processor_type::Drop(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_drop(&mut self) -> super::drop::DropProcessorConfig {
        if self.has_drop() {
            match self.processor_type.take() {
                ::std::option::Option::Some(processor_config::Processor_type::Drop(v)) => v,
                _ => panic!(),
            }
        } else {
            super::drop::DropProcessorConfig::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "routes",
            |m: &ProcessorConfig| { &m.routes },
            |m: &mut ProcessorConfig| { &mut m.routes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "alt_routes",
            |m: &ProcessorConfig| { &m.alt_routes },
            |m: &mut ProcessorConfig| { &mut m.alt_routes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::aggregation::AggregationConfig>(
            "aggregation",
            ProcessorConfig::has_aggregation,
            ProcessorConfig::aggregation,
            ProcessorConfig::mut_aggregation,
            ProcessorConfig::set_aggregation,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::elision::ElisionConfig>(
            "elision",
            ProcessorConfig::has_elision,
            ProcessorConfig::elision,
            ProcessorConfig::mut_elision,
            ProcessorConfig::set_elision,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::internode::InternodeConfig>(
            "internode",
            ProcessorConfig::has_internode,
            ProcessorConfig::internode,
            ProcessorConfig::mut_internode,
            ProcessorConfig::set_internode,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::populate_cache::PopulateCacheConfig>(
            "populate_cache",
            ProcessorConfig::has_populate_cache,
            ProcessorConfig::populate_cache,
            ProcessorConfig::mut_populate_cache,
            ProcessorConfig::set_populate_cache,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::sampler::SamplerConfig>(
            "sampler",
            ProcessorConfig::has_sampler,
            ProcessorConfig::sampler,
            ProcessorConfig::mut_sampler,
            ProcessorConfig::set_sampler,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::buffer::BufferConfig>(
            "buffer",
            ProcessorConfig::has_buffer,
            ProcessorConfig::buffer,
            ProcessorConfig::mut_buffer,
            ProcessorConfig::set_buffer,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::mutate::MutateConfig>(
            "mutate",
            ProcessorConfig::has_mutate,
            ProcessorConfig::mutate,
            ProcessorConfig::mut_mutate,
            ProcessorConfig::set_mutate,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::cardinality_limiter::CardinalityLimiterConfig>(
            "cardinality_limiter",
            ProcessorConfig::has_cardinality_limiter,
            ProcessorConfig::cardinality_limiter,
            ProcessorConfig::mut_cardinality_limiter,
            ProcessorConfig::set_cardinality_limiter,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::regex::RegexConfig>(
            "regex",
            ProcessorConfig::has_regex,
            ProcessorConfig::regex,
            ProcessorConfig::mut_regex,
            ProcessorConfig::set_regex,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::cardinality_tracker::CardinalityTrackerConfig>(
            "cardinality_tracker",
            ProcessorConfig::has_cardinality_tracker,
            ProcessorConfig::cardinality_tracker,
            ProcessorConfig::mut_cardinality_tracker,
            ProcessorConfig::set_cardinality_tracker,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::drop::DropProcessorConfig>(
            "drop",
            ProcessorConfig::has_drop,
            ProcessorConfig::drop,
            ProcessorConfig::mut_drop,
            ProcessorConfig::set_drop,
        ));
        oneofs.push(processor_config::Processor_type::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProcessorConfig>(
            "ProcessorConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProcessorConfig {
    const NAME: &'static str = "ProcessorConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.routes.push(is.read_tokio_chars()?);
                },
                18 => {
                    self.alt_routes.push(is.read_tokio_chars()?);
                },
                26 => {
                    self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::Aggregation(is.read_message()?));
                },
                34 => {
                    self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::Elision(is.read_message()?));
                },
                42 => {
                    self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::Internode(is.read_message()?));
                },
                50 => {
                    self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::PopulateCache(is.read_message()?));
                },
                58 => {
                    self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::Sampler(is.read_message()?));
                },
                66 => {
                    self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::Buffer(is.read_message()?));
                },
                74 => {
                    self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::Mutate(is.read_message()?));
                },
                82 => {
                    self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::CardinalityLimiter(is.read_message()?));
                },
                90 => {
                    self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::Regex(is.read_message()?));
                },
                98 => {
                    self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::CardinalityTracker(is.read_message()?));
                },
                106 => {
                    self.processor_type = ::std::option::Option::Some(processor_config::Processor_type::Drop(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.routes {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in &self.alt_routes {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if let ::std::option::Option::Some(ref v) = self.processor_type {
            match v {
                &processor_config::Processor_type::Aggregation(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &processor_config::Processor_type::Elision(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &processor_config::Processor_type::Internode(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &processor_config::Processor_type::PopulateCache(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &processor_config::Processor_type::Sampler(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &processor_config::Processor_type::Buffer(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &processor_config::Processor_type::Mutate(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &processor_config::Processor_type::CardinalityLimiter(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &processor_config::Processor_type::Regex(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &processor_config::Processor_type::CardinalityTracker(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &processor_config::Processor_type::Drop(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.routes {
            os.write_string(1, &v)?;
        };
        for v in &self.alt_routes {
            os.write_string(2, &v)?;
        };
        if let ::std::option::Option::Some(ref v) = self.processor_type {
            match v {
                &processor_config::Processor_type::Aggregation(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &processor_config::Processor_type::Elision(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &processor_config::Processor_type::Internode(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &processor_config::Processor_type::PopulateCache(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &processor_config::Processor_type::Sampler(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &processor_config::Processor_type::Buffer(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &processor_config::Processor_type::Mutate(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &processor_config::Processor_type::CardinalityLimiter(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &processor_config::Processor_type::Regex(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &processor_config::Processor_type::CardinalityTracker(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &processor_config::Processor_type::Drop(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProcessorConfig {
        ProcessorConfig::new()
    }

    fn clear(&mut self) {
        self.routes.clear();
        self.alt_routes.clear();
        self.processor_type = ::std::option::Option::None;
        self.processor_type = ::std::option::Option::None;
        self.processor_type = ::std::option::Option::None;
        self.processor_type = ::std::option::Option::None;
        self.processor_type = ::std::option::Option::None;
        self.processor_type = ::std::option::Option::None;
        self.processor_type = ::std::option::Option::None;
        self.processor_type = ::std::option::Option::None;
        self.processor_type = ::std::option::Option::None;
        self.processor_type = ::std::option::Option::None;
        self.processor_type = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProcessorConfig {
        static instance: ProcessorConfig = ProcessorConfig {
            routes: ::std::vec::Vec::new(),
            alt_routes: ::std::vec::Vec::new(),
            processor_type: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProcessorConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProcessorConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProcessorConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProcessorConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ProcessorConfig`
pub mod processor_config {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:pulse.config.processor.v1.ProcessorConfig.processor_type)
    pub enum Processor_type {
        // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.ProcessorConfig.aggregation)
        Aggregation(super::super::aggregation::AggregationConfig),
        // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.ProcessorConfig.elision)
        Elision(super::super::elision::ElisionConfig),
        // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.ProcessorConfig.internode)
        Internode(super::super::internode::InternodeConfig),
        // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.ProcessorConfig.populate_cache)
        PopulateCache(super::super::populate_cache::PopulateCacheConfig),
        // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.ProcessorConfig.sampler)
        Sampler(super::super::sampler::SamplerConfig),
        // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.ProcessorConfig.buffer)
        Buffer(super::super::buffer::BufferConfig),
        // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.ProcessorConfig.mutate)
        Mutate(super::super::mutate::MutateConfig),
        // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.ProcessorConfig.cardinality_limiter)
        CardinalityLimiter(super::super::cardinality_limiter::CardinalityLimiterConfig),
        // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.ProcessorConfig.regex)
        Regex(super::super::regex::RegexConfig),
        // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.ProcessorConfig.cardinality_tracker)
        CardinalityTracker(super::super::cardinality_tracker::CardinalityTrackerConfig),
        // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.ProcessorConfig.drop)
        Drop(super::super::drop::DropProcessorConfig),
    }

    impl ::protobuf::Oneof for Processor_type {
    }

    impl ::protobuf::OneofFull for Processor_type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::ProcessorConfig as ::protobuf::MessageFull>::descriptor().oneof_by_name("processor_type").unwrap()).clone()
        }
    }

    impl Processor_type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Processor_type>("processor_type")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)pulse/config/processor/v1/processor.proto\x12\x19pulse.config.process\
    or.v1\x1a+pulse/config/processor/v1/aggregation.proto\x1a&pulse/config/p\
    rocessor/v1/buffer.proto\x1a3pulse/config/processor/v1/cardinality_limit\
    er.proto\x1a3pulse/config/processor/v1/cardinality_tracker.proto\x1a$pul\
    se/config/processor/v1/drop.proto\x1a'pulse/config/processor/v1/elision.\
    proto\x1a)pulse/config/processor/v1/internode.proto\x1a&pulse/config/pro\
    cessor/v1/mutate.proto\x1a.pulse/config/processor/v1/populate_cache.prot\
    o\x1a%pulse/config/processor/v1/regex.proto\x1a'pulse/config/processor/v\
    1/sampler.proto\x1a\x17validate/validate.proto\"\xbe\x07\n\x0fProcessorC\
    onfig\x12\x16\n\x06routes\x18\x01\x20\x03(\tR\x06routes\x12\x1d\n\nalt_r\
    outes\x18\x02\x20\x03(\tR\taltRoutes\x12P\n\x0baggregation\x18\x03\x20\
    \x01(\x0b2,.pulse.config.processor.v1.AggregationConfigH\0R\x0baggregati\
    on\x12D\n\x07elision\x18\x04\x20\x01(\x0b2(.pulse.config.processor.v1.El\
    isionConfigH\0R\x07elision\x12J\n\tinternode\x18\x05\x20\x01(\x0b2*.puls\
    e.config.processor.v1.InternodeConfigH\0R\tinternode\x12W\n\x0epopulate_\
    cache\x18\x06\x20\x01(\x0b2..pulse.config.processor.v1.PopulateCacheConf\
    igH\0R\rpopulateCache\x12D\n\x07sampler\x18\x07\x20\x01(\x0b2(.pulse.con\
    fig.processor.v1.SamplerConfigH\0R\x07sampler\x12A\n\x06buffer\x18\x08\
    \x20\x01(\x0b2'.pulse.config.processor.v1.BufferConfigH\0R\x06buffer\x12\
    A\n\x06mutate\x18\t\x20\x01(\x0b2'.pulse.config.processor.v1.MutateConfi\
    gH\0R\x06mutate\x12f\n\x13cardinality_limiter\x18\n\x20\x01(\x0b23.pulse\
    .config.processor.v1.CardinalityLimiterConfigH\0R\x12cardinalityLimiter\
    \x12>\n\x05regex\x18\x0b\x20\x01(\x0b2&.pulse.config.processor.v1.RegexC\
    onfigH\0R\x05regex\x12f\n\x13cardinality_tracker\x18\x0c\x20\x01(\x0b23.\
    pulse.config.processor.v1.CardinalityTrackerConfigH\0R\x12cardinalityTra\
    cker\x12D\n\x04drop\x18\r\x20\x01(\x0b2..pulse.config.processor.v1.DropP\
    rocessorConfigH\0R\x04dropB\x15\n\x0eprocessor_type\x12\x03\xf8B\x01b\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(12);
            deps.push(super::aggregation::file_descriptor().clone());
            deps.push(super::buffer::file_descriptor().clone());
            deps.push(super::cardinality_limiter::file_descriptor().clone());
            deps.push(super::cardinality_tracker::file_descriptor().clone());
            deps.push(super::drop::file_descriptor().clone());
            deps.push(super::elision::file_descriptor().clone());
            deps.push(super::internode::file_descriptor().clone());
            deps.push(super::mutate::file_descriptor().clone());
            deps.push(super::populate_cache::file_descriptor().clone());
            deps.push(super::regex::file_descriptor().clone());
            deps.push(super::sampler::file_descriptor().clone());
            deps.push(super::validate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ProcessorConfig::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
