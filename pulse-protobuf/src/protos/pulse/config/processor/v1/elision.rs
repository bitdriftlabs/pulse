// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 32.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `pulse/config/processor/v1/elision.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:pulse.config.processor.v1.ElisionConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ElisionConfig {
    // message fields
    // @@protoc_insertion_point(field:pulse.config.processor.v1.ElisionConfig.emit)
    pub emit: ::protobuf::MessageField<elision_config::EmitConfig>,
    // @@protoc_insertion_point(field:pulse.config.processor.v1.ElisionConfig.analyze_mode)
    pub analyze_mode: bool,
    // @@protoc_insertion_point(field:pulse.config.processor.v1.ElisionConfig.regex_overrides)
    pub regex_overrides: ::std::vec::Vec<elision_config::RegexOverrideConfig>,
    // @@protoc_insertion_point(field:pulse.config.processor.v1.ElisionConfig.zero)
    pub zero: ::protobuf::MessageField<elision_config::ZeroElisionConfig>,
    // @@protoc_insertion_point(field:pulse.config.processor.v1.ElisionConfig.blocklist)
    pub blocklist: ::protobuf::MessageField<elision_config::BlocklistConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.processor.v1.ElisionConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ElisionConfig {
    fn default() -> &'a ElisionConfig {
        <ElisionConfig as ::protobuf::Message>::default_instance()
    }
}

impl ElisionConfig {
    pub fn new() -> ElisionConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, elision_config::EmitConfig>(
            "emit",
            |m: &ElisionConfig| { &m.emit },
            |m: &mut ElisionConfig| { &mut m.emit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "analyze_mode",
            |m: &ElisionConfig| { &m.analyze_mode },
            |m: &mut ElisionConfig| { &mut m.analyze_mode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "regex_overrides",
            |m: &ElisionConfig| { &m.regex_overrides },
            |m: &mut ElisionConfig| { &mut m.regex_overrides },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, elision_config::ZeroElisionConfig>(
            "zero",
            |m: &ElisionConfig| { &m.zero },
            |m: &mut ElisionConfig| { &mut m.zero },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, elision_config::BlocklistConfig>(
            "blocklist",
            |m: &ElisionConfig| { &m.blocklist },
            |m: &mut ElisionConfig| { &mut m.blocklist },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ElisionConfig>(
            "ElisionConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ElisionConfig {
    const NAME: &'static str = "ElisionConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.emit)?;
                },
                16 => {
                    self.analyze_mode = is.read_bool()?;
                },
                26 => {
                    self.regex_overrides.push(is.read_message()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.zero)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.blocklist)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.emit.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.analyze_mode != false {
            my_size += 1 + 1;
        }
        for value in &self.regex_overrides {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.zero.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.blocklist.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.emit.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.analyze_mode != false {
            os.write_bool(2, self.analyze_mode)?;
        }
        for v in &self.regex_overrides {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if let Some(v) = self.zero.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.blocklist.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ElisionConfig {
        ElisionConfig::new()
    }

    fn clear(&mut self) {
        self.emit.clear();
        self.analyze_mode = false;
        self.regex_overrides.clear();
        self.zero.clear();
        self.blocklist.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ElisionConfig {
        static instance: ElisionConfig = ElisionConfig {
            emit: ::protobuf::MessageField::none(),
            analyze_mode: false,
            regex_overrides: ::std::vec::Vec::new(),
            zero: ::protobuf::MessageField::none(),
            blocklist: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ElisionConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ElisionConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ElisionConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ElisionConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ElisionConfig`
pub mod elision_config {
    // @@protoc_insertion_point(message:pulse.config.processor.v1.ElisionConfig.EmitConfig)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EmitConfig {
        // message oneof groups
        pub emit_type: ::std::option::Option<emit_config::Emit_type>,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.processor.v1.ElisionConfig.EmitConfig.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EmitConfig {
        fn default() -> &'a EmitConfig {
            <EmitConfig as ::protobuf::Message>::default_instance()
        }
    }

    impl EmitConfig {
        pub fn new() -> EmitConfig {
            ::std::default::Default::default()
        }

        // .google.protobuf.Duration interval = 1;

        pub fn interval(&self) -> &::protobuf::well_known_types::duration::Duration {
            match self.emit_type {
                ::std::option::Option::Some(emit_config::Emit_type::Interval(ref v)) => v,
                _ => <::protobuf::well_known_types::duration::Duration as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_interval(&mut self) {
            self.emit_type = ::std::option::Option::None;
        }

        pub fn has_interval(&self) -> bool {
            match self.emit_type {
                ::std::option::Option::Some(emit_config::Emit_type::Interval(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_interval(&mut self, v: ::protobuf::well_known_types::duration::Duration) {
            self.emit_type = ::std::option::Option::Some(emit_config::Emit_type::Interval(v))
        }

        // Mutable pointer to the field.
        pub fn mut_interval(&mut self) -> &mut ::protobuf::well_known_types::duration::Duration {
            if let ::std::option::Option::Some(emit_config::Emit_type::Interval(_)) = self.emit_type {
            } else {
                self.emit_type = ::std::option::Option::Some(emit_config::Emit_type::Interval(::protobuf::well_known_types::duration::Duration::new()));
            }
            match self.emit_type {
                ::std::option::Option::Some(emit_config::Emit_type::Interval(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_interval(&mut self) -> ::protobuf::well_known_types::duration::Duration {
            if self.has_interval() {
                match self.emit_type.take() {
                    ::std::option::Option::Some(emit_config::Emit_type::Interval(v)) => v,
                    _ => panic!(),
                }
            } else {
                ::protobuf::well_known_types::duration::Duration::new()
            }
        }

        // double ratio = 2;

        pub fn ratio(&self) -> f64 {
            match self.emit_type {
                ::std::option::Option::Some(emit_config::Emit_type::Ratio(v)) => v,
                _ => 0.,
            }
        }

        pub fn clear_ratio(&mut self) {
            self.emit_type = ::std::option::Option::None;
        }

        pub fn has_ratio(&self) -> bool {
            match self.emit_type {
                ::std::option::Option::Some(emit_config::Emit_type::Ratio(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_ratio(&mut self, v: f64) {
            self.emit_type = ::std::option::Option::Some(emit_config::Emit_type::Ratio(v))
        }

        // .pulse.config.processor.v1.ElisionConfig.EmitConfig.ConsistentEveryPeriod consistent_every_period = 3;

        pub fn consistent_every_period(&self) -> &emit_config::ConsistentEveryPeriod {
            match self.emit_type {
                ::std::option::Option::Some(emit_config::Emit_type::ConsistentEveryPeriod(ref v)) => v,
                _ => <emit_config::ConsistentEveryPeriod as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_consistent_every_period(&mut self) {
            self.emit_type = ::std::option::Option::None;
        }

        pub fn has_consistent_every_period(&self) -> bool {
            match self.emit_type {
                ::std::option::Option::Some(emit_config::Emit_type::ConsistentEveryPeriod(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_consistent_every_period(&mut self, v: emit_config::ConsistentEveryPeriod) {
            self.emit_type = ::std::option::Option::Some(emit_config::Emit_type::ConsistentEveryPeriod(v))
        }

        // Mutable pointer to the field.
        pub fn mut_consistent_every_period(&mut self) -> &mut emit_config::ConsistentEveryPeriod {
            if let ::std::option::Option::Some(emit_config::Emit_type::ConsistentEveryPeriod(_)) = self.emit_type {
            } else {
                self.emit_type = ::std::option::Option::Some(emit_config::Emit_type::ConsistentEveryPeriod(emit_config::ConsistentEveryPeriod::new()));
            }
            match self.emit_type {
                ::std::option::Option::Some(emit_config::Emit_type::ConsistentEveryPeriod(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_consistent_every_period(&mut self) -> emit_config::ConsistentEveryPeriod {
            if self.has_consistent_every_period() {
                match self.emit_type.take() {
                    ::std::option::Option::Some(emit_config::Emit_type::ConsistentEveryPeriod(v)) => v,
                    _ => panic!(),
                }
            } else {
                emit_config::ConsistentEveryPeriod::new()
            }
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(1);
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
                "interval",
                EmitConfig::has_interval,
                EmitConfig::interval,
                EmitConfig::mut_interval,
                EmitConfig::set_interval,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
                "ratio",
                EmitConfig::has_ratio,
                EmitConfig::ratio,
                EmitConfig::set_ratio,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, emit_config::ConsistentEveryPeriod>(
                "consistent_every_period",
                EmitConfig::has_consistent_every_period,
                EmitConfig::consistent_every_period,
                EmitConfig::mut_consistent_every_period,
                EmitConfig::set_consistent_every_period,
            ));
            oneofs.push(emit_config::Emit_type::generated_oneof_descriptor_data());
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EmitConfig>(
                "ElisionConfig.EmitConfig",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for EmitConfig {
        const NAME: &'static str = "EmitConfig";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.emit_type = ::std::option::Option::Some(emit_config::Emit_type::Interval(is.read_message()?));
                    },
                    17 => {
                        self.emit_type = ::std::option::Option::Some(emit_config::Emit_type::Ratio(is.read_double()?));
                    },
                    26 => {
                        self.emit_type = ::std::option::Option::Some(emit_config::Emit_type::ConsistentEveryPeriod(is.read_message()?));
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let ::std::option::Option::Some(ref v) = self.emit_type {
                match v {
                    &emit_config::Emit_type::Interval(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &emit_config::Emit_type::Ratio(v) => {
                        my_size += 1 + 8;
                    },
                    &emit_config::Emit_type::ConsistentEveryPeriod(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let ::std::option::Option::Some(ref v) = self.emit_type {
                match v {
                    &emit_config::Emit_type::Interval(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                    },
                    &emit_config::Emit_type::Ratio(v) => {
                        os.write_double(2, v)?;
                    },
                    &emit_config::Emit_type::ConsistentEveryPeriod(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EmitConfig {
            EmitConfig::new()
        }

        fn clear(&mut self) {
            self.emit_type = ::std::option::Option::None;
            self.emit_type = ::std::option::Option::None;
            self.emit_type = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EmitConfig {
            static instance: EmitConfig = EmitConfig {
                emit_type: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for EmitConfig {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ElisionConfig.EmitConfig").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for EmitConfig {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for EmitConfig {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `EmitConfig`
    pub mod emit_config {

        #[derive(Clone,PartialEq,Debug)]
        // @@protoc_insertion_point(oneof:pulse.config.processor.v1.ElisionConfig.EmitConfig.emit_type)
        pub enum Emit_type {
            // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.ElisionConfig.EmitConfig.interval)
            Interval(::protobuf::well_known_types::duration::Duration),
            // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.ElisionConfig.EmitConfig.ratio)
            Ratio(f64),
            // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.ElisionConfig.EmitConfig.consistent_every_period)
            ConsistentEveryPeriod(ConsistentEveryPeriod),
        }

        impl ::protobuf::Oneof for Emit_type {
        }

        impl ::protobuf::OneofFull for Emit_type {
            fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| <super::EmitConfig as ::protobuf::MessageFull>::descriptor().oneof_by_name("emit_type").unwrap()).clone()
            }
        }

        impl Emit_type {
            pub(in super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Emit_type>("emit_type")
            }
        }
        // @@protoc_insertion_point(message:pulse.config.processor.v1.ElisionConfig.EmitConfig.ConsistentEveryPeriod)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct ConsistentEveryPeriod {
            // message fields
            // @@protoc_insertion_point(field:pulse.config.processor.v1.ElisionConfig.EmitConfig.ConsistentEveryPeriod.periods)
            pub periods: u32,
            // @@protoc_insertion_point(field:pulse.config.processor.v1.ElisionConfig.EmitConfig.ConsistentEveryPeriod.period_seconds)
            pub period_seconds: ::std::option::Option<u32>,
            // special fields
            // @@protoc_insertion_point(special_field:pulse.config.processor.v1.ElisionConfig.EmitConfig.ConsistentEveryPeriod.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a ConsistentEveryPeriod {
            fn default() -> &'a ConsistentEveryPeriod {
                <ConsistentEveryPeriod as ::protobuf::Message>::default_instance()
            }
        }

        impl ConsistentEveryPeriod {
            pub fn new() -> ConsistentEveryPeriod {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(2);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "periods",
                    |m: &ConsistentEveryPeriod| { &m.periods },
                    |m: &mut ConsistentEveryPeriod| { &mut m.periods },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "period_seconds",
                    |m: &ConsistentEveryPeriod| { &m.period_seconds },
                    |m: &mut ConsistentEveryPeriod| { &mut m.period_seconds },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConsistentEveryPeriod>(
                    "ElisionConfig.EmitConfig.ConsistentEveryPeriod",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for ConsistentEveryPeriod {
            const NAME: &'static str = "ConsistentEveryPeriod";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        8 => {
                            self.periods = is.read_uint32()?;
                        },
                        16 => {
                            self.period_seconds = ::std::option::Option::Some(is.read_uint32()?);
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if self.periods != 0 {
                    my_size += ::protobuf::rt::uint32_size(1, self.periods);
                }
                if let Some(v) = self.period_seconds {
                    my_size += ::protobuf::rt::uint32_size(2, v);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if self.periods != 0 {
                    os.write_uint32(1, self.periods)?;
                }
                if let Some(v) = self.period_seconds {
                    os.write_uint32(2, v)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> ConsistentEveryPeriod {
                ConsistentEveryPeriod::new()
            }

            fn clear(&mut self) {
                self.periods = 0;
                self.period_seconds = ::std::option::Option::None;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static ConsistentEveryPeriod {
                static instance: ConsistentEveryPeriod = ConsistentEveryPeriod {
                    periods: 0,
                    period_seconds: ::std::option::Option::None,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for ConsistentEveryPeriod {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("ElisionConfig.EmitConfig.ConsistentEveryPeriod").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for ConsistentEveryPeriod {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for ConsistentEveryPeriod {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }

    // @@protoc_insertion_point(message:pulse.config.processor.v1.ElisionConfig.ZeroElisionConfig)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ZeroElisionConfig {
        // message fields
        // @@protoc_insertion_point(field:pulse.config.processor.v1.ElisionConfig.ZeroElisionConfig.enabled)
        pub enabled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:pulse.config.processor.v1.ElisionConfig.ZeroElisionConfig.counters)
        pub counters: ::protobuf::MessageField<zero_elision_config::Counters>,
        // @@protoc_insertion_point(field:pulse.config.processor.v1.ElisionConfig.ZeroElisionConfig.histograms)
        pub histograms: ::protobuf::MessageField<zero_elision_config::Histograms>,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.processor.v1.ElisionConfig.ZeroElisionConfig.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ZeroElisionConfig {
        fn default() -> &'a ZeroElisionConfig {
            <ZeroElisionConfig as ::protobuf::Message>::default_instance()
        }
    }

    impl ZeroElisionConfig {
        pub fn new() -> ZeroElisionConfig {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "enabled",
                |m: &ZeroElisionConfig| { &m.enabled },
                |m: &mut ZeroElisionConfig| { &mut m.enabled },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, zero_elision_config::Counters>(
                "counters",
                |m: &ZeroElisionConfig| { &m.counters },
                |m: &mut ZeroElisionConfig| { &mut m.counters },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, zero_elision_config::Histograms>(
                "histograms",
                |m: &ZeroElisionConfig| { &m.histograms },
                |m: &mut ZeroElisionConfig| { &mut m.histograms },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ZeroElisionConfig>(
                "ElisionConfig.ZeroElisionConfig",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ZeroElisionConfig {
        const NAME: &'static str = "ZeroElisionConfig";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.enabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.counters)?;
                    },
                    26 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.histograms)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.enabled {
                my_size += 1 + 1;
            }
            if let Some(v) = self.counters.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.histograms.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.enabled {
                os.write_bool(1, v)?;
            }
            if let Some(v) = self.counters.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            if let Some(v) = self.histograms.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ZeroElisionConfig {
            ZeroElisionConfig::new()
        }

        fn clear(&mut self) {
            self.enabled = ::std::option::Option::None;
            self.counters.clear();
            self.histograms.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ZeroElisionConfig {
            static instance: ZeroElisionConfig = ZeroElisionConfig {
                enabled: ::std::option::Option::None,
                counters: ::protobuf::MessageField::none(),
                histograms: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ZeroElisionConfig {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ElisionConfig.ZeroElisionConfig").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ZeroElisionConfig {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ZeroElisionConfig {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `ZeroElisionConfig`
    pub mod zero_elision_config {
        // @@protoc_insertion_point(message:pulse.config.processor.v1.ElisionConfig.ZeroElisionConfig.Counters)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct Counters {
            // message fields
            // @@protoc_insertion_point(field:pulse.config.processor.v1.ElisionConfig.ZeroElisionConfig.Counters.absolute_counters)
            pub absolute_counters: ::protobuf::MessageField<counters::AbsoluteCounters>,
            // special fields
            // @@protoc_insertion_point(special_field:pulse.config.processor.v1.ElisionConfig.ZeroElisionConfig.Counters.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Counters {
            fn default() -> &'a Counters {
                <Counters as ::protobuf::Message>::default_instance()
            }
        }

        impl Counters {
            pub fn new() -> Counters {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(1);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, counters::AbsoluteCounters>(
                    "absolute_counters",
                    |m: &Counters| { &m.absolute_counters },
                    |m: &mut Counters| { &mut m.absolute_counters },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Counters>(
                    "ElisionConfig.ZeroElisionConfig.Counters",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for Counters {
            const NAME: &'static str = "Counters";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            ::protobuf::rt::read_singular_message_into_field(is, &mut self.absolute_counters)?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.absolute_counters.as_ref() {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.absolute_counters.as_ref() {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Counters {
                Counters::new()
            }

            fn clear(&mut self) {
                self.absolute_counters.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Counters {
                static instance: Counters = Counters {
                    absolute_counters: ::protobuf::MessageField::none(),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for Counters {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("ElisionConfig.ZeroElisionConfig.Counters").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for Counters {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Counters {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        /// Nested message and enums of message `Counters`
        pub mod counters {
            // @@protoc_insertion_point(message:pulse.config.processor.v1.ElisionConfig.ZeroElisionConfig.Counters.AbsoluteCounters)
            #[derive(PartialEq,Clone,Default,Debug)]
            pub struct AbsoluteCounters {
                // message fields
                // @@protoc_insertion_point(field:pulse.config.processor.v1.ElisionConfig.ZeroElisionConfig.Counters.AbsoluteCounters.elide_if_no_change)
                pub elide_if_no_change: bool,
                // special fields
                // @@protoc_insertion_point(special_field:pulse.config.processor.v1.ElisionConfig.ZeroElisionConfig.Counters.AbsoluteCounters.special_fields)
                pub special_fields: ::protobuf::SpecialFields,
            }

            impl<'a> ::std::default::Default for &'a AbsoluteCounters {
                fn default() -> &'a AbsoluteCounters {
                    <AbsoluteCounters as ::protobuf::Message>::default_instance()
                }
            }

            impl AbsoluteCounters {
                pub fn new() -> AbsoluteCounters {
                    ::std::default::Default::default()
                }

                pub(in super::super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                    let mut fields = ::std::vec::Vec::with_capacity(1);
                    let mut oneofs = ::std::vec::Vec::with_capacity(0);
                    fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                        "elide_if_no_change",
                        |m: &AbsoluteCounters| { &m.elide_if_no_change },
                        |m: &mut AbsoluteCounters| { &mut m.elide_if_no_change },
                    ));
                    ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AbsoluteCounters>(
                        "ElisionConfig.ZeroElisionConfig.Counters.AbsoluteCounters",
                        fields,
                        oneofs,
                    )
                }
            }

            impl ::protobuf::Message for AbsoluteCounters {
                const NAME: &'static str = "AbsoluteCounters";

                fn is_initialized(&self) -> bool {
                    true
                }

                fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            16 => {
                                self.elide_if_no_change = is.read_bool()?;
                            },
                            tag => {
                                ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                            },
                        };
                    }
                    ::std::result::Result::Ok(())
                }

                // Compute sizes of nested messages
                #[allow(unused_variables)]
                fn compute_size(&self) -> u64 {
                    let mut my_size = 0;
                    if self.elide_if_no_change != false {
                        my_size += 1 + 1;
                    }
                    my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                    self.special_fields.cached_size().set(my_size as u32);
                    my_size
                }

                fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                    if self.elide_if_no_change != false {
                        os.write_bool(2, self.elide_if_no_change)?;
                    }
                    os.write_unknown_fields(self.special_fields.unknown_fields())?;
                    ::std::result::Result::Ok(())
                }

                fn special_fields(&self) -> &::protobuf::SpecialFields {
                    &self.special_fields
                }

                fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                    &mut self.special_fields
                }

                fn new() -> AbsoluteCounters {
                    AbsoluteCounters::new()
                }

                fn clear(&mut self) {
                    self.elide_if_no_change = false;
                    self.special_fields.clear();
                }

                fn default_instance() -> &'static AbsoluteCounters {
                    static instance: AbsoluteCounters = AbsoluteCounters {
                        elide_if_no_change: false,
                        special_fields: ::protobuf::SpecialFields::new(),
                    };
                    &instance
                }
            }

            impl ::protobuf::MessageFull for AbsoluteCounters {
                fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                    static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                    descriptor.get(|| super::super::super::file_descriptor().message_by_package_relative_name("ElisionConfig.ZeroElisionConfig.Counters.AbsoluteCounters").unwrap()).clone()
                }
            }

            impl ::std::fmt::Display for AbsoluteCounters {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    ::protobuf::text_format::fmt(self, f)
                }
            }

            impl ::protobuf::reflect::ProtobufValue for AbsoluteCounters {
                type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
            }
        }

        // @@protoc_insertion_point(message:pulse.config.processor.v1.ElisionConfig.ZeroElisionConfig.Histograms)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct Histograms {
            // message fields
            // @@protoc_insertion_point(field:pulse.config.processor.v1.ElisionConfig.ZeroElisionConfig.Histograms.elide_if_no_change)
            pub elide_if_no_change: bool,
            // special fields
            // @@protoc_insertion_point(special_field:pulse.config.processor.v1.ElisionConfig.ZeroElisionConfig.Histograms.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Histograms {
            fn default() -> &'a Histograms {
                <Histograms as ::protobuf::Message>::default_instance()
            }
        }

        impl Histograms {
            pub fn new() -> Histograms {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(1);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "elide_if_no_change",
                    |m: &Histograms| { &m.elide_if_no_change },
                    |m: &mut Histograms| { &mut m.elide_if_no_change },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Histograms>(
                    "ElisionConfig.ZeroElisionConfig.Histograms",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for Histograms {
            const NAME: &'static str = "Histograms";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        24 => {
                            self.elide_if_no_change = is.read_bool()?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if self.elide_if_no_change != false {
                    my_size += 1 + 1;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if self.elide_if_no_change != false {
                    os.write_bool(3, self.elide_if_no_change)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Histograms {
                Histograms::new()
            }

            fn clear(&mut self) {
                self.elide_if_no_change = false;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Histograms {
                static instance: Histograms = Histograms {
                    elide_if_no_change: false,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for Histograms {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("ElisionConfig.ZeroElisionConfig.Histograms").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for Histograms {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Histograms {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }

    // @@protoc_insertion_point(message:pulse.config.processor.v1.ElisionConfig.BlocklistConfig)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct BlocklistConfig {
        // message fields
        // @@protoc_insertion_point(field:pulse.config.processor.v1.ElisionConfig.BlocklistConfig.allowed_metric_patterns)
        pub allowed_metric_patterns: ::protobuf::MessageField<super::super::file_watcher::FileSourceConfig>,
        // @@protoc_insertion_point(field:pulse.config.processor.v1.ElisionConfig.BlocklistConfig.allowed_metrics)
        pub allowed_metrics: ::protobuf::MessageField<super::super::file_watcher::FileSourceConfig>,
        // @@protoc_insertion_point(field:pulse.config.processor.v1.ElisionConfig.BlocklistConfig.prom)
        pub prom: bool,
        // message oneof groups
        pub blocked_metrics_type: ::std::option::Option<blocklist_config::Blocked_metrics_type>,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.processor.v1.ElisionConfig.BlocklistConfig.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a BlocklistConfig {
        fn default() -> &'a BlocklistConfig {
            <BlocklistConfig as ::protobuf::Message>::default_instance()
        }
    }

    impl BlocklistConfig {
        pub fn new() -> BlocklistConfig {
            ::std::default::Default::default()
        }

        // .pulse.config.common.v1.FileSourceConfig blocked_metrics = 3;

        pub fn blocked_metrics(&self) -> &super::super::file_watcher::FileSourceConfig {
            match self.blocked_metrics_type {
                ::std::option::Option::Some(blocklist_config::Blocked_metrics_type::BlockedMetrics(ref v)) => v,
                _ => <super::super::file_watcher::FileSourceConfig as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_blocked_metrics(&mut self) {
            self.blocked_metrics_type = ::std::option::Option::None;
        }

        pub fn has_blocked_metrics(&self) -> bool {
            match self.blocked_metrics_type {
                ::std::option::Option::Some(blocklist_config::Blocked_metrics_type::BlockedMetrics(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_blocked_metrics(&mut self, v: super::super::file_watcher::FileSourceConfig) {
            self.blocked_metrics_type = ::std::option::Option::Some(blocklist_config::Blocked_metrics_type::BlockedMetrics(v))
        }

        // Mutable pointer to the field.
        pub fn mut_blocked_metrics(&mut self) -> &mut super::super::file_watcher::FileSourceConfig {
            if let ::std::option::Option::Some(blocklist_config::Blocked_metrics_type::BlockedMetrics(_)) = self.blocked_metrics_type {
            } else {
                self.blocked_metrics_type = ::std::option::Option::Some(blocklist_config::Blocked_metrics_type::BlockedMetrics(super::super::file_watcher::FileSourceConfig::new()));
            }
            match self.blocked_metrics_type {
                ::std::option::Option::Some(blocklist_config::Blocked_metrics_type::BlockedMetrics(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_blocked_metrics(&mut self) -> super::super::file_watcher::FileSourceConfig {
            if self.has_blocked_metrics() {
                match self.blocked_metrics_type.take() {
                    ::std::option::Option::Some(blocklist_config::Blocked_metrics_type::BlockedMetrics(v)) => v,
                    _ => panic!(),
                }
            } else {
                super::super::file_watcher::FileSourceConfig::new()
            }
        }

        // bool block_all = 5;

        pub fn block_all(&self) -> bool {
            match self.blocked_metrics_type {
                ::std::option::Option::Some(blocklist_config::Blocked_metrics_type::BlockAll(v)) => v,
                _ => false,
            }
        }

        pub fn clear_block_all(&mut self) {
            self.blocked_metrics_type = ::std::option::Option::None;
        }

        pub fn has_block_all(&self) -> bool {
            match self.blocked_metrics_type {
                ::std::option::Option::Some(blocklist_config::Blocked_metrics_type::BlockAll(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_block_all(&mut self, v: bool) {
            self.blocked_metrics_type = ::std::option::Option::Some(blocklist_config::Blocked_metrics_type::BlockAll(v))
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(1);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::file_watcher::FileSourceConfig>(
                "allowed_metric_patterns",
                |m: &BlocklistConfig| { &m.allowed_metric_patterns },
                |m: &mut BlocklistConfig| { &mut m.allowed_metric_patterns },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::file_watcher::FileSourceConfig>(
                "allowed_metrics",
                |m: &BlocklistConfig| { &m.allowed_metrics },
                |m: &mut BlocklistConfig| { &mut m.allowed_metrics },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::super::file_watcher::FileSourceConfig>(
                "blocked_metrics",
                BlocklistConfig::has_blocked_metrics,
                BlocklistConfig::blocked_metrics,
                BlocklistConfig::mut_blocked_metrics,
                BlocklistConfig::set_blocked_metrics,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
                "block_all",
                BlocklistConfig::has_block_all,
                BlocklistConfig::block_all,
                BlocklistConfig::set_block_all,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "prom",
                |m: &BlocklistConfig| { &m.prom },
                |m: &mut BlocklistConfig| { &mut m.prom },
            ));
            oneofs.push(blocklist_config::Blocked_metrics_type::generated_oneof_descriptor_data());
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BlocklistConfig>(
                "ElisionConfig.BlocklistConfig",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for BlocklistConfig {
        const NAME: &'static str = "BlocklistConfig";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.allowed_metric_patterns)?;
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.allowed_metrics)?;
                    },
                    26 => {
                        self.blocked_metrics_type = ::std::option::Option::Some(blocklist_config::Blocked_metrics_type::BlockedMetrics(is.read_message()?));
                    },
                    40 => {
                        self.blocked_metrics_type = ::std::option::Option::Some(blocklist_config::Blocked_metrics_type::BlockAll(is.read_bool()?));
                    },
                    32 => {
                        self.prom = is.read_bool()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.allowed_metric_patterns.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.allowed_metrics.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if self.prom != false {
                my_size += 1 + 1;
            }
            if let ::std::option::Option::Some(ref v) = self.blocked_metrics_type {
                match v {
                    &blocklist_config::Blocked_metrics_type::BlockedMetrics(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &blocklist_config::Blocked_metrics_type::BlockAll(v) => {
                        my_size += 1 + 1;
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.allowed_metric_patterns.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if let Some(v) = self.allowed_metrics.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            if self.prom != false {
                os.write_bool(4, self.prom)?;
            }
            if let ::std::option::Option::Some(ref v) = self.blocked_metrics_type {
                match v {
                    &blocklist_config::Blocked_metrics_type::BlockedMetrics(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                    },
                    &blocklist_config::Blocked_metrics_type::BlockAll(v) => {
                        os.write_bool(5, v)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> BlocklistConfig {
            BlocklistConfig::new()
        }

        fn clear(&mut self) {
            self.allowed_metric_patterns.clear();
            self.allowed_metrics.clear();
            self.blocked_metrics_type = ::std::option::Option::None;
            self.blocked_metrics_type = ::std::option::Option::None;
            self.prom = false;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static BlocklistConfig {
            static instance: BlocklistConfig = BlocklistConfig {
                allowed_metric_patterns: ::protobuf::MessageField::none(),
                allowed_metrics: ::protobuf::MessageField::none(),
                prom: false,
                blocked_metrics_type: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for BlocklistConfig {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ElisionConfig.BlocklistConfig").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for BlocklistConfig {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for BlocklistConfig {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `BlocklistConfig`
    pub mod blocklist_config {

        #[derive(Clone,PartialEq,Debug)]
        // @@protoc_insertion_point(oneof:pulse.config.processor.v1.ElisionConfig.BlocklistConfig.blocked_metrics_type)
        pub enum Blocked_metrics_type {
            // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.ElisionConfig.BlocklistConfig.blocked_metrics)
            BlockedMetrics(super::super::super::file_watcher::FileSourceConfig),
            // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.ElisionConfig.BlocklistConfig.block_all)
            BlockAll(bool),
        }

        impl ::protobuf::Oneof for Blocked_metrics_type {
        }

        impl ::protobuf::OneofFull for Blocked_metrics_type {
            fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| <super::BlocklistConfig as ::protobuf::MessageFull>::descriptor().oneof_by_name("blocked_metrics_type").unwrap()).clone()
            }
        }

        impl Blocked_metrics_type {
            pub(in super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Blocked_metrics_type>("blocked_metrics_type")
            }
        }
    }

    // @@protoc_insertion_point(message:pulse.config.processor.v1.ElisionConfig.RegexOverrideConfig)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct RegexOverrideConfig {
        // message fields
        // @@protoc_insertion_point(field:pulse.config.processor.v1.ElisionConfig.RegexOverrideConfig.emit)
        pub emit: ::protobuf::MessageField<EmitConfig>,
        // @@protoc_insertion_point(field:pulse.config.processor.v1.ElisionConfig.RegexOverrideConfig.regex)
        pub regex: ::protobuf::Chars,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.processor.v1.ElisionConfig.RegexOverrideConfig.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a RegexOverrideConfig {
        fn default() -> &'a RegexOverrideConfig {
            <RegexOverrideConfig as ::protobuf::Message>::default_instance()
        }
    }

    impl RegexOverrideConfig {
        pub fn new() -> RegexOverrideConfig {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, EmitConfig>(
                "emit",
                |m: &RegexOverrideConfig| { &m.emit },
                |m: &mut RegexOverrideConfig| { &mut m.emit },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "regex",
                |m: &RegexOverrideConfig| { &m.regex },
                |m: &mut RegexOverrideConfig| { &mut m.regex },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RegexOverrideConfig>(
                "ElisionConfig.RegexOverrideConfig",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for RegexOverrideConfig {
        const NAME: &'static str = "RegexOverrideConfig";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.emit)?;
                    },
                    18 => {
                        self.regex = is.read_tokio_chars()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.emit.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if !self.regex.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.regex);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.emit.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if !self.regex.is_empty() {
                os.write_string(2, &self.regex)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> RegexOverrideConfig {
            RegexOverrideConfig::new()
        }

        fn clear(&mut self) {
            self.emit.clear();
            self.regex.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static RegexOverrideConfig {
            static instance: RegexOverrideConfig = RegexOverrideConfig {
                emit: ::protobuf::MessageField::none(),
                regex: ::protobuf::Chars::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for RegexOverrideConfig {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ElisionConfig.RegexOverrideConfig").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for RegexOverrideConfig {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for RegexOverrideConfig {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'pulse/config/processor/v1/elision.proto\x12\x19pulse.config.processor\
    .v1\x1a)pulse/config/common/v1/file_watcher.proto\x1a\x1egoogle/protobuf\
    /duration.proto\x1a\x17validate/validate.proto\"\xa8\x0e\n\rElisionConfi\
    g\x12Q\n\x04emit\x18\x01\x20\x01(\x0b23.pulse.config.processor.v1.Elisio\
    nConfig.EmitConfigR\x04emitB\x08\xfaB\x05\x8a\x01\x02\x10\x01\x12!\n\x0c\
    analyze_mode\x18\x02\x20\x01(\x08R\x0banalyzeMode\x12e\n\x0fregex_overri\
    des\x18\x03\x20\x03(\x0b2<.pulse.config.processor.v1.ElisionConfig.Regex\
    OverrideConfigR\x0eregexOverrides\x12N\n\x04zero\x18\x04\x20\x01(\x0b2:.\
    pulse.config.processor.v1.ElisionConfig.ZeroElisionConfigR\x04zero\x12V\
    \n\tblocklist\x18\x05\x20\x01(\x0b28.pulse.config.processor.v1.ElisionCo\
    nfig.BlocklistConfigR\tblocklist\x1a\xfa\x02\n\nEmitConfig\x12A\n\x08int\
    erval\x18\x01\x20\x01(\x0b2\x19.google.protobuf.DurationH\0R\x08interval\
    B\x08\xfaB\x05\xaa\x01\x02*\0\x12\x16\n\x05ratio\x18\x02\x20\x01(\x01H\0\
    R\x05ratio\x12\x83\x01\n\x17consistent_every_period\x18\x03\x20\x01(\x0b\
    2I.pulse.config.processor.v1.ElisionConfig.EmitConfig.ConsistentEveryPer\
    iodH\0R\x15consistentEveryPeriod\x1ay\n\x15ConsistentEveryPeriod\x12!\n\
    \x07periods\x18\x01\x20\x01(\rR\x07periodsB\x07\xfaB\x04*\x02\x20\0\x12*\
    \n\x0eperiod_seconds\x18\x02\x20\x01(\rH\0R\rperiodSeconds\x88\x01\x01B\
    \x11\n\x0f_period_secondsB\x10\n\temit_type\x12\x03\xf8B\x01\x1a\x93\x04\
    \n\x11ZeroElisionConfig\x12\x1d\n\x07enabled\x18\x01\x20\x01(\x08H\0R\
    \x07enabled\x88\x01\x01\x12_\n\x08counters\x18\x02\x20\x01(\x0b2C.pulse.\
    config.processor.v1.ElisionConfig.ZeroElisionConfig.CountersR\x08counter\
    s\x12e\n\nhistograms\x18\x03\x20\x01(\x0b2E.pulse.config.processor.v1.El\
    isionConfig.ZeroElisionConfig.HistogramsR\nhistograms\x1a\xcf\x01\n\x08C\
    ounters\x12\x81\x01\n\x11absolute_counters\x18\x01\x20\x01(\x0b2T.pulse.\
    config.processor.v1.ElisionConfig.ZeroElisionConfig.Counters.AbsoluteCou\
    ntersR\x10absoluteCounters\x1a?\n\x10AbsoluteCounters\x12+\n\x12elide_if\
    _no_change\x18\x02\x20\x01(\x08R\x0felideIfNoChange\x1a9\n\nHistograms\
    \x12+\n\x12elide_if_no_change\x18\x03\x20\x01(\x08R\x0felideIfNoChangeB\
    \n\n\x08_enabled\x1a\xf4\x02\n\x0fBlocklistConfig\x12`\n\x17allowed_metr\
    ic_patterns\x18\x01\x20\x01(\x0b2(.pulse.config.common.v1.FileSourceConf\
    igR\x15allowedMetricPatterns\x12Q\n\x0fallowed_metrics\x18\x02\x20\x01(\
    \x0b2(.pulse.config.common.v1.FileSourceConfigR\x0eallowedMetrics\x12S\n\
    \x0fblocked_metrics\x18\x03\x20\x01(\x0b2(.pulse.config.common.v1.FileSo\
    urceConfigH\0R\x0eblockedMetrics\x12&\n\tblock_all\x18\x05\x20\x01(\x08H\
    \0R\x08blockAllB\x07\xfaB\x04j\x02\x08\x01\x12\x12\n\x04prom\x18\x04\x20\
    \x01(\x08R\x04promB\x1b\n\x14blocked_metrics_type\x12\x03\xf8B\x01\x1a\
    \x87\x01\n\x13RegexOverrideConfig\x12Q\n\x04emit\x18\x01\x20\x01(\x0b23.\
    pulse.config.processor.v1.ElisionConfig.EmitConfigR\x04emitB\x08\xfaB\
    \x05\x8a\x01\x02\x10\x01\x12\x1d\n\x05regex\x18\x02\x20\x01(\tR\x05regex\
    B\x07\xfaB\x04r\x02\x10\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::file_watcher::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::duration::file_descriptor().clone());
            deps.push(super::validate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(9);
            messages.push(ElisionConfig::generated_message_descriptor_data());
            messages.push(elision_config::EmitConfig::generated_message_descriptor_data());
            messages.push(elision_config::ZeroElisionConfig::generated_message_descriptor_data());
            messages.push(elision_config::BlocklistConfig::generated_message_descriptor_data());
            messages.push(elision_config::RegexOverrideConfig::generated_message_descriptor_data());
            messages.push(elision_config::emit_config::ConsistentEveryPeriod::generated_message_descriptor_data());
            messages.push(elision_config::zero_elision_config::Counters::generated_message_descriptor_data());
            messages.push(elision_config::zero_elision_config::Histograms::generated_message_descriptor_data());
            messages.push(elision_config::zero_elision_config::counters::AbsoluteCounters::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
