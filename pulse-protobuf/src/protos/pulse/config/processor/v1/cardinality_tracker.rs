// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 32.0
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `pulse/config/processor/v1/cardinality_tracker.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:pulse.config.processor.v1.CardinalityTrackerConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CardinalityTrackerConfig {
    // message fields
    // @@protoc_insertion_point(field:pulse.config.processor.v1.CardinalityTrackerConfig.tracking_types)
    pub tracking_types: ::std::vec::Vec<cardinality_tracker_config::TrackingType>,
    // @@protoc_insertion_point(field:pulse.config.processor.v1.CardinalityTrackerConfig.rotate_after)
    pub rotate_after: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.processor.v1.CardinalityTrackerConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CardinalityTrackerConfig {
    fn default() -> &'a CardinalityTrackerConfig {
        <CardinalityTrackerConfig as ::protobuf::Message>::default_instance()
    }
}

impl CardinalityTrackerConfig {
    pub fn new() -> CardinalityTrackerConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tracking_types",
            |m: &CardinalityTrackerConfig| { &m.tracking_types },
            |m: &mut CardinalityTrackerConfig| { &mut m.tracking_types },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "rotate_after",
            |m: &CardinalityTrackerConfig| { &m.rotate_after },
            |m: &mut CardinalityTrackerConfig| { &mut m.rotate_after },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CardinalityTrackerConfig>(
            "CardinalityTrackerConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CardinalityTrackerConfig {
    const NAME: &'static str = "CardinalityTrackerConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.tracking_types.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.rotate_after)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.tracking_types {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.rotate_after.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.tracking_types {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.rotate_after.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CardinalityTrackerConfig {
        CardinalityTrackerConfig::new()
    }

    fn clear(&mut self) {
        self.tracking_types.clear();
        self.rotate_after.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CardinalityTrackerConfig {
        static instance: CardinalityTrackerConfig = CardinalityTrackerConfig {
            tracking_types: ::std::vec::Vec::new(),
            rotate_after: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CardinalityTrackerConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CardinalityTrackerConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CardinalityTrackerConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardinalityTrackerConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CardinalityTrackerConfig`
pub mod cardinality_tracker_config {
    // @@protoc_insertion_point(message:pulse.config.processor.v1.CardinalityTrackerConfig.Count)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Count {
        // message fields
        // @@protoc_insertion_point(field:pulse.config.processor.v1.CardinalityTrackerConfig.Count.name_regex)
        pub name_regex: ::protobuf::Chars,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.processor.v1.CardinalityTrackerConfig.Count.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Count {
        fn default() -> &'a Count {
            <Count as ::protobuf::Message>::default_instance()
        }
    }

    impl Count {
        pub fn new() -> Count {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "name_regex",
                |m: &Count| { &m.name_regex },
                |m: &mut Count| { &mut m.name_regex },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Count>(
                "CardinalityTrackerConfig.Count",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Count {
        const NAME: &'static str = "Count";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name_regex = is.read_tokio_chars()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.name_regex.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.name_regex);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.name_regex.is_empty() {
                os.write_string(1, &self.name_regex)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Count {
            Count::new()
        }

        fn clear(&mut self) {
            self.name_regex.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Count {
            static instance: Count = Count {
                name_regex: ::protobuf::Chars::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Count {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CardinalityTrackerConfig.Count").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Count {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Count {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:pulse.config.processor.v1.CardinalityTrackerConfig.TopK)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct TopK {
        // message fields
        // @@protoc_insertion_point(field:pulse.config.processor.v1.CardinalityTrackerConfig.TopK.top_k)
        pub top_k: u32,
        // message oneof groups
        pub group_by: ::std::option::Option<top_k::Group_by>,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.processor.v1.CardinalityTrackerConfig.TopK.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a TopK {
        fn default() -> &'a TopK {
            <TopK as ::protobuf::Message>::default_instance()
        }
    }

    impl TopK {
        pub fn new() -> TopK {
            ::std::default::Default::default()
        }

        // string name_regex = 1;

        pub fn name_regex(&self) -> &str {
            match self.group_by {
                ::std::option::Option::Some(top_k::Group_by::NameRegex(ref v)) => v,
                _ => "",
            }
        }

        pub fn clear_name_regex(&mut self) {
            self.group_by = ::std::option::Option::None;
        }

        pub fn has_name_regex(&self) -> bool {
            match self.group_by {
                ::std::option::Option::Some(top_k::Group_by::NameRegex(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_name_regex(&mut self, v: ::protobuf::Chars) {
            self.group_by = ::std::option::Option::Some(top_k::Group_by::NameRegex(v))
        }

        // Mutable pointer to the field.
        pub fn mut_name_regex(&mut self) -> &mut ::protobuf::Chars {
            if let ::std::option::Option::Some(top_k::Group_by::NameRegex(_)) = self.group_by {
            } else {
                self.group_by = ::std::option::Option::Some(top_k::Group_by::NameRegex(::protobuf::Chars::new()));
            }
            match self.group_by {
                ::std::option::Option::Some(top_k::Group_by::NameRegex(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_name_regex(&mut self) -> ::protobuf::Chars {
            if self.has_name_regex() {
                match self.group_by.take() {
                    ::std::option::Option::Some(top_k::Group_by::NameRegex(v)) => v,
                    _ => panic!(),
                }
            } else {
                ::protobuf::Chars::new()
            }
        }

        // .pulse.config.processor.v1.CardinalityTrackerConfig.TopK.TagList tag_names = 2;

        pub fn tag_names(&self) -> &top_k::TagList {
            match self.group_by {
                ::std::option::Option::Some(top_k::Group_by::TagNames(ref v)) => v,
                _ => <top_k::TagList as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_tag_names(&mut self) {
            self.group_by = ::std::option::Option::None;
        }

        pub fn has_tag_names(&self) -> bool {
            match self.group_by {
                ::std::option::Option::Some(top_k::Group_by::TagNames(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_tag_names(&mut self, v: top_k::TagList) {
            self.group_by = ::std::option::Option::Some(top_k::Group_by::TagNames(v))
        }

        // Mutable pointer to the field.
        pub fn mut_tag_names(&mut self) -> &mut top_k::TagList {
            if let ::std::option::Option::Some(top_k::Group_by::TagNames(_)) = self.group_by {
            } else {
                self.group_by = ::std::option::Option::Some(top_k::Group_by::TagNames(top_k::TagList::new()));
            }
            match self.group_by {
                ::std::option::Option::Some(top_k::Group_by::TagNames(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_tag_names(&mut self) -> top_k::TagList {
            if self.has_tag_names() {
                match self.group_by.take() {
                    ::std::option::Option::Some(top_k::Group_by::TagNames(v)) => v,
                    _ => panic!(),
                }
            } else {
                top_k::TagList::new()
            }
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(1);
            fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
                "name_regex",
                TopK::has_name_regex,
                TopK::name_regex,
                TopK::set_name_regex,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, top_k::TagList>(
                "tag_names",
                TopK::has_tag_names,
                TopK::tag_names,
                TopK::mut_tag_names,
                TopK::set_tag_names,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "top_k",
                |m: &TopK| { &m.top_k },
                |m: &mut TopK| { &mut m.top_k },
            ));
            oneofs.push(top_k::Group_by::generated_oneof_descriptor_data());
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TopK>(
                "CardinalityTrackerConfig.TopK",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for TopK {
        const NAME: &'static str = "TopK";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.group_by = ::std::option::Option::Some(top_k::Group_by::NameRegex(is.read_tokio_chars()?));
                    },
                    18 => {
                        self.group_by = ::std::option::Option::Some(top_k::Group_by::TagNames(is.read_message()?));
                    },
                    24 => {
                        self.top_k = is.read_uint32()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.top_k != 0 {
                my_size += ::protobuf::rt::uint32_size(3, self.top_k);
            }
            if let ::std::option::Option::Some(ref v) = self.group_by {
                match v {
                    &top_k::Group_by::NameRegex(ref v) => {
                        my_size += ::protobuf::rt::string_size(1, &v);
                    },
                    &top_k::Group_by::TagNames(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.top_k != 0 {
                os.write_uint32(3, self.top_k)?;
            }
            if let ::std::option::Option::Some(ref v) = self.group_by {
                match v {
                    &top_k::Group_by::NameRegex(ref v) => {
                        os.write_string(1, v)?;
                    },
                    &top_k::Group_by::TagNames(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> TopK {
            TopK::new()
        }

        fn clear(&mut self) {
            self.group_by = ::std::option::Option::None;
            self.group_by = ::std::option::Option::None;
            self.top_k = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static TopK {
            static instance: TopK = TopK {
                top_k: 0,
                group_by: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for TopK {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CardinalityTrackerConfig.TopK").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for TopK {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for TopK {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `TopK`
    pub mod top_k {

        #[derive(Clone,PartialEq,Debug)]
        // @@protoc_insertion_point(oneof:pulse.config.processor.v1.CardinalityTrackerConfig.TopK.group_by)
        pub enum Group_by {
            // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.CardinalityTrackerConfig.TopK.name_regex)
            NameRegex(::protobuf::Chars),
            // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.CardinalityTrackerConfig.TopK.tag_names)
            TagNames(TagList),
        }

        impl ::protobuf::Oneof for Group_by {
        }

        impl ::protobuf::OneofFull for Group_by {
            fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| <super::TopK as ::protobuf::MessageFull>::descriptor().oneof_by_name("group_by").unwrap()).clone()
            }
        }

        impl Group_by {
            pub(in super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Group_by>("group_by")
            }
        }
        // @@protoc_insertion_point(message:pulse.config.processor.v1.CardinalityTrackerConfig.TopK.TagList)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct TagList {
            // message fields
            // @@protoc_insertion_point(field:pulse.config.processor.v1.CardinalityTrackerConfig.TopK.TagList.tags)
            pub tags: ::std::vec::Vec<::protobuf::Chars>,
            // special fields
            // @@protoc_insertion_point(special_field:pulse.config.processor.v1.CardinalityTrackerConfig.TopK.TagList.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a TagList {
            fn default() -> &'a TagList {
                <TagList as ::protobuf::Message>::default_instance()
            }
        }

        impl TagList {
            pub fn new() -> TagList {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(1);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                    "tags",
                    |m: &TagList| { &m.tags },
                    |m: &mut TagList| { &mut m.tags },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TagList>(
                    "CardinalityTrackerConfig.TopK.TagList",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for TagList {
            const NAME: &'static str = "TagList";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.tags.push(is.read_tokio_chars()?);
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                for value in &self.tags {
                    my_size += ::protobuf::rt::string_size(1, &value);
                };
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                for v in &self.tags {
                    os.write_string(1, &v)?;
                };
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> TagList {
                TagList::new()
            }

            fn clear(&mut self) {
                self.tags.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static TagList {
                static instance: TagList = TagList {
                    tags: ::std::vec::Vec::new(),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for TagList {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("CardinalityTrackerConfig.TopK.TagList").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for TagList {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for TagList {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }

    // @@protoc_insertion_point(message:pulse.config.processor.v1.CardinalityTrackerConfig.TrackingType)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct TrackingType {
        // message fields
        // @@protoc_insertion_point(field:pulse.config.processor.v1.CardinalityTrackerConfig.TrackingType.name)
        pub name: ::protobuf::Chars,
        // message oneof groups
        pub type_: ::std::option::Option<tracking_type::Type>,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.processor.v1.CardinalityTrackerConfig.TrackingType.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a TrackingType {
        fn default() -> &'a TrackingType {
            <TrackingType as ::protobuf::Message>::default_instance()
        }
    }

    impl TrackingType {
        pub fn new() -> TrackingType {
            ::std::default::Default::default()
        }

        // .pulse.config.processor.v1.CardinalityTrackerConfig.Count count = 1;

        pub fn count(&self) -> &Count {
            match self.type_ {
                ::std::option::Option::Some(tracking_type::Type::Count(ref v)) => v,
                _ => <Count as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_count(&mut self) {
            self.type_ = ::std::option::Option::None;
        }

        pub fn has_count(&self) -> bool {
            match self.type_ {
                ::std::option::Option::Some(tracking_type::Type::Count(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_count(&mut self, v: Count) {
            self.type_ = ::std::option::Option::Some(tracking_type::Type::Count(v))
        }

        // Mutable pointer to the field.
        pub fn mut_count(&mut self) -> &mut Count {
            if let ::std::option::Option::Some(tracking_type::Type::Count(_)) = self.type_ {
            } else {
                self.type_ = ::std::option::Option::Some(tracking_type::Type::Count(Count::new()));
            }
            match self.type_ {
                ::std::option::Option::Some(tracking_type::Type::Count(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_count(&mut self) -> Count {
            if self.has_count() {
                match self.type_.take() {
                    ::std::option::Option::Some(tracking_type::Type::Count(v)) => v,
                    _ => panic!(),
                }
            } else {
                Count::new()
            }
        }

        // .pulse.config.processor.v1.CardinalityTrackerConfig.TopK top_k = 2;

        pub fn top_k(&self) -> &TopK {
            match self.type_ {
                ::std::option::Option::Some(tracking_type::Type::TopK(ref v)) => v,
                _ => <TopK as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_top_k(&mut self) {
            self.type_ = ::std::option::Option::None;
        }

        pub fn has_top_k(&self) -> bool {
            match self.type_ {
                ::std::option::Option::Some(tracking_type::Type::TopK(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_top_k(&mut self, v: TopK) {
            self.type_ = ::std::option::Option::Some(tracking_type::Type::TopK(v))
        }

        // Mutable pointer to the field.
        pub fn mut_top_k(&mut self) -> &mut TopK {
            if let ::std::option::Option::Some(tracking_type::Type::TopK(_)) = self.type_ {
            } else {
                self.type_ = ::std::option::Option::Some(tracking_type::Type::TopK(TopK::new()));
            }
            match self.type_ {
                ::std::option::Option::Some(tracking_type::Type::TopK(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_top_k(&mut self) -> TopK {
            if self.has_top_k() {
                match self.type_.take() {
                    ::std::option::Option::Some(tracking_type::Type::TopK(v)) => v,
                    _ => panic!(),
                }
            } else {
                TopK::new()
            }
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(1);
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Count>(
                "count",
                TrackingType::has_count,
                TrackingType::count,
                TrackingType::mut_count,
                TrackingType::set_count,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, TopK>(
                "top_k",
                TrackingType::has_top_k,
                TrackingType::top_k,
                TrackingType::mut_top_k,
                TrackingType::set_top_k,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "name",
                |m: &TrackingType| { &m.name },
                |m: &mut TrackingType| { &mut m.name },
            ));
            oneofs.push(tracking_type::Type::generated_oneof_descriptor_data());
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TrackingType>(
                "CardinalityTrackerConfig.TrackingType",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for TrackingType {
        const NAME: &'static str = "TrackingType";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.type_ = ::std::option::Option::Some(tracking_type::Type::Count(is.read_message()?));
                    },
                    18 => {
                        self.type_ = ::std::option::Option::Some(tracking_type::Type::TopK(is.read_message()?));
                    },
                    26 => {
                        self.name = is.read_tokio_chars()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.name.is_empty() {
                my_size += ::protobuf::rt::string_size(3, &self.name);
            }
            if let ::std::option::Option::Some(ref v) = self.type_ {
                match v {
                    &tracking_type::Type::Count(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &tracking_type::Type::TopK(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.name.is_empty() {
                os.write_string(3, &self.name)?;
            }
            if let ::std::option::Option::Some(ref v) = self.type_ {
                match v {
                    &tracking_type::Type::Count(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                    },
                    &tracking_type::Type::TopK(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> TrackingType {
            TrackingType::new()
        }

        fn clear(&mut self) {
            self.type_ = ::std::option::Option::None;
            self.type_ = ::std::option::Option::None;
            self.name.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static TrackingType {
            static instance: TrackingType = TrackingType {
                name: ::protobuf::Chars::new(),
                type_: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for TrackingType {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CardinalityTrackerConfig.TrackingType").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for TrackingType {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for TrackingType {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `TrackingType`
    pub mod tracking_type {

        #[derive(Clone,PartialEq,Debug)]
        // @@protoc_insertion_point(oneof:pulse.config.processor.v1.CardinalityTrackerConfig.TrackingType.type)
        pub enum Type {
            // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.CardinalityTrackerConfig.TrackingType.count)
            Count(super::Count),
            // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.CardinalityTrackerConfig.TrackingType.top_k)
            TopK(super::TopK),
        }

        impl ::protobuf::Oneof for Type {
        }

        impl ::protobuf::OneofFull for Type {
            fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| <super::TrackingType as ::protobuf::MessageFull>::descriptor().oneof_by_name("type").unwrap()).clone()
            }
        }

        impl Type {
            pub(in super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Type>("type")
            }
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n3pulse/config/processor/v1/cardinality_tracker.proto\x12\x19pulse.conf\
    ig.processor.v1\x1a\x1egoogle/protobuf/duration.proto\x1a\x17validate/va\
    lidate.proto\"\xb4\x05\n\x18CardinalityTrackerConfig\x12g\n\x0etracking_\
    types\x18\x01\x20\x03(\x0b2@.pulse.config.processor.v1.CardinalityTracke\
    rConfig.TrackingTypeR\rtrackingTypes\x12F\n\x0crotate_after\x18\x02\x20\
    \x01(\x0b2\x19.google.protobuf.DurationR\x0brotateAfterB\x08\xfaB\x05\
    \xaa\x01\x02*\0\x1a/\n\x05Count\x12&\n\nname_regex\x18\x01\x20\x01(\tR\t\
    nameRegexB\x07\xfaB\x04r\x02\x10\x01\x1a\xd6\x01\n\x04TopK\x12\x1f\n\nna\
    me_regex\x18\x01\x20\x01(\tH\0R\tnameRegex\x12_\n\ttag_names\x18\x02\x20\
    \x01(\x0b2@.pulse.config.processor.v1.CardinalityTrackerConfig.TopK.TagL\
    istH\0R\x08tagNames\x12\x1c\n\x05top_k\x18\x03\x20\x01(\rR\x04topKB\x07\
    \xfaB\x04*\x02\x20\0\x1a\x1d\n\x07TagList\x12\x12\n\x04tags\x18\x01\x20\
    \x03(\tR\x04tagsB\x0f\n\x08group_by\x12\x03\xf8B\x01\x1a\xdc\x01\n\x0cTr\
    ackingType\x12Q\n\x05count\x18\x01\x20\x01(\x0b29.pulse.config.processor\
    .v1.CardinalityTrackerConfig.CountH\0R\x05count\x12O\n\x05top_k\x18\x02\
    \x20\x01(\x0b28.pulse.config.processor.v1.CardinalityTrackerConfig.TopKH\
    \0R\x04topK\x12\x1b\n\x04name\x18\x03\x20\x01(\tR\x04nameB\x07\xfaB\x04r\
    \x02\x10\x01B\x0b\n\x04type\x12\x03\xf8B\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(::protobuf::well_known_types::duration::file_descriptor().clone());
            deps.push(super::validate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(CardinalityTrackerConfig::generated_message_descriptor_data());
            messages.push(cardinality_tracker_config::Count::generated_message_descriptor_data());
            messages.push(cardinality_tracker_config::TopK::generated_message_descriptor_data());
            messages.push(cardinality_tracker_config::TrackingType::generated_message_descriptor_data());
            messages.push(cardinality_tracker_config::top_k::TagList::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
