// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 32.0
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `pulse/config/processor/v1/drop.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:pulse.config.processor.v1.DropRule)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DropRule {
    // message fields
    // @@protoc_insertion_point(field:pulse.config.processor.v1.DropRule.name)
    pub name: ::protobuf::Chars,
    // @@protoc_insertion_point(field:pulse.config.processor.v1.DropRule.mode)
    pub mode: ::protobuf::EnumOrUnknown<drop_rule::DropMode>,
    // @@protoc_insertion_point(field:pulse.config.processor.v1.DropRule.conditions)
    pub conditions: ::std::vec::Vec<drop_rule::DropCondition>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.processor.v1.DropRule.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DropRule {
    fn default() -> &'a DropRule {
        <DropRule as ::protobuf::Message>::default_instance()
    }
}

impl DropRule {
    pub fn new() -> DropRule {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &DropRule| { &m.name },
            |m: &mut DropRule| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mode",
            |m: &DropRule| { &m.mode },
            |m: &mut DropRule| { &mut m.mode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "conditions",
            |m: &DropRule| { &m.conditions },
            |m: &mut DropRule| { &mut m.conditions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DropRule>(
            "DropRule",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DropRule {
    const NAME: &'static str = "DropRule";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_tokio_chars()?;
                },
                16 => {
                    self.mode = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.conditions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.mode != ::protobuf::EnumOrUnknown::new(drop_rule::DropMode::ENABLED) {
            my_size += ::protobuf::rt::int32_size(2, self.mode.value());
        }
        for value in &self.conditions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.mode != ::protobuf::EnumOrUnknown::new(drop_rule::DropMode::ENABLED) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.mode))?;
        }
        for v in &self.conditions {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DropRule {
        DropRule::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.mode = ::protobuf::EnumOrUnknown::new(drop_rule::DropMode::ENABLED);
        self.conditions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DropRule {
        static instance: DropRule = DropRule {
            name: ::protobuf::Chars::new(),
            mode: ::protobuf::EnumOrUnknown::from_i32(0),
            conditions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DropRule {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DropRule").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DropRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DropRule {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `DropRule`
pub mod drop_rule {
    // @@protoc_insertion_point(message:pulse.config.processor.v1.DropRule.AndMatch)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct AndMatch {
        // message fields
        // @@protoc_insertion_point(field:pulse.config.processor.v1.DropRule.AndMatch.conditions)
        pub conditions: ::std::vec::Vec<DropCondition>,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.processor.v1.DropRule.AndMatch.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a AndMatch {
        fn default() -> &'a AndMatch {
            <AndMatch as ::protobuf::Message>::default_instance()
        }
    }

    impl AndMatch {
        pub fn new() -> AndMatch {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "conditions",
                |m: &AndMatch| { &m.conditions },
                |m: &mut AndMatch| { &mut m.conditions },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AndMatch>(
                "DropRule.AndMatch",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for AndMatch {
        const NAME: &'static str = "AndMatch";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.conditions.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for value in &self.conditions {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.conditions {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> AndMatch {
            AndMatch::new()
        }

        fn clear(&mut self) {
            self.conditions.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static AndMatch {
            static instance: AndMatch = AndMatch {
                conditions: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for AndMatch {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("DropRule.AndMatch").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for AndMatch {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for AndMatch {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:pulse.config.processor.v1.DropRule.StringMatch)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct StringMatch {
        // message oneof groups
        pub string_match_type: ::std::option::Option<string_match::String_match_type>,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.processor.v1.DropRule.StringMatch.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a StringMatch {
        fn default() -> &'a StringMatch {
            <StringMatch as ::protobuf::Message>::default_instance()
        }
    }

    impl StringMatch {
        pub fn new() -> StringMatch {
            ::std::default::Default::default()
        }

        // string exact = 1;

        pub fn exact(&self) -> &str {
            match self.string_match_type {
                ::std::option::Option::Some(string_match::String_match_type::Exact(ref v)) => v,
                _ => "",
            }
        }

        pub fn clear_exact(&mut self) {
            self.string_match_type = ::std::option::Option::None;
        }

        pub fn has_exact(&self) -> bool {
            match self.string_match_type {
                ::std::option::Option::Some(string_match::String_match_type::Exact(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_exact(&mut self, v: ::protobuf::Chars) {
            self.string_match_type = ::std::option::Option::Some(string_match::String_match_type::Exact(v))
        }

        // Mutable pointer to the field.
        pub fn mut_exact(&mut self) -> &mut ::protobuf::Chars {
            if let ::std::option::Option::Some(string_match::String_match_type::Exact(_)) = self.string_match_type {
            } else {
                self.string_match_type = ::std::option::Option::Some(string_match::String_match_type::Exact(::protobuf::Chars::new()));
            }
            match self.string_match_type {
                ::std::option::Option::Some(string_match::String_match_type::Exact(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_exact(&mut self) -> ::protobuf::Chars {
            if self.has_exact() {
                match self.string_match_type.take() {
                    ::std::option::Option::Some(string_match::String_match_type::Exact(v)) => v,
                    _ => panic!(),
                }
            } else {
                ::protobuf::Chars::new()
            }
        }

        // string regex = 2;

        pub fn regex(&self) -> &str {
            match self.string_match_type {
                ::std::option::Option::Some(string_match::String_match_type::Regex(ref v)) => v,
                _ => "",
            }
        }

        pub fn clear_regex(&mut self) {
            self.string_match_type = ::std::option::Option::None;
        }

        pub fn has_regex(&self) -> bool {
            match self.string_match_type {
                ::std::option::Option::Some(string_match::String_match_type::Regex(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_regex(&mut self, v: ::protobuf::Chars) {
            self.string_match_type = ::std::option::Option::Some(string_match::String_match_type::Regex(v))
        }

        // Mutable pointer to the field.
        pub fn mut_regex(&mut self) -> &mut ::protobuf::Chars {
            if let ::std::option::Option::Some(string_match::String_match_type::Regex(_)) = self.string_match_type {
            } else {
                self.string_match_type = ::std::option::Option::Some(string_match::String_match_type::Regex(::protobuf::Chars::new()));
            }
            match self.string_match_type {
                ::std::option::Option::Some(string_match::String_match_type::Regex(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_regex(&mut self) -> ::protobuf::Chars {
            if self.has_regex() {
                match self.string_match_type.take() {
                    ::std::option::Option::Some(string_match::String_match_type::Regex(v)) => v,
                    _ => panic!(),
                }
            } else {
                ::protobuf::Chars::new()
            }
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(1);
            fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
                "exact",
                StringMatch::has_exact,
                StringMatch::exact,
                StringMatch::set_exact,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
                "regex",
                StringMatch::has_regex,
                StringMatch::regex,
                StringMatch::set_regex,
            ));
            oneofs.push(string_match::String_match_type::generated_oneof_descriptor_data());
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StringMatch>(
                "DropRule.StringMatch",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for StringMatch {
        const NAME: &'static str = "StringMatch";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.string_match_type = ::std::option::Option::Some(string_match::String_match_type::Exact(is.read_tokio_chars()?));
                    },
                    18 => {
                        self.string_match_type = ::std::option::Option::Some(string_match::String_match_type::Regex(is.read_tokio_chars()?));
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let ::std::option::Option::Some(ref v) = self.string_match_type {
                match v {
                    &string_match::String_match_type::Exact(ref v) => {
                        my_size += ::protobuf::rt::string_size(1, &v);
                    },
                    &string_match::String_match_type::Regex(ref v) => {
                        my_size += ::protobuf::rt::string_size(2, &v);
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let ::std::option::Option::Some(ref v) = self.string_match_type {
                match v {
                    &string_match::String_match_type::Exact(ref v) => {
                        os.write_string(1, v)?;
                    },
                    &string_match::String_match_type::Regex(ref v) => {
                        os.write_string(2, v)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> StringMatch {
            StringMatch::new()
        }

        fn clear(&mut self) {
            self.string_match_type = ::std::option::Option::None;
            self.string_match_type = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static StringMatch {
            static instance: StringMatch = StringMatch {
                string_match_type: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for StringMatch {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("DropRule.StringMatch").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for StringMatch {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for StringMatch {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `StringMatch`
    pub mod string_match {

        #[derive(Clone,PartialEq,Debug)]
        // @@protoc_insertion_point(oneof:pulse.config.processor.v1.DropRule.StringMatch.string_match_type)
        pub enum String_match_type {
            // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.DropRule.StringMatch.exact)
            Exact(::protobuf::Chars),
            // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.DropRule.StringMatch.regex)
            Regex(::protobuf::Chars),
        }

        impl ::protobuf::Oneof for String_match_type {
        }

        impl ::protobuf::OneofFull for String_match_type {
            fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| <super::StringMatch as ::protobuf::MessageFull>::descriptor().oneof_by_name("string_match_type").unwrap()).clone()
            }
        }

        impl String_match_type {
            pub(in super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                ::protobuf::reflect::GeneratedOneofDescriptorData::new::<String_match_type>("string_match_type")
            }
        }
    }

    // @@protoc_insertion_point(message:pulse.config.processor.v1.DropRule.TagMatch)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct TagMatch {
        // message fields
        // @@protoc_insertion_point(field:pulse.config.processor.v1.DropRule.TagMatch.tag_name)
        pub tag_name: ::protobuf::Chars,
        // @@protoc_insertion_point(field:pulse.config.processor.v1.DropRule.TagMatch.tag_value)
        pub tag_value: ::protobuf::MessageField<StringMatch>,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.processor.v1.DropRule.TagMatch.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a TagMatch {
        fn default() -> &'a TagMatch {
            <TagMatch as ::protobuf::Message>::default_instance()
        }
    }

    impl TagMatch {
        pub fn new() -> TagMatch {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "tag_name",
                |m: &TagMatch| { &m.tag_name },
                |m: &mut TagMatch| { &mut m.tag_name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StringMatch>(
                "tag_value",
                |m: &TagMatch| { &m.tag_value },
                |m: &mut TagMatch| { &mut m.tag_value },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TagMatch>(
                "DropRule.TagMatch",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for TagMatch {
        const NAME: &'static str = "TagMatch";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.tag_name = is.read_tokio_chars()?;
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.tag_value)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.tag_name.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.tag_name);
            }
            if let Some(v) = self.tag_value.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.tag_name.is_empty() {
                os.write_string(1, &self.tag_name)?;
            }
            if let Some(v) = self.tag_value.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> TagMatch {
            TagMatch::new()
        }

        fn clear(&mut self) {
            self.tag_name.clear();
            self.tag_value.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static TagMatch {
            static instance: TagMatch = TagMatch {
                tag_name: ::protobuf::Chars::new(),
                tag_value: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for TagMatch {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("DropRule.TagMatch").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for TagMatch {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for TagMatch {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:pulse.config.processor.v1.DropRule.SimpleValueMatch)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct SimpleValueMatch {
        // message fields
        // @@protoc_insertion_point(field:pulse.config.processor.v1.DropRule.SimpleValueMatch.target)
        pub target: f64,
        // @@protoc_insertion_point(field:pulse.config.processor.v1.DropRule.SimpleValueMatch.operator)
        pub operator: ::protobuf::EnumOrUnknown<ValueMatchOperator>,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.processor.v1.DropRule.SimpleValueMatch.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a SimpleValueMatch {
        fn default() -> &'a SimpleValueMatch {
            <SimpleValueMatch as ::protobuf::Message>::default_instance()
        }
    }

    impl SimpleValueMatch {
        pub fn new() -> SimpleValueMatch {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "target",
                |m: &SimpleValueMatch| { &m.target },
                |m: &mut SimpleValueMatch| { &mut m.target },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "operator",
                |m: &SimpleValueMatch| { &m.operator },
                |m: &mut SimpleValueMatch| { &mut m.operator },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SimpleValueMatch>(
                "DropRule.SimpleValueMatch",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for SimpleValueMatch {
        const NAME: &'static str = "SimpleValueMatch";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.target = is.read_double()?;
                    },
                    16 => {
                        self.operator = is.read_enum_or_unknown()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.target != 0. {
                my_size += 1 + 8;
            }
            if self.operator != ::protobuf::EnumOrUnknown::new(ValueMatchOperator::EQUAL) {
                my_size += ::protobuf::rt::int32_size(2, self.operator.value());
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.target != 0. {
                os.write_double(1, self.target)?;
            }
            if self.operator != ::protobuf::EnumOrUnknown::new(ValueMatchOperator::EQUAL) {
                os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.operator))?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> SimpleValueMatch {
            SimpleValueMatch::new()
        }

        fn clear(&mut self) {
            self.target = 0.;
            self.operator = ::protobuf::EnumOrUnknown::new(ValueMatchOperator::EQUAL);
            self.special_fields.clear();
        }

        fn default_instance() -> &'static SimpleValueMatch {
            static instance: SimpleValueMatch = SimpleValueMatch {
                target: 0.,
                operator: ::protobuf::EnumOrUnknown::from_i32(0),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for SimpleValueMatch {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("DropRule.SimpleValueMatch").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for SimpleValueMatch {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for SimpleValueMatch {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:pulse.config.processor.v1.DropRule.ValueMatch)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ValueMatch {
        // message oneof groups
        pub value_match_type: ::std::option::Option<value_match::Value_match_type>,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.processor.v1.DropRule.ValueMatch.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ValueMatch {
        fn default() -> &'a ValueMatch {
            <ValueMatch as ::protobuf::Message>::default_instance()
        }
    }

    impl ValueMatch {
        pub fn new() -> ValueMatch {
            ::std::default::Default::default()
        }

        // .pulse.config.processor.v1.DropRule.SimpleValueMatch simple_value = 1;

        pub fn simple_value(&self) -> &SimpleValueMatch {
            match self.value_match_type {
                ::std::option::Option::Some(value_match::Value_match_type::SimpleValue(ref v)) => v,
                _ => <SimpleValueMatch as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_simple_value(&mut self) {
            self.value_match_type = ::std::option::Option::None;
        }

        pub fn has_simple_value(&self) -> bool {
            match self.value_match_type {
                ::std::option::Option::Some(value_match::Value_match_type::SimpleValue(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_simple_value(&mut self, v: SimpleValueMatch) {
            self.value_match_type = ::std::option::Option::Some(value_match::Value_match_type::SimpleValue(v))
        }

        // Mutable pointer to the field.
        pub fn mut_simple_value(&mut self) -> &mut SimpleValueMatch {
            if let ::std::option::Option::Some(value_match::Value_match_type::SimpleValue(_)) = self.value_match_type {
            } else {
                self.value_match_type = ::std::option::Option::Some(value_match::Value_match_type::SimpleValue(SimpleValueMatch::new()));
            }
            match self.value_match_type {
                ::std::option::Option::Some(value_match::Value_match_type::SimpleValue(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_simple_value(&mut self) -> SimpleValueMatch {
            if self.has_simple_value() {
                match self.value_match_type.take() {
                    ::std::option::Option::Some(value_match::Value_match_type::SimpleValue(v)) => v,
                    _ => panic!(),
                }
            } else {
                SimpleValueMatch::new()
            }
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(1);
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SimpleValueMatch>(
                "simple_value",
                ValueMatch::has_simple_value,
                ValueMatch::simple_value,
                ValueMatch::mut_simple_value,
                ValueMatch::set_simple_value,
            ));
            oneofs.push(value_match::Value_match_type::generated_oneof_descriptor_data());
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ValueMatch>(
                "DropRule.ValueMatch",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ValueMatch {
        const NAME: &'static str = "ValueMatch";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.value_match_type = ::std::option::Option::Some(value_match::Value_match_type::SimpleValue(is.read_message()?));
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let ::std::option::Option::Some(ref v) = self.value_match_type {
                match v {
                    &value_match::Value_match_type::SimpleValue(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let ::std::option::Option::Some(ref v) = self.value_match_type {
                match v {
                    &value_match::Value_match_type::SimpleValue(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ValueMatch {
            ValueMatch::new()
        }

        fn clear(&mut self) {
            self.value_match_type = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ValueMatch {
            static instance: ValueMatch = ValueMatch {
                value_match_type: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ValueMatch {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("DropRule.ValueMatch").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ValueMatch {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ValueMatch {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `ValueMatch`
    pub mod value_match {

        #[derive(Clone,PartialEq,Debug)]
        // @@protoc_insertion_point(oneof:pulse.config.processor.v1.DropRule.ValueMatch.value_match_type)
        pub enum Value_match_type {
            // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.DropRule.ValueMatch.simple_value)
            SimpleValue(super::SimpleValueMatch),
        }

        impl ::protobuf::Oneof for Value_match_type {
        }

        impl ::protobuf::OneofFull for Value_match_type {
            fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| <super::ValueMatch as ::protobuf::MessageFull>::descriptor().oneof_by_name("value_match_type").unwrap()).clone()
            }
        }

        impl Value_match_type {
            pub(in super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Value_match_type>("value_match_type")
            }
        }
    }

    // @@protoc_insertion_point(message:pulse.config.processor.v1.DropRule.DropCondition)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct DropCondition {
        // message oneof groups
        pub condition_type: ::std::option::Option<drop_condition::Condition_type>,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.processor.v1.DropRule.DropCondition.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a DropCondition {
        fn default() -> &'a DropCondition {
            <DropCondition as ::protobuf::Message>::default_instance()
        }
    }

    impl DropCondition {
        pub fn new() -> DropCondition {
            ::std::default::Default::default()
        }

        // .pulse.config.processor.v1.DropRule.StringMatch metric_name = 1;

        pub fn metric_name(&self) -> &StringMatch {
            match self.condition_type {
                ::std::option::Option::Some(drop_condition::Condition_type::MetricName(ref v)) => v,
                _ => <StringMatch as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_metric_name(&mut self) {
            self.condition_type = ::std::option::Option::None;
        }

        pub fn has_metric_name(&self) -> bool {
            match self.condition_type {
                ::std::option::Option::Some(drop_condition::Condition_type::MetricName(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_metric_name(&mut self, v: StringMatch) {
            self.condition_type = ::std::option::Option::Some(drop_condition::Condition_type::MetricName(v))
        }

        // Mutable pointer to the field.
        pub fn mut_metric_name(&mut self) -> &mut StringMatch {
            if let ::std::option::Option::Some(drop_condition::Condition_type::MetricName(_)) = self.condition_type {
            } else {
                self.condition_type = ::std::option::Option::Some(drop_condition::Condition_type::MetricName(StringMatch::new()));
            }
            match self.condition_type {
                ::std::option::Option::Some(drop_condition::Condition_type::MetricName(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_metric_name(&mut self) -> StringMatch {
            if self.has_metric_name() {
                match self.condition_type.take() {
                    ::std::option::Option::Some(drop_condition::Condition_type::MetricName(v)) => v,
                    _ => panic!(),
                }
            } else {
                StringMatch::new()
            }
        }

        // .pulse.config.processor.v1.DropRule.TagMatch tag_match = 2;

        pub fn tag_match(&self) -> &TagMatch {
            match self.condition_type {
                ::std::option::Option::Some(drop_condition::Condition_type::TagMatch(ref v)) => v,
                _ => <TagMatch as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_tag_match(&mut self) {
            self.condition_type = ::std::option::Option::None;
        }

        pub fn has_tag_match(&self) -> bool {
            match self.condition_type {
                ::std::option::Option::Some(drop_condition::Condition_type::TagMatch(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_tag_match(&mut self, v: TagMatch) {
            self.condition_type = ::std::option::Option::Some(drop_condition::Condition_type::TagMatch(v))
        }

        // Mutable pointer to the field.
        pub fn mut_tag_match(&mut self) -> &mut TagMatch {
            if let ::std::option::Option::Some(drop_condition::Condition_type::TagMatch(_)) = self.condition_type {
            } else {
                self.condition_type = ::std::option::Option::Some(drop_condition::Condition_type::TagMatch(TagMatch::new()));
            }
            match self.condition_type {
                ::std::option::Option::Some(drop_condition::Condition_type::TagMatch(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_tag_match(&mut self) -> TagMatch {
            if self.has_tag_match() {
                match self.condition_type.take() {
                    ::std::option::Option::Some(drop_condition::Condition_type::TagMatch(v)) => v,
                    _ => panic!(),
                }
            } else {
                TagMatch::new()
            }
        }

        // .pulse.config.processor.v1.DropRule.ValueMatch value_match = 3;

        pub fn value_match(&self) -> &ValueMatch {
            match self.condition_type {
                ::std::option::Option::Some(drop_condition::Condition_type::ValueMatch(ref v)) => v,
                _ => <ValueMatch as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_value_match(&mut self) {
            self.condition_type = ::std::option::Option::None;
        }

        pub fn has_value_match(&self) -> bool {
            match self.condition_type {
                ::std::option::Option::Some(drop_condition::Condition_type::ValueMatch(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_value_match(&mut self, v: ValueMatch) {
            self.condition_type = ::std::option::Option::Some(drop_condition::Condition_type::ValueMatch(v))
        }

        // Mutable pointer to the field.
        pub fn mut_value_match(&mut self) -> &mut ValueMatch {
            if let ::std::option::Option::Some(drop_condition::Condition_type::ValueMatch(_)) = self.condition_type {
            } else {
                self.condition_type = ::std::option::Option::Some(drop_condition::Condition_type::ValueMatch(ValueMatch::new()));
            }
            match self.condition_type {
                ::std::option::Option::Some(drop_condition::Condition_type::ValueMatch(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_value_match(&mut self) -> ValueMatch {
            if self.has_value_match() {
                match self.condition_type.take() {
                    ::std::option::Option::Some(drop_condition::Condition_type::ValueMatch(v)) => v,
                    _ => panic!(),
                }
            } else {
                ValueMatch::new()
            }
        }

        // .pulse.config.processor.v1.DropRule.AndMatch and_match = 4;

        pub fn and_match(&self) -> &AndMatch {
            match self.condition_type {
                ::std::option::Option::Some(drop_condition::Condition_type::AndMatch(ref v)) => v,
                _ => <AndMatch as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_and_match(&mut self) {
            self.condition_type = ::std::option::Option::None;
        }

        pub fn has_and_match(&self) -> bool {
            match self.condition_type {
                ::std::option::Option::Some(drop_condition::Condition_type::AndMatch(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_and_match(&mut self, v: AndMatch) {
            self.condition_type = ::std::option::Option::Some(drop_condition::Condition_type::AndMatch(v))
        }

        // Mutable pointer to the field.
        pub fn mut_and_match(&mut self) -> &mut AndMatch {
            if let ::std::option::Option::Some(drop_condition::Condition_type::AndMatch(_)) = self.condition_type {
            } else {
                self.condition_type = ::std::option::Option::Some(drop_condition::Condition_type::AndMatch(AndMatch::new()));
            }
            match self.condition_type {
                ::std::option::Option::Some(drop_condition::Condition_type::AndMatch(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_and_match(&mut self) -> AndMatch {
            if self.has_and_match() {
                match self.condition_type.take() {
                    ::std::option::Option::Some(drop_condition::Condition_type::AndMatch(v)) => v,
                    _ => panic!(),
                }
            } else {
                AndMatch::new()
            }
        }

        // .pulse.config.processor.v1.DropRule.DropCondition not_match = 5;

        pub fn not_match(&self) -> &DropCondition {
            match self.condition_type {
                ::std::option::Option::Some(drop_condition::Condition_type::NotMatch(ref v)) => v,
                _ => <DropCondition as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_not_match(&mut self) {
            self.condition_type = ::std::option::Option::None;
        }

        pub fn has_not_match(&self) -> bool {
            match self.condition_type {
                ::std::option::Option::Some(drop_condition::Condition_type::NotMatch(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_not_match(&mut self, v: DropCondition) {
            self.condition_type = ::std::option::Option::Some(drop_condition::Condition_type::NotMatch(::std::boxed::Box::new(v)))
        }

        // Mutable pointer to the field.
        pub fn mut_not_match(&mut self) -> &mut DropCondition {
            if let ::std::option::Option::Some(drop_condition::Condition_type::NotMatch(_)) = self.condition_type {
            } else {
                self.condition_type = ::std::option::Option::Some(drop_condition::Condition_type::NotMatch(::std::boxed::Box::new(DropCondition::new())));
            }
            match self.condition_type {
                ::std::option::Option::Some(drop_condition::Condition_type::NotMatch(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_not_match(&mut self) -> DropCondition {
            if self.has_not_match() {
                match self.condition_type.take() {
                    ::std::option::Option::Some(drop_condition::Condition_type::NotMatch(v)) => *v,
                    _ => panic!(),
                }
            } else {
                DropCondition::new()
            }
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(1);
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, StringMatch>(
                "metric_name",
                DropCondition::has_metric_name,
                DropCondition::metric_name,
                DropCondition::mut_metric_name,
                DropCondition::set_metric_name,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, TagMatch>(
                "tag_match",
                DropCondition::has_tag_match,
                DropCondition::tag_match,
                DropCondition::mut_tag_match,
                DropCondition::set_tag_match,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ValueMatch>(
                "value_match",
                DropCondition::has_value_match,
                DropCondition::value_match,
                DropCondition::mut_value_match,
                DropCondition::set_value_match,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, AndMatch>(
                "and_match",
                DropCondition::has_and_match,
                DropCondition::and_match,
                DropCondition::mut_and_match,
                DropCondition::set_and_match,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, DropCondition>(
                "not_match",
                DropCondition::has_not_match,
                DropCondition::not_match,
                DropCondition::mut_not_match,
                DropCondition::set_not_match,
            ));
            oneofs.push(drop_condition::Condition_type::generated_oneof_descriptor_data());
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DropCondition>(
                "DropRule.DropCondition",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for DropCondition {
        const NAME: &'static str = "DropCondition";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.condition_type = ::std::option::Option::Some(drop_condition::Condition_type::MetricName(is.read_message()?));
                    },
                    18 => {
                        self.condition_type = ::std::option::Option::Some(drop_condition::Condition_type::TagMatch(is.read_message()?));
                    },
                    26 => {
                        self.condition_type = ::std::option::Option::Some(drop_condition::Condition_type::ValueMatch(is.read_message()?));
                    },
                    34 => {
                        self.condition_type = ::std::option::Option::Some(drop_condition::Condition_type::AndMatch(is.read_message()?));
                    },
                    42 => {
                        self.condition_type = ::std::option::Option::Some(drop_condition::Condition_type::NotMatch(::std::boxed::Box::new(is.read_message()?)));
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let ::std::option::Option::Some(ref v) = self.condition_type {
                match v {
                    &drop_condition::Condition_type::MetricName(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &drop_condition::Condition_type::TagMatch(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &drop_condition::Condition_type::ValueMatch(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &drop_condition::Condition_type::AndMatch(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &drop_condition::Condition_type::NotMatch(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let ::std::option::Option::Some(ref v) = self.condition_type {
                match v {
                    &drop_condition::Condition_type::MetricName(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                    },
                    &drop_condition::Condition_type::TagMatch(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                    },
                    &drop_condition::Condition_type::ValueMatch(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                    },
                    &drop_condition::Condition_type::AndMatch(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                    },
                    &drop_condition::Condition_type::NotMatch(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(5, &**v, os)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> DropCondition {
            DropCondition::new()
        }

        fn clear(&mut self) {
            self.condition_type = ::std::option::Option::None;
            self.condition_type = ::std::option::Option::None;
            self.condition_type = ::std::option::Option::None;
            self.condition_type = ::std::option::Option::None;
            self.condition_type = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static DropCondition {
            static instance: DropCondition = DropCondition {
                condition_type: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for DropCondition {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("DropRule.DropCondition").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for DropCondition {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for DropCondition {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `DropCondition`
    pub mod drop_condition {

        #[derive(Clone,PartialEq,Debug)]
        // @@protoc_insertion_point(oneof:pulse.config.processor.v1.DropRule.DropCondition.condition_type)
        pub enum Condition_type {
            // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.DropRule.DropCondition.metric_name)
            MetricName(super::StringMatch),
            // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.DropRule.DropCondition.tag_match)
            TagMatch(super::TagMatch),
            // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.DropRule.DropCondition.value_match)
            ValueMatch(super::ValueMatch),
            // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.DropRule.DropCondition.and_match)
            AndMatch(super::AndMatch),
            // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.DropRule.DropCondition.not_match)
            NotMatch(::std::boxed::Box<super::DropCondition>),
        }

        impl ::protobuf::Oneof for Condition_type {
        }

        impl ::protobuf::OneofFull for Condition_type {
            fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| <super::DropCondition as ::protobuf::MessageFull>::descriptor().oneof_by_name("condition_type").unwrap()).clone()
            }
        }

        impl Condition_type {
            pub(in super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Condition_type>("condition_type")
            }
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:pulse.config.processor.v1.DropRule.ValueMatchOperator)
    pub enum ValueMatchOperator {
        // @@protoc_insertion_point(enum_value:pulse.config.processor.v1.DropRule.ValueMatchOperator.EQUAL)
        EQUAL = 0,
        // @@protoc_insertion_point(enum_value:pulse.config.processor.v1.DropRule.ValueMatchOperator.NOT_EQUAL)
        NOT_EQUAL = 1,
        // @@protoc_insertion_point(enum_value:pulse.config.processor.v1.DropRule.ValueMatchOperator.GREATER)
        GREATER = 2,
        // @@protoc_insertion_point(enum_value:pulse.config.processor.v1.DropRule.ValueMatchOperator.LESS)
        LESS = 3,
        // @@protoc_insertion_point(enum_value:pulse.config.processor.v1.DropRule.ValueMatchOperator.GREATER_OR_EQUAL)
        GREATER_OR_EQUAL = 4,
        // @@protoc_insertion_point(enum_value:pulse.config.processor.v1.DropRule.ValueMatchOperator.LESS_OR_EQUAL)
        LESS_OR_EQUAL = 5,
    }

    impl ::protobuf::Enum for ValueMatchOperator {
        const NAME: &'static str = "ValueMatchOperator";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ValueMatchOperator> {
            match value {
                0 => ::std::option::Option::Some(ValueMatchOperator::EQUAL),
                1 => ::std::option::Option::Some(ValueMatchOperator::NOT_EQUAL),
                2 => ::std::option::Option::Some(ValueMatchOperator::GREATER),
                3 => ::std::option::Option::Some(ValueMatchOperator::LESS),
                4 => ::std::option::Option::Some(ValueMatchOperator::GREATER_OR_EQUAL),
                5 => ::std::option::Option::Some(ValueMatchOperator::LESS_OR_EQUAL),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<ValueMatchOperator> {
            match str {
                "EQUAL" => ::std::option::Option::Some(ValueMatchOperator::EQUAL),
                "NOT_EQUAL" => ::std::option::Option::Some(ValueMatchOperator::NOT_EQUAL),
                "GREATER" => ::std::option::Option::Some(ValueMatchOperator::GREATER),
                "LESS" => ::std::option::Option::Some(ValueMatchOperator::LESS),
                "GREATER_OR_EQUAL" => ::std::option::Option::Some(ValueMatchOperator::GREATER_OR_EQUAL),
                "LESS_OR_EQUAL" => ::std::option::Option::Some(ValueMatchOperator::LESS_OR_EQUAL),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ValueMatchOperator] = &[
            ValueMatchOperator::EQUAL,
            ValueMatchOperator::NOT_EQUAL,
            ValueMatchOperator::GREATER,
            ValueMatchOperator::LESS,
            ValueMatchOperator::GREATER_OR_EQUAL,
            ValueMatchOperator::LESS_OR_EQUAL,
        ];
    }

    impl ::protobuf::EnumFull for ValueMatchOperator {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("DropRule.ValueMatchOperator").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for ValueMatchOperator {
        fn default() -> Self {
            ValueMatchOperator::EQUAL
        }
    }

    impl ValueMatchOperator {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ValueMatchOperator>("DropRule.ValueMatchOperator")
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:pulse.config.processor.v1.DropRule.DropMode)
    pub enum DropMode {
        // @@protoc_insertion_point(enum_value:pulse.config.processor.v1.DropRule.DropMode.ENABLED)
        ENABLED = 0,
        // @@protoc_insertion_point(enum_value:pulse.config.processor.v1.DropRule.DropMode.TESTING)
        TESTING = 1,
    }

    impl ::protobuf::Enum for DropMode {
        const NAME: &'static str = "DropMode";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<DropMode> {
            match value {
                0 => ::std::option::Option::Some(DropMode::ENABLED),
                1 => ::std::option::Option::Some(DropMode::TESTING),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<DropMode> {
            match str {
                "ENABLED" => ::std::option::Option::Some(DropMode::ENABLED),
                "TESTING" => ::std::option::Option::Some(DropMode::TESTING),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [DropMode] = &[
            DropMode::ENABLED,
            DropMode::TESTING,
        ];
    }

    impl ::protobuf::EnumFull for DropMode {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("DropRule.DropMode").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for DropMode {
        fn default() -> Self {
            DropMode::ENABLED
        }
    }

    impl DropMode {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<DropMode>("DropRule.DropMode")
        }
    }
}

// @@protoc_insertion_point(message:pulse.config.processor.v1.DropConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DropConfig {
    // message fields
    // @@protoc_insertion_point(field:pulse.config.processor.v1.DropConfig.rules)
    pub rules: ::std::vec::Vec<DropRule>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.processor.v1.DropConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DropConfig {
    fn default() -> &'a DropConfig {
        <DropConfig as ::protobuf::Message>::default_instance()
    }
}

impl DropConfig {
    pub fn new() -> DropConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "rules",
            |m: &DropConfig| { &m.rules },
            |m: &mut DropConfig| { &mut m.rules },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DropConfig>(
            "DropConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DropConfig {
    const NAME: &'static str = "DropConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.rules.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.rules {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DropConfig {
        DropConfig::new()
    }

    fn clear(&mut self) {
        self.rules.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DropConfig {
        static instance: DropConfig = DropConfig {
            rules: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DropConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DropConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DropConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DropConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pulse.config.processor.v1.DropProcessorConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DropProcessorConfig {
    // message oneof groups
    pub config_source: ::std::option::Option<drop_processor_config::Config_source>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.processor.v1.DropProcessorConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DropProcessorConfig {
    fn default() -> &'a DropProcessorConfig {
        <DropProcessorConfig as ::protobuf::Message>::default_instance()
    }
}

impl DropProcessorConfig {
    pub fn new() -> DropProcessorConfig {
        ::std::default::Default::default()
    }

    // .pulse.config.common.v1.FileSourceConfig file_source = 1;

    pub fn file_source(&self) -> &super::file_watcher::FileSourceConfig {
        match self.config_source {
            ::std::option::Option::Some(drop_processor_config::Config_source::FileSource(ref v)) => v,
            _ => <super::file_watcher::FileSourceConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_file_source(&mut self) {
        self.config_source = ::std::option::Option::None;
    }

    pub fn has_file_source(&self) -> bool {
        match self.config_source {
            ::std::option::Option::Some(drop_processor_config::Config_source::FileSource(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_file_source(&mut self, v: super::file_watcher::FileSourceConfig) {
        self.config_source = ::std::option::Option::Some(drop_processor_config::Config_source::FileSource(v))
    }

    // Mutable pointer to the field.
    pub fn mut_file_source(&mut self) -> &mut super::file_watcher::FileSourceConfig {
        if let ::std::option::Option::Some(drop_processor_config::Config_source::FileSource(_)) = self.config_source {
        } else {
            self.config_source = ::std::option::Option::Some(drop_processor_config::Config_source::FileSource(super::file_watcher::FileSourceConfig::new()));
        }
        match self.config_source {
            ::std::option::Option::Some(drop_processor_config::Config_source::FileSource(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_file_source(&mut self) -> super::file_watcher::FileSourceConfig {
        if self.has_file_source() {
            match self.config_source.take() {
                ::std::option::Option::Some(drop_processor_config::Config_source::FileSource(v)) => v,
                _ => panic!(),
            }
        } else {
            super::file_watcher::FileSourceConfig::new()
        }
    }

    // .pulse.config.processor.v1.DropConfig inline = 2;

    pub fn inline(&self) -> &DropConfig {
        match self.config_source {
            ::std::option::Option::Some(drop_processor_config::Config_source::Inline(ref v)) => v,
            _ => <DropConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_inline(&mut self) {
        self.config_source = ::std::option::Option::None;
    }

    pub fn has_inline(&self) -> bool {
        match self.config_source {
            ::std::option::Option::Some(drop_processor_config::Config_source::Inline(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_inline(&mut self, v: DropConfig) {
        self.config_source = ::std::option::Option::Some(drop_processor_config::Config_source::Inline(v))
    }

    // Mutable pointer to the field.
    pub fn mut_inline(&mut self) -> &mut DropConfig {
        if let ::std::option::Option::Some(drop_processor_config::Config_source::Inline(_)) = self.config_source {
        } else {
            self.config_source = ::std::option::Option::Some(drop_processor_config::Config_source::Inline(DropConfig::new()));
        }
        match self.config_source {
            ::std::option::Option::Some(drop_processor_config::Config_source::Inline(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_inline(&mut self) -> DropConfig {
        if self.has_inline() {
            match self.config_source.take() {
                ::std::option::Option::Some(drop_processor_config::Config_source::Inline(v)) => v,
                _ => panic!(),
            }
        } else {
            DropConfig::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::file_watcher::FileSourceConfig>(
            "file_source",
            DropProcessorConfig::has_file_source,
            DropProcessorConfig::file_source,
            DropProcessorConfig::mut_file_source,
            DropProcessorConfig::set_file_source,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, DropConfig>(
            "inline",
            DropProcessorConfig::has_inline,
            DropProcessorConfig::inline,
            DropProcessorConfig::mut_inline,
            DropProcessorConfig::set_inline,
        ));
        oneofs.push(drop_processor_config::Config_source::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DropProcessorConfig>(
            "DropProcessorConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DropProcessorConfig {
    const NAME: &'static str = "DropProcessorConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.config_source = ::std::option::Option::Some(drop_processor_config::Config_source::FileSource(is.read_message()?));
                },
                18 => {
                    self.config_source = ::std::option::Option::Some(drop_processor_config::Config_source::Inline(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.config_source {
            match v {
                &drop_processor_config::Config_source::FileSource(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &drop_processor_config::Config_source::Inline(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.config_source {
            match v {
                &drop_processor_config::Config_source::FileSource(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &drop_processor_config::Config_source::Inline(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DropProcessorConfig {
        DropProcessorConfig::new()
    }

    fn clear(&mut self) {
        self.config_source = ::std::option::Option::None;
        self.config_source = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DropProcessorConfig {
        static instance: DropProcessorConfig = DropProcessorConfig {
            config_source: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DropProcessorConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DropProcessorConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DropProcessorConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DropProcessorConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `DropProcessorConfig`
pub mod drop_processor_config {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:pulse.config.processor.v1.DropProcessorConfig.config_source)
    pub enum Config_source {
        // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.DropProcessorConfig.file_source)
        FileSource(super::super::file_watcher::FileSourceConfig),
        // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.DropProcessorConfig.inline)
        Inline(super::DropConfig),
    }

    impl ::protobuf::Oneof for Config_source {
    }

    impl ::protobuf::OneofFull for Config_source {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::DropProcessorConfig as ::protobuf::MessageFull>::descriptor().oneof_by_name("config_source").unwrap()).clone()
        }
    }

    impl Config_source {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Config_source>("config_source")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$pulse/config/processor/v1/drop.proto\x12\x19pulse.config.processor.v1\
    \x1a)pulse/config/common/v1/file_watcher.proto\x1a\x17validate/validate.\
    proto\"\xd9\n\n\x08DropRule\x12\x1b\n\x04name\x18\x01\x20\x01(\tR\x04nam\
    eB\x07\xfaB\x04r\x02\x10\x01\x12@\n\x04mode\x18\x02\x20\x01(\x0e2,.pulse\
    .config.processor.v1.DropRule.DropModeR\x04mode\x12Q\n\nconditions\x18\
    \x03\x20\x03(\x0b21.pulse.config.processor.v1.DropRule.DropConditionR\nc\
    onditions\x1a]\n\x08AndMatch\x12Q\n\nconditions\x18\x01\x20\x03(\x0b21.p\
    ulse.config.processor.v1.DropRule.DropConditionR\nconditions\x1ai\n\x0bS\
    tringMatch\x12\x1f\n\x05exact\x18\x01\x20\x01(\tH\0R\x05exactB\x07\xfaB\
    \x04r\x02\x10\x01\x12\x1f\n\x05regex\x18\x02\x20\x01(\tH\0R\x05regexB\
    \x07\xfaB\x04r\x02\x10\x01B\x18\n\x11string_match_type\x12\x03\xf8B\x01\
    \x1a|\n\x08TagMatch\x12\"\n\x08tag_name\x18\x01\x20\x01(\tR\x07tagNameB\
    \x07\xfaB\x04r\x02\x10\x01\x12L\n\ttag_value\x18\x02\x20\x01(\x0b2/.puls\
    e.config.processor.v1.DropRule.StringMatchR\x08tagValue\x1a~\n\x10Simple\
    ValueMatch\x12\x16\n\x06target\x18\x01\x20\x01(\x01R\x06target\x12R\n\
    \x08operator\x18\x02\x20\x01(\x0e26.pulse.config.processor.v1.DropRule.V\
    alueMatchOperatorR\x08operator\x1a\x80\x01\n\nValueMatch\x12Y\n\x0csimpl\
    e_value\x18\x01\x20\x01(\x0b24.pulse.config.processor.v1.DropRule.Simple\
    ValueMatchH\0R\x0bsimpleValueB\x17\n\x10value_match_type\x12\x03\xf8B\
    \x01\x1a\xb9\x03\n\rDropCondition\x12R\n\x0bmetric_name\x18\x01\x20\x01(\
    \x0b2/.pulse.config.processor.v1.DropRule.StringMatchH\0R\nmetricName\
    \x12K\n\ttag_match\x18\x02\x20\x01(\x0b2,.pulse.config.processor.v1.Drop\
    Rule.TagMatchH\0R\x08tagMatch\x12Q\n\x0bvalue_match\x18\x03\x20\x01(\x0b\
    2..pulse.config.processor.v1.DropRule.ValueMatchH\0R\nvalueMatch\x12K\n\
    \tand_match\x18\x04\x20\x01(\x0b2,.pulse.config.processor.v1.DropRule.An\
    dMatchH\0R\x08andMatch\x12P\n\tnot_match\x18\x05\x20\x01(\x0b21.pulse.co\
    nfig.processor.v1.DropRule.DropConditionH\0R\x08notMatchB\x15\n\x0econdi\
    tion_type\x12\x03\xf8B\x01\"n\n\x12ValueMatchOperator\x12\t\n\x05EQUAL\
    \x10\0\x12\r\n\tNOT_EQUAL\x10\x01\x12\x0b\n\x07GREATER\x10\x02\x12\x08\n\
    \x04LESS\x10\x03\x12\x14\n\x10GREATER_OR_EQUAL\x10\x04\x12\x11\n\rLESS_O\
    R_EQUAL\x10\x05\"$\n\x08DropMode\x12\x0b\n\x07ENABLED\x10\0\x12\x0b\n\
    \x07TESTING\x10\x01\"G\n\nDropConfig\x129\n\x05rules\x18\x01\x20\x03(\
    \x0b2#.pulse.config.processor.v1.DropRuleR\x05rules\"\xb9\x01\n\x13DropP\
    rocessorConfig\x12K\n\x0bfile_source\x18\x01\x20\x01(\x0b2(.pulse.config\
    .common.v1.FileSourceConfigH\0R\nfileSource\x12?\n\x06inline\x18\x02\x20\
    \x01(\x0b2%.pulse.config.processor.v1.DropConfigH\0R\x06inlineB\x14\n\rc\
    onfig_source\x12\x03\xf8B\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::file_watcher::file_descriptor().clone());
            deps.push(super::validate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(9);
            messages.push(DropRule::generated_message_descriptor_data());
            messages.push(DropConfig::generated_message_descriptor_data());
            messages.push(DropProcessorConfig::generated_message_descriptor_data());
            messages.push(drop_rule::AndMatch::generated_message_descriptor_data());
            messages.push(drop_rule::StringMatch::generated_message_descriptor_data());
            messages.push(drop_rule::TagMatch::generated_message_descriptor_data());
            messages.push(drop_rule::SimpleValueMatch::generated_message_descriptor_data());
            messages.push(drop_rule::ValueMatch::generated_message_descriptor_data());
            messages.push(drop_rule::DropCondition::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(drop_rule::ValueMatchOperator::generated_enum_descriptor_data());
            enums.push(drop_rule::DropMode::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
