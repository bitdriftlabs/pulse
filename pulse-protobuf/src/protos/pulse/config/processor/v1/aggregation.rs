// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 29.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `pulse/config/processor/v1/aggregation.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:pulse.config.processor.v1.AggregationConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AggregationConfig {
    // message fields
    // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.counters)
    pub counters: ::protobuf::MessageField<aggregation_config::Counters>,
    // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.gauges)
    pub gauges: ::protobuf::MessageField<aggregation_config::Gauges>,
    // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.histograms)
    pub histograms: ::protobuf::MessageField<aggregation_config::Histograms>,
    // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.summaries)
    pub summaries: ::protobuf::MessageField<aggregation_config::Summaries>,
    // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.flush_interval)
    pub flush_interval: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.pin_flush_interval_to_wall_clock)
    pub pin_flush_interval_to_wall_clock: ::protobuf::MessageField<::protobuf::well_known_types::wrappers::BoolValue>,
    // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.enable_last_aggregation_admin_endpoint)
    pub enable_last_aggregation_admin_endpoint: bool,
    // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.post_flush_send_jitter)
    pub post_flush_send_jitter: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.emit_prometheus_stale_markers)
    pub emit_prometheus_stale_markers: bool,
    // message oneof groups
    pub timer_type: ::std::option::Option<aggregation_config::Timer_type>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.processor.v1.AggregationConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AggregationConfig {
    fn default() -> &'a AggregationConfig {
        <AggregationConfig as ::protobuf::Message>::default_instance()
    }
}

impl AggregationConfig {
    pub fn new() -> AggregationConfig {
        ::std::default::Default::default()
    }

    // .pulse.config.processor.v1.AggregationConfig.QuantileTimers quantile_timers = 1;

    pub fn quantile_timers(&self) -> &aggregation_config::QuantileTimers {
        match self.timer_type {
            ::std::option::Option::Some(aggregation_config::Timer_type::QuantileTimers(ref v)) => v,
            _ => <aggregation_config::QuantileTimers as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_quantile_timers(&mut self) {
        self.timer_type = ::std::option::Option::None;
    }

    pub fn has_quantile_timers(&self) -> bool {
        match self.timer_type {
            ::std::option::Option::Some(aggregation_config::Timer_type::QuantileTimers(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_quantile_timers(&mut self, v: aggregation_config::QuantileTimers) {
        self.timer_type = ::std::option::Option::Some(aggregation_config::Timer_type::QuantileTimers(v))
    }

    // Mutable pointer to the field.
    pub fn mut_quantile_timers(&mut self) -> &mut aggregation_config::QuantileTimers {
        if let ::std::option::Option::Some(aggregation_config::Timer_type::QuantileTimers(_)) = self.timer_type {
        } else {
            self.timer_type = ::std::option::Option::Some(aggregation_config::Timer_type::QuantileTimers(aggregation_config::QuantileTimers::new()));
        }
        match self.timer_type {
            ::std::option::Option::Some(aggregation_config::Timer_type::QuantileTimers(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_quantile_timers(&mut self) -> aggregation_config::QuantileTimers {
        if self.has_quantile_timers() {
            match self.timer_type.take() {
                ::std::option::Option::Some(aggregation_config::Timer_type::QuantileTimers(v)) => v,
                _ => panic!(),
            }
        } else {
            aggregation_config::QuantileTimers::new()
        }
    }

    // .pulse.config.processor.v1.AggregationConfig.ReservoirTimers reservoir_timers = 2;

    pub fn reservoir_timers(&self) -> &aggregation_config::ReservoirTimers {
        match self.timer_type {
            ::std::option::Option::Some(aggregation_config::Timer_type::ReservoirTimers(ref v)) => v,
            _ => <aggregation_config::ReservoirTimers as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_reservoir_timers(&mut self) {
        self.timer_type = ::std::option::Option::None;
    }

    pub fn has_reservoir_timers(&self) -> bool {
        match self.timer_type {
            ::std::option::Option::Some(aggregation_config::Timer_type::ReservoirTimers(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reservoir_timers(&mut self, v: aggregation_config::ReservoirTimers) {
        self.timer_type = ::std::option::Option::Some(aggregation_config::Timer_type::ReservoirTimers(v))
    }

    // Mutable pointer to the field.
    pub fn mut_reservoir_timers(&mut self) -> &mut aggregation_config::ReservoirTimers {
        if let ::std::option::Option::Some(aggregation_config::Timer_type::ReservoirTimers(_)) = self.timer_type {
        } else {
            self.timer_type = ::std::option::Option::Some(aggregation_config::Timer_type::ReservoirTimers(aggregation_config::ReservoirTimers::new()));
        }
        match self.timer_type {
            ::std::option::Option::Some(aggregation_config::Timer_type::ReservoirTimers(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_reservoir_timers(&mut self) -> aggregation_config::ReservoirTimers {
        if self.has_reservoir_timers() {
            match self.timer_type.take() {
                ::std::option::Option::Some(aggregation_config::Timer_type::ReservoirTimers(v)) => v,
                _ => panic!(),
            }
        } else {
            aggregation_config::ReservoirTimers::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, aggregation_config::QuantileTimers>(
            "quantile_timers",
            AggregationConfig::has_quantile_timers,
            AggregationConfig::quantile_timers,
            AggregationConfig::mut_quantile_timers,
            AggregationConfig::set_quantile_timers,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, aggregation_config::ReservoirTimers>(
            "reservoir_timers",
            AggregationConfig::has_reservoir_timers,
            AggregationConfig::reservoir_timers,
            AggregationConfig::mut_reservoir_timers,
            AggregationConfig::set_reservoir_timers,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, aggregation_config::Counters>(
            "counters",
            |m: &AggregationConfig| { &m.counters },
            |m: &mut AggregationConfig| { &mut m.counters },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, aggregation_config::Gauges>(
            "gauges",
            |m: &AggregationConfig| { &m.gauges },
            |m: &mut AggregationConfig| { &mut m.gauges },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, aggregation_config::Histograms>(
            "histograms",
            |m: &AggregationConfig| { &m.histograms },
            |m: &mut AggregationConfig| { &mut m.histograms },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, aggregation_config::Summaries>(
            "summaries",
            |m: &AggregationConfig| { &m.summaries },
            |m: &mut AggregationConfig| { &mut m.summaries },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "flush_interval",
            |m: &AggregationConfig| { &m.flush_interval },
            |m: &mut AggregationConfig| { &mut m.flush_interval },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::wrappers::BoolValue>(
            "pin_flush_interval_to_wall_clock",
            |m: &AggregationConfig| { &m.pin_flush_interval_to_wall_clock },
            |m: &mut AggregationConfig| { &mut m.pin_flush_interval_to_wall_clock },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "enable_last_aggregation_admin_endpoint",
            |m: &AggregationConfig| { &m.enable_last_aggregation_admin_endpoint },
            |m: &mut AggregationConfig| { &mut m.enable_last_aggregation_admin_endpoint },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "post_flush_send_jitter",
            |m: &AggregationConfig| { &m.post_flush_send_jitter },
            |m: &mut AggregationConfig| { &mut m.post_flush_send_jitter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "emit_prometheus_stale_markers",
            |m: &AggregationConfig| { &m.emit_prometheus_stale_markers },
            |m: &mut AggregationConfig| { &mut m.emit_prometheus_stale_markers },
        ));
        oneofs.push(aggregation_config::Timer_type::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AggregationConfig>(
            "AggregationConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AggregationConfig {
    const NAME: &'static str = "AggregationConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.timer_type = ::std::option::Option::Some(aggregation_config::Timer_type::QuantileTimers(is.read_message()?));
                },
                18 => {
                    self.timer_type = ::std::option::Option::Some(aggregation_config::Timer_type::ReservoirTimers(is.read_message()?));
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.counters)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.gauges)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.histograms)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.summaries)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.flush_interval)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pin_flush_interval_to_wall_clock)?;
                },
                72 => {
                    self.enable_last_aggregation_admin_endpoint = is.read_bool()?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.post_flush_send_jitter)?;
                },
                88 => {
                    self.emit_prometheus_stale_markers = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.counters.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.gauges.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.histograms.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.summaries.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.flush_interval.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.pin_flush_interval_to_wall_clock.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.enable_last_aggregation_admin_endpoint != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.post_flush_send_jitter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.emit_prometheus_stale_markers != false {
            my_size += 1 + 1;
        }
        if let ::std::option::Option::Some(ref v) = self.timer_type {
            match v {
                &aggregation_config::Timer_type::QuantileTimers(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &aggregation_config::Timer_type::ReservoirTimers(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.counters.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.gauges.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.histograms.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.summaries.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.flush_interval.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.pin_flush_interval_to_wall_clock.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if self.enable_last_aggregation_admin_endpoint != false {
            os.write_bool(9, self.enable_last_aggregation_admin_endpoint)?;
        }
        if let Some(v) = self.post_flush_send_jitter.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if self.emit_prometheus_stale_markers != false {
            os.write_bool(11, self.emit_prometheus_stale_markers)?;
        }
        if let ::std::option::Option::Some(ref v) = self.timer_type {
            match v {
                &aggregation_config::Timer_type::QuantileTimers(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &aggregation_config::Timer_type::ReservoirTimers(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AggregationConfig {
        AggregationConfig::new()
    }

    fn clear(&mut self) {
        self.timer_type = ::std::option::Option::None;
        self.timer_type = ::std::option::Option::None;
        self.counters.clear();
        self.gauges.clear();
        self.histograms.clear();
        self.summaries.clear();
        self.flush_interval.clear();
        self.pin_flush_interval_to_wall_clock.clear();
        self.enable_last_aggregation_admin_endpoint = false;
        self.post_flush_send_jitter.clear();
        self.emit_prometheus_stale_markers = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AggregationConfig {
        static instance: AggregationConfig = AggregationConfig {
            counters: ::protobuf::MessageField::none(),
            gauges: ::protobuf::MessageField::none(),
            histograms: ::protobuf::MessageField::none(),
            summaries: ::protobuf::MessageField::none(),
            flush_interval: ::protobuf::MessageField::none(),
            pin_flush_interval_to_wall_clock: ::protobuf::MessageField::none(),
            enable_last_aggregation_admin_endpoint: false,
            post_flush_send_jitter: ::protobuf::MessageField::none(),
            emit_prometheus_stale_markers: false,
            timer_type: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AggregationConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AggregationConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AggregationConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AggregationConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `AggregationConfig`
pub mod aggregation_config {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:pulse.config.processor.v1.AggregationConfig.timer_type)
    pub enum Timer_type {
        // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.AggregationConfig.quantile_timers)
        QuantileTimers(QuantileTimers),
        // @@protoc_insertion_point(oneof_field:pulse.config.processor.v1.AggregationConfig.reservoir_timers)
        ReservoirTimers(ReservoirTimers),
    }

    impl ::protobuf::Oneof for Timer_type {
    }

    impl ::protobuf::OneofFull for Timer_type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::AggregationConfig as ::protobuf::MessageFull>::descriptor().oneof_by_name("timer_type").unwrap()).clone()
        }
    }

    impl Timer_type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Timer_type>("timer_type")
        }
    }
    // @@protoc_insertion_point(message:pulse.config.processor.v1.AggregationConfig.QuantileTimers)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct QuantileTimers {
        // message fields
        // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.QuantileTimers.prefix)
        pub prefix: ::std::option::Option<::protobuf::Chars>,
        // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.QuantileTimers.eps)
        pub eps: ::std::option::Option<f64>,
        // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.QuantileTimers.quantiles)
        pub quantiles: ::std::vec::Vec<f64>,
        // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.QuantileTimers.extended)
        pub extended: ::protobuf::MessageField<quantile_timers::Extended>,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.processor.v1.AggregationConfig.QuantileTimers.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a QuantileTimers {
        fn default() -> &'a QuantileTimers {
            <QuantileTimers as ::protobuf::Message>::default_instance()
        }
    }

    impl QuantileTimers {
        pub fn new() -> QuantileTimers {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "prefix",
                |m: &QuantileTimers| { &m.prefix },
                |m: &mut QuantileTimers| { &mut m.prefix },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "eps",
                |m: &QuantileTimers| { &m.eps },
                |m: &mut QuantileTimers| { &mut m.eps },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "quantiles",
                |m: &QuantileTimers| { &m.quantiles },
                |m: &mut QuantileTimers| { &mut m.quantiles },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, quantile_timers::Extended>(
                "extended",
                |m: &QuantileTimers| { &m.extended },
                |m: &mut QuantileTimers| { &mut m.extended },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QuantileTimers>(
                "AggregationConfig.QuantileTimers",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for QuantileTimers {
        const NAME: &'static str = "QuantileTimers";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.prefix = ::std::option::Option::Some(is.read_tokio_chars()?);
                    },
                    17 => {
                        self.eps = ::std::option::Option::Some(is.read_double()?);
                    },
                    26 => {
                        is.read_repeated_packed_double_into(&mut self.quantiles)?;
                    },
                    25 => {
                        self.quantiles.push(is.read_double()?);
                    },
                    34 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.extended)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.prefix.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.eps {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::vec_packed_double_size(3, &self.quantiles);
            if let Some(v) = self.extended.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.prefix.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.eps {
                os.write_double(2, v)?;
            }
            os.write_repeated_packed_double(3, &self.quantiles)?;
            if let Some(v) = self.extended.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> QuantileTimers {
            QuantileTimers::new()
        }

        fn clear(&mut self) {
            self.prefix = ::std::option::Option::None;
            self.eps = ::std::option::Option::None;
            self.quantiles.clear();
            self.extended.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static QuantileTimers {
            static instance: QuantileTimers = QuantileTimers {
                prefix: ::std::option::Option::None,
                eps: ::std::option::Option::None,
                quantiles: ::std::vec::Vec::new(),
                extended: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for QuantileTimers {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("AggregationConfig.QuantileTimers").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for QuantileTimers {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for QuantileTimers {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `QuantileTimers`
    pub mod quantile_timers {
        // @@protoc_insertion_point(message:pulse.config.processor.v1.AggregationConfig.QuantileTimers.Extended)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct Extended {
            // message fields
            // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.QuantileTimers.Extended.mean)
            pub mean: bool,
            // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.QuantileTimers.Extended.lower)
            pub lower: bool,
            // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.QuantileTimers.Extended.upper)
            pub upper: bool,
            // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.QuantileTimers.Extended.count)
            pub count: bool,
            // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.QuantileTimers.Extended.rate)
            pub rate: bool,
            // special fields
            // @@protoc_insertion_point(special_field:pulse.config.processor.v1.AggregationConfig.QuantileTimers.Extended.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Extended {
            fn default() -> &'a Extended {
                <Extended as ::protobuf::Message>::default_instance()
            }
        }

        impl Extended {
            pub fn new() -> Extended {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(5);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "mean",
                    |m: &Extended| { &m.mean },
                    |m: &mut Extended| { &mut m.mean },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "lower",
                    |m: &Extended| { &m.lower },
                    |m: &mut Extended| { &mut m.lower },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "upper",
                    |m: &Extended| { &m.upper },
                    |m: &mut Extended| { &mut m.upper },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "count",
                    |m: &Extended| { &m.count },
                    |m: &mut Extended| { &mut m.count },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "rate",
                    |m: &Extended| { &m.rate },
                    |m: &mut Extended| { &mut m.rate },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Extended>(
                    "AggregationConfig.QuantileTimers.Extended",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for Extended {
            const NAME: &'static str = "Extended";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        8 => {
                            self.mean = is.read_bool()?;
                        },
                        16 => {
                            self.lower = is.read_bool()?;
                        },
                        24 => {
                            self.upper = is.read_bool()?;
                        },
                        32 => {
                            self.count = is.read_bool()?;
                        },
                        40 => {
                            self.rate = is.read_bool()?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if self.mean != false {
                    my_size += 1 + 1;
                }
                if self.lower != false {
                    my_size += 1 + 1;
                }
                if self.upper != false {
                    my_size += 1 + 1;
                }
                if self.count != false {
                    my_size += 1 + 1;
                }
                if self.rate != false {
                    my_size += 1 + 1;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if self.mean != false {
                    os.write_bool(1, self.mean)?;
                }
                if self.lower != false {
                    os.write_bool(2, self.lower)?;
                }
                if self.upper != false {
                    os.write_bool(3, self.upper)?;
                }
                if self.count != false {
                    os.write_bool(4, self.count)?;
                }
                if self.rate != false {
                    os.write_bool(5, self.rate)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Extended {
                Extended::new()
            }

            fn clear(&mut self) {
                self.mean = false;
                self.lower = false;
                self.upper = false;
                self.count = false;
                self.rate = false;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Extended {
                static instance: Extended = Extended {
                    mean: false,
                    lower: false,
                    upper: false,
                    count: false,
                    rate: false,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for Extended {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("AggregationConfig.QuantileTimers.Extended").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for Extended {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Extended {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }

    // @@protoc_insertion_point(message:pulse.config.processor.v1.AggregationConfig.ReservoirTimers)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ReservoirTimers {
        // message fields
        // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.ReservoirTimers.reservoir_size)
        pub reservoir_size: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.ReservoirTimers.emit_as_bulk_timer)
        pub emit_as_bulk_timer: bool,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.processor.v1.AggregationConfig.ReservoirTimers.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ReservoirTimers {
        fn default() -> &'a ReservoirTimers {
            <ReservoirTimers as ::protobuf::Message>::default_instance()
        }
    }

    impl ReservoirTimers {
        pub fn new() -> ReservoirTimers {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "reservoir_size",
                |m: &ReservoirTimers| { &m.reservoir_size },
                |m: &mut ReservoirTimers| { &mut m.reservoir_size },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "emit_as_bulk_timer",
                |m: &ReservoirTimers| { &m.emit_as_bulk_timer },
                |m: &mut ReservoirTimers| { &mut m.emit_as_bulk_timer },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReservoirTimers>(
                "AggregationConfig.ReservoirTimers",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ReservoirTimers {
        const NAME: &'static str = "ReservoirTimers";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.reservoir_size = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.emit_as_bulk_timer = is.read_bool()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.reservoir_size {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if self.emit_as_bulk_timer != false {
                my_size += 1 + 1;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.reservoir_size {
                os.write_uint32(1, v)?;
            }
            if self.emit_as_bulk_timer != false {
                os.write_bool(2, self.emit_as_bulk_timer)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ReservoirTimers {
            ReservoirTimers::new()
        }

        fn clear(&mut self) {
            self.reservoir_size = ::std::option::Option::None;
            self.emit_as_bulk_timer = false;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ReservoirTimers {
            static instance: ReservoirTimers = ReservoirTimers {
                reservoir_size: ::std::option::Option::None,
                emit_as_bulk_timer: false,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ReservoirTimers {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("AggregationConfig.ReservoirTimers").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ReservoirTimers {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ReservoirTimers {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:pulse.config.processor.v1.AggregationConfig.Counters)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Counters {
        // message fields
        // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.Counters.prefix)
        pub prefix: ::std::option::Option<::protobuf::Chars>,
        // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.Counters.extended)
        pub extended: ::protobuf::MessageField<counters::Extended>,
        // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.Counters.absolute_counters)
        pub absolute_counters: ::protobuf::MessageField<counters::AbsoluteCounters>,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.processor.v1.AggregationConfig.Counters.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Counters {
        fn default() -> &'a Counters {
            <Counters as ::protobuf::Message>::default_instance()
        }
    }

    impl Counters {
        pub fn new() -> Counters {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "prefix",
                |m: &Counters| { &m.prefix },
                |m: &mut Counters| { &mut m.prefix },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, counters::Extended>(
                "extended",
                |m: &Counters| { &m.extended },
                |m: &mut Counters| { &mut m.extended },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, counters::AbsoluteCounters>(
                "absolute_counters",
                |m: &Counters| { &m.absolute_counters },
                |m: &mut Counters| { &mut m.absolute_counters },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Counters>(
                "AggregationConfig.Counters",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Counters {
        const NAME: &'static str = "Counters";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.prefix = ::std::option::Option::Some(is.read_tokio_chars()?);
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.extended)?;
                    },
                    26 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.absolute_counters)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.prefix.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.extended.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.absolute_counters.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.prefix.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.extended.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            if let Some(v) = self.absolute_counters.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Counters {
            Counters::new()
        }

        fn clear(&mut self) {
            self.prefix = ::std::option::Option::None;
            self.extended.clear();
            self.absolute_counters.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Counters {
            static instance: Counters = Counters {
                prefix: ::std::option::Option::None,
                extended: ::protobuf::MessageField::none(),
                absolute_counters: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Counters {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("AggregationConfig.Counters").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Counters {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Counters {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Counters`
    pub mod counters {
        // @@protoc_insertion_point(message:pulse.config.processor.v1.AggregationConfig.Counters.AbsoluteCounters)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct AbsoluteCounters {
            // message fields
            // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.Counters.AbsoluteCounters.emit_as_delta_rate)
            pub emit_as_delta_rate: bool,
            // special fields
            // @@protoc_insertion_point(special_field:pulse.config.processor.v1.AggregationConfig.Counters.AbsoluteCounters.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a AbsoluteCounters {
            fn default() -> &'a AbsoluteCounters {
                <AbsoluteCounters as ::protobuf::Message>::default_instance()
            }
        }

        impl AbsoluteCounters {
            pub fn new() -> AbsoluteCounters {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(1);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "emit_as_delta_rate",
                    |m: &AbsoluteCounters| { &m.emit_as_delta_rate },
                    |m: &mut AbsoluteCounters| { &mut m.emit_as_delta_rate },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AbsoluteCounters>(
                    "AggregationConfig.Counters.AbsoluteCounters",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for AbsoluteCounters {
            const NAME: &'static str = "AbsoluteCounters";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        24 => {
                            self.emit_as_delta_rate = is.read_bool()?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if self.emit_as_delta_rate != false {
                    my_size += 1 + 1;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if self.emit_as_delta_rate != false {
                    os.write_bool(3, self.emit_as_delta_rate)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> AbsoluteCounters {
                AbsoluteCounters::new()
            }

            fn clear(&mut self) {
                self.emit_as_delta_rate = false;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static AbsoluteCounters {
                static instance: AbsoluteCounters = AbsoluteCounters {
                    emit_as_delta_rate: false,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for AbsoluteCounters {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("AggregationConfig.Counters.AbsoluteCounters").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for AbsoluteCounters {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for AbsoluteCounters {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        // @@protoc_insertion_point(message:pulse.config.processor.v1.AggregationConfig.Counters.Extended)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct Extended {
            // message fields
            // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.Counters.Extended.count)
            pub count: bool,
            // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.Counters.Extended.sum)
            pub sum: bool,
            // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.Counters.Extended.rate)
            pub rate: bool,
            // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.Counters.Extended.lower)
            pub lower: bool,
            // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.Counters.Extended.upper)
            pub upper: bool,
            // special fields
            // @@protoc_insertion_point(special_field:pulse.config.processor.v1.AggregationConfig.Counters.Extended.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Extended {
            fn default() -> &'a Extended {
                <Extended as ::protobuf::Message>::default_instance()
            }
        }

        impl Extended {
            pub fn new() -> Extended {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(5);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "count",
                    |m: &Extended| { &m.count },
                    |m: &mut Extended| { &mut m.count },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "sum",
                    |m: &Extended| { &m.sum },
                    |m: &mut Extended| { &mut m.sum },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "rate",
                    |m: &Extended| { &m.rate },
                    |m: &mut Extended| { &mut m.rate },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "lower",
                    |m: &Extended| { &m.lower },
                    |m: &mut Extended| { &mut m.lower },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "upper",
                    |m: &Extended| { &m.upper },
                    |m: &mut Extended| { &mut m.upper },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Extended>(
                    "AggregationConfig.Counters.Extended",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for Extended {
            const NAME: &'static str = "Extended";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        8 => {
                            self.count = is.read_bool()?;
                        },
                        16 => {
                            self.sum = is.read_bool()?;
                        },
                        24 => {
                            self.rate = is.read_bool()?;
                        },
                        32 => {
                            self.lower = is.read_bool()?;
                        },
                        40 => {
                            self.upper = is.read_bool()?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if self.count != false {
                    my_size += 1 + 1;
                }
                if self.sum != false {
                    my_size += 1 + 1;
                }
                if self.rate != false {
                    my_size += 1 + 1;
                }
                if self.lower != false {
                    my_size += 1 + 1;
                }
                if self.upper != false {
                    my_size += 1 + 1;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if self.count != false {
                    os.write_bool(1, self.count)?;
                }
                if self.sum != false {
                    os.write_bool(2, self.sum)?;
                }
                if self.rate != false {
                    os.write_bool(3, self.rate)?;
                }
                if self.lower != false {
                    os.write_bool(4, self.lower)?;
                }
                if self.upper != false {
                    os.write_bool(5, self.upper)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Extended {
                Extended::new()
            }

            fn clear(&mut self) {
                self.count = false;
                self.sum = false;
                self.rate = false;
                self.lower = false;
                self.upper = false;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Extended {
                static instance: Extended = Extended {
                    count: false,
                    sum: false,
                    rate: false,
                    lower: false,
                    upper: false,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for Extended {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("AggregationConfig.Counters.Extended").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for Extended {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Extended {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }

    // @@protoc_insertion_point(message:pulse.config.processor.v1.AggregationConfig.Gauges)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Gauges {
        // message fields
        // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.Gauges.prefix)
        pub prefix: ::std::option::Option<::protobuf::Chars>,
        // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.Gauges.extended)
        pub extended: ::protobuf::MessageField<gauges::Extended>,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.processor.v1.AggregationConfig.Gauges.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Gauges {
        fn default() -> &'a Gauges {
            <Gauges as ::protobuf::Message>::default_instance()
        }
    }

    impl Gauges {
        pub fn new() -> Gauges {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "prefix",
                |m: &Gauges| { &m.prefix },
                |m: &mut Gauges| { &mut m.prefix },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, gauges::Extended>(
                "extended",
                |m: &Gauges| { &m.extended },
                |m: &mut Gauges| { &mut m.extended },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Gauges>(
                "AggregationConfig.Gauges",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Gauges {
        const NAME: &'static str = "Gauges";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.prefix = ::std::option::Option::Some(is.read_tokio_chars()?);
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.extended)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.prefix.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.extended.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.prefix.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.extended.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Gauges {
            Gauges::new()
        }

        fn clear(&mut self) {
            self.prefix = ::std::option::Option::None;
            self.extended.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Gauges {
            static instance: Gauges = Gauges {
                prefix: ::std::option::Option::None,
                extended: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Gauges {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("AggregationConfig.Gauges").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Gauges {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Gauges {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Gauges`
    pub mod gauges {
        // @@protoc_insertion_point(message:pulse.config.processor.v1.AggregationConfig.Gauges.Extended)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct Extended {
            // message fields
            // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.Gauges.Extended.sum)
            pub sum: bool,
            // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.Gauges.Extended.mean)
            pub mean: bool,
            // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.Gauges.Extended.min)
            pub min: bool,
            // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.Gauges.Extended.max)
            pub max: bool,
            // special fields
            // @@protoc_insertion_point(special_field:pulse.config.processor.v1.AggregationConfig.Gauges.Extended.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Extended {
            fn default() -> &'a Extended {
                <Extended as ::protobuf::Message>::default_instance()
            }
        }

        impl Extended {
            pub fn new() -> Extended {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(4);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "sum",
                    |m: &Extended| { &m.sum },
                    |m: &mut Extended| { &mut m.sum },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "mean",
                    |m: &Extended| { &m.mean },
                    |m: &mut Extended| { &mut m.mean },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "min",
                    |m: &Extended| { &m.min },
                    |m: &mut Extended| { &mut m.min },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "max",
                    |m: &Extended| { &m.max },
                    |m: &mut Extended| { &mut m.max },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Extended>(
                    "AggregationConfig.Gauges.Extended",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for Extended {
            const NAME: &'static str = "Extended";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        8 => {
                            self.sum = is.read_bool()?;
                        },
                        16 => {
                            self.mean = is.read_bool()?;
                        },
                        24 => {
                            self.min = is.read_bool()?;
                        },
                        32 => {
                            self.max = is.read_bool()?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if self.sum != false {
                    my_size += 1 + 1;
                }
                if self.mean != false {
                    my_size += 1 + 1;
                }
                if self.min != false {
                    my_size += 1 + 1;
                }
                if self.max != false {
                    my_size += 1 + 1;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if self.sum != false {
                    os.write_bool(1, self.sum)?;
                }
                if self.mean != false {
                    os.write_bool(2, self.mean)?;
                }
                if self.min != false {
                    os.write_bool(3, self.min)?;
                }
                if self.max != false {
                    os.write_bool(4, self.max)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Extended {
                Extended::new()
            }

            fn clear(&mut self) {
                self.sum = false;
                self.mean = false;
                self.min = false;
                self.max = false;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Extended {
                static instance: Extended = Extended {
                    sum: false,
                    mean: false,
                    min: false,
                    max: false,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for Extended {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("AggregationConfig.Gauges.Extended").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for Extended {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Extended {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }

    // @@protoc_insertion_point(message:pulse.config.processor.v1.AggregationConfig.Histograms)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Histograms {
        // message fields
        // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.Histograms.prefix)
        pub prefix: ::std::option::Option<::protobuf::Chars>,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.processor.v1.AggregationConfig.Histograms.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Histograms {
        fn default() -> &'a Histograms {
            <Histograms as ::protobuf::Message>::default_instance()
        }
    }

    impl Histograms {
        pub fn new() -> Histograms {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "prefix",
                |m: &Histograms| { &m.prefix },
                |m: &mut Histograms| { &mut m.prefix },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Histograms>(
                "AggregationConfig.Histograms",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Histograms {
        const NAME: &'static str = "Histograms";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.prefix = ::std::option::Option::Some(is.read_tokio_chars()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.prefix.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.prefix.as_ref() {
                os.write_string(1, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Histograms {
            Histograms::new()
        }

        fn clear(&mut self) {
            self.prefix = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Histograms {
            static instance: Histograms = Histograms {
                prefix: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Histograms {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("AggregationConfig.Histograms").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Histograms {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Histograms {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:pulse.config.processor.v1.AggregationConfig.Summaries)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Summaries {
        // message fields
        // @@protoc_insertion_point(field:pulse.config.processor.v1.AggregationConfig.Summaries.prefix)
        pub prefix: ::std::option::Option<::protobuf::Chars>,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.processor.v1.AggregationConfig.Summaries.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Summaries {
        fn default() -> &'a Summaries {
            <Summaries as ::protobuf::Message>::default_instance()
        }
    }

    impl Summaries {
        pub fn new() -> Summaries {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "prefix",
                |m: &Summaries| { &m.prefix },
                |m: &mut Summaries| { &mut m.prefix },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Summaries>(
                "AggregationConfig.Summaries",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Summaries {
        const NAME: &'static str = "Summaries";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    90 => {
                        self.prefix = ::std::option::Option::Some(is.read_tokio_chars()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.prefix.as_ref() {
                my_size += ::protobuf::rt::string_size(11, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.prefix.as_ref() {
                os.write_string(11, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Summaries {
            Summaries::new()
        }

        fn clear(&mut self) {
            self.prefix = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Summaries {
            static instance: Summaries = Summaries {
                prefix: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Summaries {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("AggregationConfig.Summaries").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Summaries {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Summaries {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n+pulse/config/processor/v1/aggregation.proto\x12\x19pulse.config.proce\
    ssor.v1\x1a\x1egoogle/protobuf/duration.proto\x1a\x1egoogle/protobuf/wra\
    ppers.proto\x1a\x17validate/validate.proto\"\xc4\x11\n\x11AggregationCon\
    fig\x12f\n\x0fquantile_timers\x18\x01\x20\x01(\x0b2;.pulse.config.proces\
    sor.v1.AggregationConfig.QuantileTimersH\0R\x0equantileTimers\x12i\n\x10\
    reservoir_timers\x18\x02\x20\x01(\x0b2<.pulse.config.processor.v1.Aggreg\
    ationConfig.ReservoirTimersH\0R\x0freservoirTimers\x12Q\n\x08counters\
    \x18\x03\x20\x01(\x0b25.pulse.config.processor.v1.AggregationConfig.Coun\
    tersR\x08counters\x12K\n\x06gauges\x18\x04\x20\x01(\x0b23.pulse.config.p\
    rocessor.v1.AggregationConfig.GaugesR\x06gauges\x12W\n\nhistograms\x18\
    \x05\x20\x01(\x0b27.pulse.config.processor.v1.AggregationConfig.Histogra\
    msR\nhistograms\x12T\n\tsummaries\x18\x06\x20\x01(\x0b26.pulse.config.pr\
    ocessor.v1.AggregationConfig.SummariesR\tsummaries\x12J\n\x0eflush_inter\
    val\x18\x07\x20\x01(\x0b2\x19.google.protobuf.DurationR\rflushIntervalB\
    \x08\xfaB\x05\xaa\x01\x02*\0\x12a\n\x20pin_flush_interval_to_wall_clock\
    \x18\x08\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\x1bpinFlushInterva\
    lToWallClock\x12R\n&enable_last_aggregation_admin_endpoint\x18\t\x20\x01\
    (\x08R\"enableLastAggregationAdminEndpoint\x12X\n\x16post_flush_send_jit\
    ter\x18\n\x20\x01(\x0b2\x19.google.protobuf.DurationR\x13postFlushSendJi\
    tterB\x08\xfaB\x05\xaa\x01\x02*\0\x12A\n\x1demit_prometheus_stale_marker\
    s\x18\x0b\x20\x01(\x08R\x1aemitPrometheusStaleMarkers\x1a\xcd\x02\n\x0eQ\
    uantileTimers\x12\x1b\n\x06prefix\x18\x01\x20\x01(\tH\0R\x06prefix\x88\
    \x01\x01\x12\x15\n\x03eps\x18\x02\x20\x01(\x01H\x01R\x03eps\x88\x01\x01\
    \x12\x1c\n\tquantiles\x18\x03\x20\x03(\x01R\tquantiles\x12`\n\x08extende\
    d\x18\x04\x20\x01(\x0b2D.pulse.config.processor.v1.AggregationConfig.Qua\
    ntileTimers.ExtendedR\x08extended\x1at\n\x08Extended\x12\x12\n\x04mean\
    \x18\x01\x20\x01(\x08R\x04mean\x12\x14\n\x05lower\x18\x02\x20\x01(\x08R\
    \x05lower\x12\x14\n\x05upper\x18\x03\x20\x01(\x08R\x05upper\x12\x14\n\
    \x05count\x18\x04\x20\x01(\x08R\x05count\x12\x12\n\x04rate\x18\x05\x20\
    \x01(\x08R\x04rateB\t\n\x07_prefixB\x06\n\x04_eps\x1a}\n\x0fReservoirTim\
    ers\x12*\n\x0ereservoir_size\x18\x01\x20\x01(\rH\0R\rreservoirSize\x88\
    \x01\x01\x12+\n\x12emit_as_bulk_timer\x18\x02\x20\x01(\x08R\x0femitAsBul\
    kTimerB\x11\n\x0f_reservoir_size\x1a\xc1\x03\n\x08Counters\x12\x1b\n\x06\
    prefix\x18\x01\x20\x01(\tH\0R\x06prefix\x88\x01\x01\x12Z\n\x08extended\
    \x18\x02\x20\x01(\x0b2>.pulse.config.processor.v1.AggregationConfig.Coun\
    ters.ExtendedR\x08extended\x12s\n\x11absolute_counters\x18\x03\x20\x01(\
    \x0b2F.pulse.config.processor.v1.AggregationConfig.Counters.AbsoluteCoun\
    tersR\x10absoluteCounters\x1aH\n\x10AbsoluteCounters\x124\n\x12emit_as_d\
    elta_rate\x18\x03\x20\x01(\x08R\x0femitAsDeltaRateB\x07\xfaB\x04j\x02\
    \x08\x01\x1ar\n\x08Extended\x12\x14\n\x05count\x18\x01\x20\x01(\x08R\x05\
    count\x12\x10\n\x03sum\x18\x02\x20\x01(\x08R\x03sum\x12\x12\n\x04rate\
    \x18\x03\x20\x01(\x08R\x04rate\x12\x14\n\x05lower\x18\x04\x20\x01(\x08R\
    \x05lower\x12\x14\n\x05upper\x18\x05\x20\x01(\x08R\x05upperB\t\n\x07_pre\
    fix\x1a\xe0\x01\n\x06Gauges\x12\x1b\n\x06prefix\x18\x01\x20\x01(\tH\0R\
    \x06prefix\x88\x01\x01\x12X\n\x08extended\x18\x02\x20\x01(\x0b2<.pulse.c\
    onfig.processor.v1.AggregationConfig.Gauges.ExtendedR\x08extended\x1aT\n\
    \x08Extended\x12\x10\n\x03sum\x18\x01\x20\x01(\x08R\x03sum\x12\x12\n\x04\
    mean\x18\x02\x20\x01(\x08R\x04mean\x12\x10\n\x03min\x18\x03\x20\x01(\x08\
    R\x03min\x12\x10\n\x03max\x18\x04\x20\x01(\x08R\x03maxB\t\n\x07_prefix\
    \x1a4\n\nHistograms\x12\x1b\n\x06prefix\x18\x01\x20\x01(\tH\0R\x06prefix\
    \x88\x01\x01B\t\n\x07_prefix\x1a3\n\tSummaries\x12\x1b\n\x06prefix\x18\
    \x0b\x20\x01(\tH\0R\x06prefix\x88\x01\x01B\t\n\x07_prefixB\x0c\n\ntimer_\
    typeb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(::protobuf::well_known_types::duration::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::wrappers::file_descriptor().clone());
            deps.push(super::validate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(11);
            messages.push(AggregationConfig::generated_message_descriptor_data());
            messages.push(aggregation_config::QuantileTimers::generated_message_descriptor_data());
            messages.push(aggregation_config::ReservoirTimers::generated_message_descriptor_data());
            messages.push(aggregation_config::Counters::generated_message_descriptor_data());
            messages.push(aggregation_config::Gauges::generated_message_descriptor_data());
            messages.push(aggregation_config::Histograms::generated_message_descriptor_data());
            messages.push(aggregation_config::Summaries::generated_message_descriptor_data());
            messages.push(aggregation_config::quantile_timers::Extended::generated_message_descriptor_data());
            messages.push(aggregation_config::counters::AbsoluteCounters::generated_message_descriptor_data());
            messages.push(aggregation_config::counters::Extended::generated_message_descriptor_data());
            messages.push(aggregation_config::gauges::Extended::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
