// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 29.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `pulse/config/outflow/v1/otlp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:pulse.config.outflow.v1.OtlpClientConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OtlpClientConfig {
    // message fields
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.OtlpClientConfig.send_to)
    pub send_to: ::protobuf::Chars,
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.OtlpClientConfig.request_timeout)
    pub request_timeout: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.OtlpClientConfig.max_in_flight)
    pub max_in_flight: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.OtlpClientConfig.queue_policy)
    pub queue_policy: ::protobuf::MessageField<super::queue_policy::QueuePolicy>,
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.OtlpClientConfig.batch_max_samples)
    pub batch_max_samples: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.OtlpClientConfig.auth)
    pub auth: ::protobuf::MessageField<super::outflow_common::HttpRemoteWriteAuthConfig>,
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.OtlpClientConfig.request_headers)
    pub request_headers: ::std::vec::Vec<super::outflow_common::RequestHeader>,
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.OtlpClientConfig.retry_policy)
    pub retry_policy: ::protobuf::MessageField<super::retry::RetryPolicy>,
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.OtlpClientConfig.compression)
    pub compression: ::protobuf::EnumOrUnknown<otlp_client_config::OtlpCompression>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.outflow.v1.OtlpClientConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OtlpClientConfig {
    fn default() -> &'a OtlpClientConfig {
        <OtlpClientConfig as ::protobuf::Message>::default_instance()
    }
}

impl OtlpClientConfig {
    pub fn new() -> OtlpClientConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "send_to",
            |m: &OtlpClientConfig| { &m.send_to },
            |m: &mut OtlpClientConfig| { &mut m.send_to },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "request_timeout",
            |m: &OtlpClientConfig| { &m.request_timeout },
            |m: &mut OtlpClientConfig| { &mut m.request_timeout },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "max_in_flight",
            |m: &OtlpClientConfig| { &m.max_in_flight },
            |m: &mut OtlpClientConfig| { &mut m.max_in_flight },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::queue_policy::QueuePolicy>(
            "queue_policy",
            |m: &OtlpClientConfig| { &m.queue_policy },
            |m: &mut OtlpClientConfig| { &mut m.queue_policy },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "batch_max_samples",
            |m: &OtlpClientConfig| { &m.batch_max_samples },
            |m: &mut OtlpClientConfig| { &mut m.batch_max_samples },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::outflow_common::HttpRemoteWriteAuthConfig>(
            "auth",
            |m: &OtlpClientConfig| { &m.auth },
            |m: &mut OtlpClientConfig| { &mut m.auth },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "request_headers",
            |m: &OtlpClientConfig| { &m.request_headers },
            |m: &mut OtlpClientConfig| { &mut m.request_headers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::retry::RetryPolicy>(
            "retry_policy",
            |m: &OtlpClientConfig| { &m.retry_policy },
            |m: &mut OtlpClientConfig| { &mut m.retry_policy },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "compression",
            |m: &OtlpClientConfig| { &m.compression },
            |m: &mut OtlpClientConfig| { &mut m.compression },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OtlpClientConfig>(
            "OtlpClientConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OtlpClientConfig {
    const NAME: &'static str = "OtlpClientConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.send_to = is.read_tokio_chars()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.request_timeout)?;
                },
                24 => {
                    self.max_in_flight = ::std::option::Option::Some(is.read_uint64()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.queue_policy)?;
                },
                40 => {
                    self.batch_max_samples = ::std::option::Option::Some(is.read_uint64()?);
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.auth)?;
                },
                58 => {
                    self.request_headers.push(is.read_message()?);
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.retry_policy)?;
                },
                72 => {
                    self.compression = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.send_to.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.send_to);
        }
        if let Some(v) = self.request_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.max_in_flight {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.queue_policy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.batch_max_samples {
            my_size += ::protobuf::rt::uint64_size(5, v);
        }
        if let Some(v) = self.auth.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.request_headers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.retry_policy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.compression != ::protobuf::EnumOrUnknown::new(otlp_client_config::OtlpCompression::SNAPPY) {
            my_size += ::protobuf::rt::int32_size(9, self.compression.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.send_to.is_empty() {
            os.write_string(1, &self.send_to)?;
        }
        if let Some(v) = self.request_timeout.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.max_in_flight {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.queue_policy.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.batch_max_samples {
            os.write_uint64(5, v)?;
        }
        if let Some(v) = self.auth.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        for v in &self.request_headers {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if let Some(v) = self.retry_policy.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if self.compression != ::protobuf::EnumOrUnknown::new(otlp_client_config::OtlpCompression::SNAPPY) {
            os.write_enum(9, ::protobuf::EnumOrUnknown::value(&self.compression))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OtlpClientConfig {
        OtlpClientConfig::new()
    }

    fn clear(&mut self) {
        self.send_to.clear();
        self.request_timeout.clear();
        self.max_in_flight = ::std::option::Option::None;
        self.queue_policy.clear();
        self.batch_max_samples = ::std::option::Option::None;
        self.auth.clear();
        self.request_headers.clear();
        self.retry_policy.clear();
        self.compression = ::protobuf::EnumOrUnknown::new(otlp_client_config::OtlpCompression::SNAPPY);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OtlpClientConfig {
        static instance: OtlpClientConfig = OtlpClientConfig {
            send_to: ::protobuf::Chars::new(),
            request_timeout: ::protobuf::MessageField::none(),
            max_in_flight: ::std::option::Option::None,
            queue_policy: ::protobuf::MessageField::none(),
            batch_max_samples: ::std::option::Option::None,
            auth: ::protobuf::MessageField::none(),
            request_headers: ::std::vec::Vec::new(),
            retry_policy: ::protobuf::MessageField::none(),
            compression: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OtlpClientConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OtlpClientConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OtlpClientConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OtlpClientConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `OtlpClientConfig`
pub mod otlp_client_config {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:pulse.config.outflow.v1.OtlpClientConfig.OtlpCompression)
    pub enum OtlpCompression {
        // @@protoc_insertion_point(enum_value:pulse.config.outflow.v1.OtlpClientConfig.OtlpCompression.SNAPPY)
        SNAPPY = 0,
        // @@protoc_insertion_point(enum_value:pulse.config.outflow.v1.OtlpClientConfig.OtlpCompression.NONE)
        NONE = 1,
    }

    impl ::protobuf::Enum for OtlpCompression {
        const NAME: &'static str = "OtlpCompression";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<OtlpCompression> {
            match value {
                0 => ::std::option::Option::Some(OtlpCompression::SNAPPY),
                1 => ::std::option::Option::Some(OtlpCompression::NONE),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<OtlpCompression> {
            match str {
                "SNAPPY" => ::std::option::Option::Some(OtlpCompression::SNAPPY),
                "NONE" => ::std::option::Option::Some(OtlpCompression::NONE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [OtlpCompression] = &[
            OtlpCompression::SNAPPY,
            OtlpCompression::NONE,
        ];
    }

    impl ::protobuf::EnumFull for OtlpCompression {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("OtlpClientConfig.OtlpCompression").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for OtlpCompression {
        fn default() -> Self {
            OtlpCompression::SNAPPY
        }
    }

    impl OtlpCompression {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<OtlpCompression>("OtlpClientConfig.OtlpCompression")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"pulse/config/outflow/v1/otlp.proto\x12\x17pulse.config.outflow.v1\
    \x1a#pulse/config/common/v1/common.proto\x1a\"pulse/config/common/v1/ret\
    ry.proto\x1a*pulse/config/outflow/v1/queue_policy.proto\x1a,pulse/config\
    /outflow/v1/outflow_common.proto\x1a\x1egoogle/protobuf/duration.proto\
    \x1a\x17validate/validate.proto\"\xb4\x05\n\x10OtlpClientConfig\x12\x20\
    \n\x07send_to\x18\x01\x20\x01(\tR\x06sendToB\x07\xfaB\x04r\x02\x10\x01\
    \x12L\n\x0frequest_timeout\x18\x02\x20\x01(\x0b2\x19.google.protobuf.Dur\
    ationR\x0erequestTimeoutB\x08\xfaB\x05\xaa\x01\x02*\0\x12'\n\rmax_in_fli\
    ght\x18\x03\x20\x01(\x04H\0R\x0bmaxInFlight\x88\x01\x01\x12G\n\x0cqueue_\
    policy\x18\x04\x20\x01(\x0b2$.pulse.config.outflow.v1.QueuePolicyR\x0bqu\
    euePolicy\x12/\n\x11batch_max_samples\x18\x05\x20\x01(\x04H\x01R\x0fbatc\
    hMaxSamples\x88\x01\x01\x12F\n\x04auth\x18\x06\x20\x01(\x0b22.pulse.conf\
    ig.outflow.v1.HttpRemoteWriteAuthConfigR\x04auth\x12O\n\x0frequest_heade\
    rs\x18\x07\x20\x03(\x0b2&.pulse.config.outflow.v1.RequestHeaderR\x0erequ\
    estHeaders\x12F\n\x0cretry_policy\x18\x08\x20\x01(\x0b2#.pulse.config.co\
    mmon.v1.RetryPolicyR\x0bretryPolicy\x12[\n\x0bcompression\x18\t\x20\x01(\
    \x0e29.pulse.config.outflow.v1.OtlpClientConfig.OtlpCompressionR\x0bcomp\
    ression\"'\n\x0fOtlpCompression\x12\n\n\x06SNAPPY\x10\0\x12\x08\n\x04NON\
    E\x10\x01B\x10\n\x0e_max_in_flightB\x14\n\x12_batch_max_samplesb\x06prot\
    o3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(6);
            deps.push(super::common::file_descriptor().clone());
            deps.push(super::retry::file_descriptor().clone());
            deps.push(super::queue_policy::file_descriptor().clone());
            deps.push(super::outflow_common::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::duration::file_descriptor().clone());
            deps.push(super::validate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(OtlpClientConfig::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(otlp_client_config::OtlpCompression::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
