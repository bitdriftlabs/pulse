// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 29.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `pulse/config/outflow/v1/otlp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:pulse.config.outflow.v1.OtlpAuthConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OtlpAuthConfig {
    // message oneof groups
    pub auth_type: ::std::option::Option<otlp_auth_config::Auth_type>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.outflow.v1.OtlpAuthConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OtlpAuthConfig {
    fn default() -> &'a OtlpAuthConfig {
        <OtlpAuthConfig as ::protobuf::Message>::default_instance()
    }
}

impl OtlpAuthConfig {
    pub fn new() -> OtlpAuthConfig {
        ::std::default::Default::default()
    }

    // .pulse.config.common.v1.BearerTokenConfig bearer_token = 2;

    pub fn bearer_token(&self) -> &super::common::BearerTokenConfig {
        match self.auth_type {
            ::std::option::Option::Some(otlp_auth_config::Auth_type::BearerToken(ref v)) => v,
            _ => <super::common::BearerTokenConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_bearer_token(&mut self) {
        self.auth_type = ::std::option::Option::None;
    }

    pub fn has_bearer_token(&self) -> bool {
        match self.auth_type {
            ::std::option::Option::Some(otlp_auth_config::Auth_type::BearerToken(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bearer_token(&mut self, v: super::common::BearerTokenConfig) {
        self.auth_type = ::std::option::Option::Some(otlp_auth_config::Auth_type::BearerToken(v))
    }

    // Mutable pointer to the field.
    pub fn mut_bearer_token(&mut self) -> &mut super::common::BearerTokenConfig {
        if let ::std::option::Option::Some(otlp_auth_config::Auth_type::BearerToken(_)) = self.auth_type {
        } else {
            self.auth_type = ::std::option::Option::Some(otlp_auth_config::Auth_type::BearerToken(super::common::BearerTokenConfig::new()));
        }
        match self.auth_type {
            ::std::option::Option::Some(otlp_auth_config::Auth_type::BearerToken(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_bearer_token(&mut self) -> super::common::BearerTokenConfig {
        if self.has_bearer_token() {
            match self.auth_type.take() {
                ::std::option::Option::Some(otlp_auth_config::Auth_type::BearerToken(v)) => v,
                _ => panic!(),
            }
        } else {
            super::common::BearerTokenConfig::new()
        }
    }

    // .pulse.config.outflow.v1.OtlpAuthConfig.AwsAuthConfig aws = 3;

    pub fn aws(&self) -> &otlp_auth_config::AwsAuthConfig {
        match self.auth_type {
            ::std::option::Option::Some(otlp_auth_config::Auth_type::Aws(ref v)) => v,
            _ => <otlp_auth_config::AwsAuthConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_aws(&mut self) {
        self.auth_type = ::std::option::Option::None;
    }

    pub fn has_aws(&self) -> bool {
        match self.auth_type {
            ::std::option::Option::Some(otlp_auth_config::Auth_type::Aws(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_aws(&mut self, v: otlp_auth_config::AwsAuthConfig) {
        self.auth_type = ::std::option::Option::Some(otlp_auth_config::Auth_type::Aws(v))
    }

    // Mutable pointer to the field.
    pub fn mut_aws(&mut self) -> &mut otlp_auth_config::AwsAuthConfig {
        if let ::std::option::Option::Some(otlp_auth_config::Auth_type::Aws(_)) = self.auth_type {
        } else {
            self.auth_type = ::std::option::Option::Some(otlp_auth_config::Auth_type::Aws(otlp_auth_config::AwsAuthConfig::new()));
        }
        match self.auth_type {
            ::std::option::Option::Some(otlp_auth_config::Auth_type::Aws(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_aws(&mut self) -> otlp_auth_config::AwsAuthConfig {
        if self.has_aws() {
            match self.auth_type.take() {
                ::std::option::Option::Some(otlp_auth_config::Auth_type::Aws(v)) => v,
                _ => panic!(),
            }
        } else {
            otlp_auth_config::AwsAuthConfig::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::common::BearerTokenConfig>(
            "bearer_token",
            OtlpAuthConfig::has_bearer_token,
            OtlpAuthConfig::bearer_token,
            OtlpAuthConfig::mut_bearer_token,
            OtlpAuthConfig::set_bearer_token,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, otlp_auth_config::AwsAuthConfig>(
            "aws",
            OtlpAuthConfig::has_aws,
            OtlpAuthConfig::aws,
            OtlpAuthConfig::mut_aws,
            OtlpAuthConfig::set_aws,
        ));
        oneofs.push(otlp_auth_config::Auth_type::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OtlpAuthConfig>(
            "OtlpAuthConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OtlpAuthConfig {
    const NAME: &'static str = "OtlpAuthConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.auth_type = ::std::option::Option::Some(otlp_auth_config::Auth_type::BearerToken(is.read_message()?));
                },
                26 => {
                    self.auth_type = ::std::option::Option::Some(otlp_auth_config::Auth_type::Aws(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.auth_type {
            match v {
                &otlp_auth_config::Auth_type::BearerToken(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &otlp_auth_config::Auth_type::Aws(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.auth_type {
            match v {
                &otlp_auth_config::Auth_type::BearerToken(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &otlp_auth_config::Auth_type::Aws(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OtlpAuthConfig {
        OtlpAuthConfig::new()
    }

    fn clear(&mut self) {
        self.auth_type = ::std::option::Option::None;
        self.auth_type = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OtlpAuthConfig {
        static instance: OtlpAuthConfig = OtlpAuthConfig {
            auth_type: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OtlpAuthConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OtlpAuthConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OtlpAuthConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OtlpAuthConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `OtlpAuthConfig`
pub mod otlp_auth_config {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:pulse.config.outflow.v1.OtlpAuthConfig.auth_type)
    pub enum Auth_type {
        // @@protoc_insertion_point(oneof_field:pulse.config.outflow.v1.OtlpAuthConfig.bearer_token)
        BearerToken(super::super::common::BearerTokenConfig),
        // @@protoc_insertion_point(oneof_field:pulse.config.outflow.v1.OtlpAuthConfig.aws)
        Aws(AwsAuthConfig),
    }

    impl ::protobuf::Oneof for Auth_type {
    }

    impl ::protobuf::OneofFull for Auth_type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::OtlpAuthConfig as ::protobuf::MessageFull>::descriptor().oneof_by_name("auth_type").unwrap()).clone()
        }
    }

    impl Auth_type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Auth_type>("auth_type")
        }
    }
    // @@protoc_insertion_point(message:pulse.config.outflow.v1.OtlpAuthConfig.AwsAuthConfig)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct AwsAuthConfig {
        // message oneof groups
        pub auth_type: ::std::option::Option<aws_auth_config::Auth_type>,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.outflow.v1.OtlpAuthConfig.AwsAuthConfig.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a AwsAuthConfig {
        fn default() -> &'a AwsAuthConfig {
            <AwsAuthConfig as ::protobuf::Message>::default_instance()
        }
    }

    impl AwsAuthConfig {
        pub fn new() -> AwsAuthConfig {
            ::std::default::Default::default()
        }

        // .pulse.config.outflow.v1.OtlpAuthConfig.AwsAuthConfig.Default default = 1;

        pub fn default(&self) -> &aws_auth_config::Default {
            match self.auth_type {
                ::std::option::Option::Some(aws_auth_config::Auth_type::Default(ref v)) => v,
                _ => <aws_auth_config::Default as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_default(&mut self) {
            self.auth_type = ::std::option::Option::None;
        }

        pub fn has_default(&self) -> bool {
            match self.auth_type {
                ::std::option::Option::Some(aws_auth_config::Auth_type::Default(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_default(&mut self, v: aws_auth_config::Default) {
            self.auth_type = ::std::option::Option::Some(aws_auth_config::Auth_type::Default(v))
        }

        // Mutable pointer to the field.
        pub fn mut_default(&mut self) -> &mut aws_auth_config::Default {
            if let ::std::option::Option::Some(aws_auth_config::Auth_type::Default(_)) = self.auth_type {
            } else {
                self.auth_type = ::std::option::Option::Some(aws_auth_config::Auth_type::Default(aws_auth_config::Default::new()));
            }
            match self.auth_type {
                ::std::option::Option::Some(aws_auth_config::Auth_type::Default(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_default(&mut self) -> aws_auth_config::Default {
            if self.has_default() {
                match self.auth_type.take() {
                    ::std::option::Option::Some(aws_auth_config::Auth_type::Default(v)) => v,
                    _ => panic!(),
                }
            } else {
                aws_auth_config::Default::new()
            }
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(1);
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, aws_auth_config::Default>(
                "default",
                AwsAuthConfig::has_default,
                AwsAuthConfig::default,
                AwsAuthConfig::mut_default,
                AwsAuthConfig::set_default,
            ));
            oneofs.push(aws_auth_config::Auth_type::generated_oneof_descriptor_data());
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AwsAuthConfig>(
                "OtlpAuthConfig.AwsAuthConfig",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for AwsAuthConfig {
        const NAME: &'static str = "AwsAuthConfig";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.auth_type = ::std::option::Option::Some(aws_auth_config::Auth_type::Default(is.read_message()?));
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let ::std::option::Option::Some(ref v) = self.auth_type {
                match v {
                    &aws_auth_config::Auth_type::Default(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let ::std::option::Option::Some(ref v) = self.auth_type {
                match v {
                    &aws_auth_config::Auth_type::Default(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> AwsAuthConfig {
            AwsAuthConfig::new()
        }

        fn clear(&mut self) {
            self.auth_type = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static AwsAuthConfig {
            static instance: AwsAuthConfig = AwsAuthConfig {
                auth_type: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for AwsAuthConfig {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("OtlpAuthConfig.AwsAuthConfig").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for AwsAuthConfig {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for AwsAuthConfig {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `AwsAuthConfig`
    pub mod aws_auth_config {

        #[derive(Clone,PartialEq,Debug)]
        // @@protoc_insertion_point(oneof:pulse.config.outflow.v1.OtlpAuthConfig.AwsAuthConfig.auth_type)
        pub enum Auth_type {
            // @@protoc_insertion_point(oneof_field:pulse.config.outflow.v1.OtlpAuthConfig.AwsAuthConfig.default)
            Default(Default),
        }

        impl ::protobuf::Oneof for Auth_type {
        }

        impl ::protobuf::OneofFull for Auth_type {
            fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| <super::AwsAuthConfig as ::protobuf::MessageFull>::descriptor().oneof_by_name("auth_type").unwrap()).clone()
            }
        }

        impl Auth_type {
            pub(in super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Auth_type>("auth_type")
            }
        }
        // @@protoc_insertion_point(message:pulse.config.outflow.v1.OtlpAuthConfig.AwsAuthConfig.Default)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct Default {
            // message fields
            // @@protoc_insertion_point(field:pulse.config.outflow.v1.OtlpAuthConfig.AwsAuthConfig.Default.assume_role)
            pub assume_role: ::std::option::Option<::protobuf::Chars>,
            // special fields
            // @@protoc_insertion_point(special_field:pulse.config.outflow.v1.OtlpAuthConfig.AwsAuthConfig.Default.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Default {
            fn default() -> &'a Default {
                <Default as ::protobuf::Message>::default_instance()
            }
        }

        impl Default {
            pub fn new() -> Default {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(1);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "assume_role",
                    |m: &Default| { &m.assume_role },
                    |m: &mut Default| { &mut m.assume_role },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Default>(
                    "OtlpAuthConfig.AwsAuthConfig.Default",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for Default {
            const NAME: &'static str = "Default";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.assume_role = ::std::option::Option::Some(is.read_tokio_chars()?);
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.assume_role.as_ref() {
                    my_size += ::protobuf::rt::string_size(1, &v);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.assume_role.as_ref() {
                    os.write_string(1, v)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Default {
                Default::new()
            }

            fn clear(&mut self) {
                self.assume_role = ::std::option::Option::None;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Default {
                static instance: Default = Default {
                    assume_role: ::std::option::Option::None,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for Default {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("OtlpAuthConfig.AwsAuthConfig.Default").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for Default {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Default {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }
}

// @@protoc_insertion_point(message:pulse.config.outflow.v1.OtlpClientConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OtlpClientConfig {
    // message fields
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.OtlpClientConfig.send_to)
    pub send_to: ::protobuf::Chars,
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.OtlpClientConfig.request_timeout)
    pub request_timeout: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.OtlpClientConfig.max_in_flight)
    pub max_in_flight: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.OtlpClientConfig.queue_policy)
    pub queue_policy: ::protobuf::MessageField<super::queue_policy::QueuePolicy>,
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.OtlpClientConfig.batch_max_samples)
    pub batch_max_samples: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.OtlpClientConfig.metadata_only)
    pub metadata_only: bool,
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.OtlpClientConfig.auth)
    pub auth: ::protobuf::MessageField<OtlpAuthConfig>,
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.OtlpClientConfig.request_headers)
    pub request_headers: ::std::vec::Vec<otlp_client_config::RequestHeader>,
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.OtlpClientConfig.convert_metric_name)
    pub convert_metric_name: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.OtlpClientConfig.retry_policy)
    pub retry_policy: ::protobuf::MessageField<super::retry::RetryPolicy>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.outflow.v1.OtlpClientConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OtlpClientConfig {
    fn default() -> &'a OtlpClientConfig {
        <OtlpClientConfig as ::protobuf::Message>::default_instance()
    }
}

impl OtlpClientConfig {
    pub fn new() -> OtlpClientConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "send_to",
            |m: &OtlpClientConfig| { &m.send_to },
            |m: &mut OtlpClientConfig| { &mut m.send_to },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "request_timeout",
            |m: &OtlpClientConfig| { &m.request_timeout },
            |m: &mut OtlpClientConfig| { &mut m.request_timeout },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "max_in_flight",
            |m: &OtlpClientConfig| { &m.max_in_flight },
            |m: &mut OtlpClientConfig| { &mut m.max_in_flight },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::queue_policy::QueuePolicy>(
            "queue_policy",
            |m: &OtlpClientConfig| { &m.queue_policy },
            |m: &mut OtlpClientConfig| { &mut m.queue_policy },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "batch_max_samples",
            |m: &OtlpClientConfig| { &m.batch_max_samples },
            |m: &mut OtlpClientConfig| { &mut m.batch_max_samples },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "metadata_only",
            |m: &OtlpClientConfig| { &m.metadata_only },
            |m: &mut OtlpClientConfig| { &mut m.metadata_only },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, OtlpAuthConfig>(
            "auth",
            |m: &OtlpClientConfig| { &m.auth },
            |m: &mut OtlpClientConfig| { &mut m.auth },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "request_headers",
            |m: &OtlpClientConfig| { &m.request_headers },
            |m: &mut OtlpClientConfig| { &mut m.request_headers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "convert_metric_name",
            |m: &OtlpClientConfig| { &m.convert_metric_name },
            |m: &mut OtlpClientConfig| { &mut m.convert_metric_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::retry::RetryPolicy>(
            "retry_policy",
            |m: &OtlpClientConfig| { &m.retry_policy },
            |m: &mut OtlpClientConfig| { &mut m.retry_policy },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OtlpClientConfig>(
            "OtlpClientConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OtlpClientConfig {
    const NAME: &'static str = "OtlpClientConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.send_to = is.read_tokio_chars()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.request_timeout)?;
                },
                24 => {
                    self.max_in_flight = ::std::option::Option::Some(is.read_uint64()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.queue_policy)?;
                },
                40 => {
                    self.batch_max_samples = ::std::option::Option::Some(is.read_uint64()?);
                },
                48 => {
                    self.metadata_only = is.read_bool()?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.auth)?;
                },
                66 => {
                    self.request_headers.push(is.read_message()?);
                },
                72 => {
                    self.convert_metric_name = ::std::option::Option::Some(is.read_bool()?);
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.retry_policy)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.send_to.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.send_to);
        }
        if let Some(v) = self.request_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.max_in_flight {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.queue_policy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.batch_max_samples {
            my_size += ::protobuf::rt::uint64_size(5, v);
        }
        if self.metadata_only != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.auth.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.request_headers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.convert_metric_name {
            my_size += 1 + 1;
        }
        if let Some(v) = self.retry_policy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.send_to.is_empty() {
            os.write_string(1, &self.send_to)?;
        }
        if let Some(v) = self.request_timeout.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.max_in_flight {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.queue_policy.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.batch_max_samples {
            os.write_uint64(5, v)?;
        }
        if self.metadata_only != false {
            os.write_bool(6, self.metadata_only)?;
        }
        if let Some(v) = self.auth.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        for v in &self.request_headers {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        if let Some(v) = self.convert_metric_name {
            os.write_bool(9, v)?;
        }
        if let Some(v) = self.retry_policy.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OtlpClientConfig {
        OtlpClientConfig::new()
    }

    fn clear(&mut self) {
        self.send_to.clear();
        self.request_timeout.clear();
        self.max_in_flight = ::std::option::Option::None;
        self.queue_policy.clear();
        self.batch_max_samples = ::std::option::Option::None;
        self.metadata_only = false;
        self.auth.clear();
        self.request_headers.clear();
        self.convert_metric_name = ::std::option::Option::None;
        self.retry_policy.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OtlpClientConfig {
        static instance: OtlpClientConfig = OtlpClientConfig {
            send_to: ::protobuf::Chars::new(),
            request_timeout: ::protobuf::MessageField::none(),
            max_in_flight: ::std::option::Option::None,
            queue_policy: ::protobuf::MessageField::none(),
            batch_max_samples: ::std::option::Option::None,
            metadata_only: false,
            auth: ::protobuf::MessageField::none(),
            request_headers: ::std::vec::Vec::new(),
            convert_metric_name: ::std::option::Option::None,
            retry_policy: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OtlpClientConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OtlpClientConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OtlpClientConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OtlpClientConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `OtlpClientConfig`
pub mod otlp_client_config {
    // @@protoc_insertion_point(message:pulse.config.outflow.v1.OtlpClientConfig.RequestHeader)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct RequestHeader {
        // message fields
        // @@protoc_insertion_point(field:pulse.config.outflow.v1.OtlpClientConfig.RequestHeader.name)
        pub name: ::protobuf::Chars,
        // message oneof groups
        pub value_type: ::std::option::Option<request_header::Value_type>,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.outflow.v1.OtlpClientConfig.RequestHeader.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a RequestHeader {
        fn default() -> &'a RequestHeader {
            <RequestHeader as ::protobuf::Message>::default_instance()
        }
    }

    impl RequestHeader {
        pub fn new() -> RequestHeader {
            ::std::default::Default::default()
        }

        // .pulse.config.common.v1.EnvOrInline value = 2;

        pub fn value(&self) -> &super::super::common::EnvOrInline {
            match self.value_type {
                ::std::option::Option::Some(request_header::Value_type::Value(ref v)) => v,
                _ => <super::super::common::EnvOrInline as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_value(&mut self) {
            self.value_type = ::std::option::Option::None;
        }

        pub fn has_value(&self) -> bool {
            match self.value_type {
                ::std::option::Option::Some(request_header::Value_type::Value(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: super::super::common::EnvOrInline) {
            self.value_type = ::std::option::Option::Some(request_header::Value_type::Value(v))
        }

        // Mutable pointer to the field.
        pub fn mut_value(&mut self) -> &mut super::super::common::EnvOrInline {
            if let ::std::option::Option::Some(request_header::Value_type::Value(_)) = self.value_type {
            } else {
                self.value_type = ::std::option::Option::Some(request_header::Value_type::Value(super::super::common::EnvOrInline::new()));
            }
            match self.value_type {
                ::std::option::Option::Some(request_header::Value_type::Value(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_value(&mut self) -> super::super::common::EnvOrInline {
            if self.has_value() {
                match self.value_type.take() {
                    ::std::option::Option::Some(request_header::Value_type::Value(v)) => v,
                    _ => panic!(),
                }
            } else {
                super::super::common::EnvOrInline::new()
            }
        }

        // bool timestamp = 3;

        pub fn timestamp(&self) -> bool {
            match self.value_type {
                ::std::option::Option::Some(request_header::Value_type::Timestamp(v)) => v,
                _ => false,
            }
        }

        pub fn clear_timestamp(&mut self) {
            self.value_type = ::std::option::Option::None;
        }

        pub fn has_timestamp(&self) -> bool {
            match self.value_type {
                ::std::option::Option::Some(request_header::Value_type::Timestamp(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_timestamp(&mut self, v: bool) {
            self.value_type = ::std::option::Option::Some(request_header::Value_type::Timestamp(v))
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(1);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "name",
                |m: &RequestHeader| { &m.name },
                |m: &mut RequestHeader| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::super::common::EnvOrInline>(
                "value",
                RequestHeader::has_value,
                RequestHeader::value,
                RequestHeader::mut_value,
                RequestHeader::set_value,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
                "timestamp",
                RequestHeader::has_timestamp,
                RequestHeader::timestamp,
                RequestHeader::set_timestamp,
            ));
            oneofs.push(request_header::Value_type::generated_oneof_descriptor_data());
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RequestHeader>(
                "OtlpClientConfig.RequestHeader",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for RequestHeader {
        const NAME: &'static str = "RequestHeader";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = is.read_tokio_chars()?;
                    },
                    18 => {
                        self.value_type = ::std::option::Option::Some(request_header::Value_type::Value(is.read_message()?));
                    },
                    24 => {
                        self.value_type = ::std::option::Option::Some(request_header::Value_type::Timestamp(is.read_bool()?));
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.name.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.name);
            }
            if let ::std::option::Option::Some(ref v) = self.value_type {
                match v {
                    &request_header::Value_type::Value(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &request_header::Value_type::Timestamp(v) => {
                        my_size += 1 + 1;
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.name.is_empty() {
                os.write_string(1, &self.name)?;
            }
            if let ::std::option::Option::Some(ref v) = self.value_type {
                match v {
                    &request_header::Value_type::Value(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                    },
                    &request_header::Value_type::Timestamp(v) => {
                        os.write_bool(3, v)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> RequestHeader {
            RequestHeader::new()
        }

        fn clear(&mut self) {
            self.name.clear();
            self.value_type = ::std::option::Option::None;
            self.value_type = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static RequestHeader {
            static instance: RequestHeader = RequestHeader {
                name: ::protobuf::Chars::new(),
                value_type: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for RequestHeader {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("OtlpClientConfig.RequestHeader").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for RequestHeader {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for RequestHeader {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `RequestHeader`
    pub mod request_header {

        #[derive(Clone,PartialEq,Debug)]
        // @@protoc_insertion_point(oneof:pulse.config.outflow.v1.OtlpClientConfig.RequestHeader.value_type)
        pub enum Value_type {
            // @@protoc_insertion_point(oneof_field:pulse.config.outflow.v1.OtlpClientConfig.RequestHeader.value)
            Value(super::super::super::common::EnvOrInline),
            // @@protoc_insertion_point(oneof_field:pulse.config.outflow.v1.OtlpClientConfig.RequestHeader.timestamp)
            Timestamp(bool),
        }

        impl ::protobuf::Oneof for Value_type {
        }

        impl ::protobuf::OneofFull for Value_type {
            fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| <super::RequestHeader as ::protobuf::MessageFull>::descriptor().oneof_by_name("value_type").unwrap()).clone()
            }
        }

        impl Value_type {
            pub(in super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Value_type>("value_type")
            }
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"pulse/config/outflow/v1/otlp.proto\x12\x17pulse.config.outflow.v1\
    \x1a#pulse/config/common/v1/common.proto\x1a\"pulse/config/common/v1/ret\
    ry.proto\x1a*pulse/config/outflow/v1/queue_policy.proto\x1a\x1egoogle/pr\
    otobuf/duration.proto\x1a\x17validate/validate.proto\"\x86\x03\n\x0eOtlp\
    AuthConfig\x12N\n\x0cbearer_token\x18\x02\x20\x01(\x0b2).pulse.config.co\
    mmon.v1.BearerTokenConfigH\0R\x0bbearerToken\x12I\n\x03aws\x18\x03\x20\
    \x01(\x0b25.pulse.config.outflow.v1.OtlpAuthConfig.AwsAuthConfigH\0R\x03\
    aws\x1a\xc6\x01\n\rAwsAuthConfig\x12Y\n\x07default\x18\x01\x20\x01(\x0b2\
    =.pulse.config.outflow.v1.OtlpAuthConfig.AwsAuthConfig.DefaultH\0R\x07de\
    fault\x1aH\n\x07Default\x12-\n\x0bassume_role\x18\x01\x20\x01(\tH\0R\nas\
    sumeRoleB\x07\xfaB\x04r\x02\x10\x01\x88\x01\x01B\x0e\n\x0c_assume_roleB\
    \x10\n\tauth_type\x12\x03\xf8B\x01B\x10\n\tauth_type\x12\x03\xf8B\x01\"\
    \xce\x06\n\x10OtlpClientConfig\x12\x20\n\x07send_to\x18\x01\x20\x01(\tR\
    \x06sendToB\x07\xfaB\x04r\x02\x10\x01\x12L\n\x0frequest_timeout\x18\x02\
    \x20\x01(\x0b2\x19.google.protobuf.DurationR\x0erequestTimeoutB\x08\xfaB\
    \x05\xaa\x01\x02*\0\x12'\n\rmax_in_flight\x18\x03\x20\x01(\x04H\0R\x0bma\
    xInFlight\x88\x01\x01\x12G\n\x0cqueue_policy\x18\x04\x20\x01(\x0b2$.puls\
    e.config.outflow.v1.QueuePolicyR\x0bqueuePolicy\x12/\n\x11batch_max_samp\
    les\x18\x05\x20\x01(\x04H\x01R\x0fbatchMaxSamples\x88\x01\x01\x12#\n\rme\
    tadata_only\x18\x06\x20\x01(\x08R\x0cmetadataOnly\x12;\n\x04auth\x18\x07\
    \x20\x01(\x0b2'.pulse.config.outflow.v1.OtlpAuthConfigR\x04auth\x12`\n\
    \x0frequest_headers\x18\x08\x20\x03(\x0b27.pulse.config.outflow.v1.OtlpC\
    lientConfig.RequestHeaderR\x0erequestHeaders\x123\n\x13convert_metric_na\
    me\x18\t\x20\x01(\x08H\x02R\x11convertMetricName\x88\x01\x01\x12F\n\x0cr\
    etry_policy\x18\n\x20\x01(\x0b2#.pulse.config.common.v1.RetryPolicyR\x0b\
    retryPolicy\x1a\xa5\x01\n\rRequestHeader\x12\x1b\n\x04name\x18\x01\x20\
    \x01(\tR\x04nameB\x07\xfaB\x04r\x02\x10\x01\x12;\n\x05value\x18\x02\x20\
    \x01(\x0b2#.pulse.config.common.v1.EnvOrInlineH\0R\x05value\x12'\n\ttime\
    stamp\x18\x03\x20\x01(\x08H\0R\ttimestampB\x07\xfaB\x04j\x02\x08\x01B\
    \x11\n\nvalue_type\x12\x03\xf8B\x01B\x10\n\x0e_max_in_flightB\x14\n\x12_\
    batch_max_samplesB\x16\n\x14_convert_metric_nameb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::common::file_descriptor().clone());
            deps.push(super::retry::file_descriptor().clone());
            deps.push(super::queue_policy::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::duration::file_descriptor().clone());
            deps.push(super::validate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(OtlpAuthConfig::generated_message_descriptor_data());
            messages.push(OtlpClientConfig::generated_message_descriptor_data());
            messages.push(otlp_auth_config::AwsAuthConfig::generated_message_descriptor_data());
            messages.push(otlp_auth_config::aws_auth_config::Default::generated_message_descriptor_data());
            messages.push(otlp_client_config::RequestHeader::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
