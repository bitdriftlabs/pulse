// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 29.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `pulse/config/outflow/v1/prom_remote_write.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:pulse.config.outflow.v1.PromRemoteWriteClientConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PromRemoteWriteClientConfig {
    // message fields
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.PromRemoteWriteClientConfig.send_to)
    pub send_to: ::protobuf::Chars,
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.PromRemoteWriteClientConfig.request_timeout)
    pub request_timeout: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.PromRemoteWriteClientConfig.max_in_flight)
    pub max_in_flight: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.PromRemoteWriteClientConfig.queue_policy)
    pub queue_policy: ::protobuf::MessageField<super::queue_policy::QueuePolicy>,
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.PromRemoteWriteClientConfig.batch_max_samples)
    pub batch_max_samples: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.PromRemoteWriteClientConfig.metadata_only)
    pub metadata_only: bool,
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.PromRemoteWriteClientConfig.auth)
    pub auth: ::protobuf::MessageField<super::outflow_common::HttpRemoteWriteAuthConfig>,
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.PromRemoteWriteClientConfig.request_headers)
    pub request_headers: ::std::vec::Vec<super::outflow_common::RequestHeader>,
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.PromRemoteWriteClientConfig.convert_metric_name)
    pub convert_metric_name: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.PromRemoteWriteClientConfig.retry_policy)
    pub retry_policy: ::protobuf::MessageField<super::retry::RetryPolicy>,
    // @@protoc_insertion_point(field:pulse.config.outflow.v1.PromRemoteWriteClientConfig.lyft_specific_config)
    pub lyft_specific_config: ::protobuf::MessageField<prom_remote_write_client_config::LyftSpecificConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.outflow.v1.PromRemoteWriteClientConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PromRemoteWriteClientConfig {
    fn default() -> &'a PromRemoteWriteClientConfig {
        <PromRemoteWriteClientConfig as ::protobuf::Message>::default_instance()
    }
}

impl PromRemoteWriteClientConfig {
    pub fn new() -> PromRemoteWriteClientConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "send_to",
            |m: &PromRemoteWriteClientConfig| { &m.send_to },
            |m: &mut PromRemoteWriteClientConfig| { &mut m.send_to },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "request_timeout",
            |m: &PromRemoteWriteClientConfig| { &m.request_timeout },
            |m: &mut PromRemoteWriteClientConfig| { &mut m.request_timeout },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "max_in_flight",
            |m: &PromRemoteWriteClientConfig| { &m.max_in_flight },
            |m: &mut PromRemoteWriteClientConfig| { &mut m.max_in_flight },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::queue_policy::QueuePolicy>(
            "queue_policy",
            |m: &PromRemoteWriteClientConfig| { &m.queue_policy },
            |m: &mut PromRemoteWriteClientConfig| { &mut m.queue_policy },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "batch_max_samples",
            |m: &PromRemoteWriteClientConfig| { &m.batch_max_samples },
            |m: &mut PromRemoteWriteClientConfig| { &mut m.batch_max_samples },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "metadata_only",
            |m: &PromRemoteWriteClientConfig| { &m.metadata_only },
            |m: &mut PromRemoteWriteClientConfig| { &mut m.metadata_only },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::outflow_common::HttpRemoteWriteAuthConfig>(
            "auth",
            |m: &PromRemoteWriteClientConfig| { &m.auth },
            |m: &mut PromRemoteWriteClientConfig| { &mut m.auth },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "request_headers",
            |m: &PromRemoteWriteClientConfig| { &m.request_headers },
            |m: &mut PromRemoteWriteClientConfig| { &mut m.request_headers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "convert_metric_name",
            |m: &PromRemoteWriteClientConfig| { &m.convert_metric_name },
            |m: &mut PromRemoteWriteClientConfig| { &mut m.convert_metric_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::retry::RetryPolicy>(
            "retry_policy",
            |m: &PromRemoteWriteClientConfig| { &m.retry_policy },
            |m: &mut PromRemoteWriteClientConfig| { &mut m.retry_policy },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, prom_remote_write_client_config::LyftSpecificConfig>(
            "lyft_specific_config",
            |m: &PromRemoteWriteClientConfig| { &m.lyft_specific_config },
            |m: &mut PromRemoteWriteClientConfig| { &mut m.lyft_specific_config },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PromRemoteWriteClientConfig>(
            "PromRemoteWriteClientConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PromRemoteWriteClientConfig {
    const NAME: &'static str = "PromRemoteWriteClientConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.send_to = is.read_tokio_chars()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.request_timeout)?;
                },
                24 => {
                    self.max_in_flight = ::std::option::Option::Some(is.read_uint64()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.queue_policy)?;
                },
                40 => {
                    self.batch_max_samples = ::std::option::Option::Some(is.read_uint64()?);
                },
                48 => {
                    self.metadata_only = is.read_bool()?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.auth)?;
                },
                66 => {
                    self.request_headers.push(is.read_message()?);
                },
                72 => {
                    self.convert_metric_name = ::std::option::Option::Some(is.read_bool()?);
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.retry_policy)?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.lyft_specific_config)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.send_to.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.send_to);
        }
        if let Some(v) = self.request_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.max_in_flight {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.queue_policy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.batch_max_samples {
            my_size += ::protobuf::rt::uint64_size(5, v);
        }
        if self.metadata_only != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.auth.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.request_headers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.convert_metric_name {
            my_size += 1 + 1;
        }
        if let Some(v) = self.retry_policy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.lyft_specific_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.send_to.is_empty() {
            os.write_string(1, &self.send_to)?;
        }
        if let Some(v) = self.request_timeout.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.max_in_flight {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.queue_policy.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.batch_max_samples {
            os.write_uint64(5, v)?;
        }
        if self.metadata_only != false {
            os.write_bool(6, self.metadata_only)?;
        }
        if let Some(v) = self.auth.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        for v in &self.request_headers {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        if let Some(v) = self.convert_metric_name {
            os.write_bool(9, v)?;
        }
        if let Some(v) = self.retry_policy.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if let Some(v) = self.lyft_specific_config.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PromRemoteWriteClientConfig {
        PromRemoteWriteClientConfig::new()
    }

    fn clear(&mut self) {
        self.send_to.clear();
        self.request_timeout.clear();
        self.max_in_flight = ::std::option::Option::None;
        self.queue_policy.clear();
        self.batch_max_samples = ::std::option::Option::None;
        self.metadata_only = false;
        self.auth.clear();
        self.request_headers.clear();
        self.convert_metric_name = ::std::option::Option::None;
        self.retry_policy.clear();
        self.lyft_specific_config.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PromRemoteWriteClientConfig {
        static instance: PromRemoteWriteClientConfig = PromRemoteWriteClientConfig {
            send_to: ::protobuf::Chars::new(),
            request_timeout: ::protobuf::MessageField::none(),
            max_in_flight: ::std::option::Option::None,
            queue_policy: ::protobuf::MessageField::none(),
            batch_max_samples: ::std::option::Option::None,
            metadata_only: false,
            auth: ::protobuf::MessageField::none(),
            request_headers: ::std::vec::Vec::new(),
            convert_metric_name: ::std::option::Option::None,
            retry_policy: ::protobuf::MessageField::none(),
            lyft_specific_config: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PromRemoteWriteClientConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PromRemoteWriteClientConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PromRemoteWriteClientConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PromRemoteWriteClientConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PromRemoteWriteClientConfig`
pub mod prom_remote_write_client_config {
    // @@protoc_insertion_point(message:pulse.config.outflow.v1.PromRemoteWriteClientConfig.LyftSpecificConfig)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct LyftSpecificConfig {
        // message fields
        // @@protoc_insertion_point(field:pulse.config.outflow.v1.PromRemoteWriteClientConfig.LyftSpecificConfig.general_storage_policy)
        pub general_storage_policy: ::protobuf::Chars,
        // @@protoc_insertion_point(field:pulse.config.outflow.v1.PromRemoteWriteClientConfig.LyftSpecificConfig.instance_metrics_storage_policy)
        pub instance_metrics_storage_policy: ::std::option::Option<::protobuf::Chars>,
        // @@protoc_insertion_point(field:pulse.config.outflow.v1.PromRemoteWriteClientConfig.LyftSpecificConfig.cloudwatch_metrics_storage_policy)
        pub cloudwatch_metrics_storage_policy: ::std::option::Option<::protobuf::Chars>,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.outflow.v1.PromRemoteWriteClientConfig.LyftSpecificConfig.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a LyftSpecificConfig {
        fn default() -> &'a LyftSpecificConfig {
            <LyftSpecificConfig as ::protobuf::Message>::default_instance()
        }
    }

    impl LyftSpecificConfig {
        pub fn new() -> LyftSpecificConfig {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "general_storage_policy",
                |m: &LyftSpecificConfig| { &m.general_storage_policy },
                |m: &mut LyftSpecificConfig| { &mut m.general_storage_policy },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "instance_metrics_storage_policy",
                |m: &LyftSpecificConfig| { &m.instance_metrics_storage_policy },
                |m: &mut LyftSpecificConfig| { &mut m.instance_metrics_storage_policy },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "cloudwatch_metrics_storage_policy",
                |m: &LyftSpecificConfig| { &m.cloudwatch_metrics_storage_policy },
                |m: &mut LyftSpecificConfig| { &mut m.cloudwatch_metrics_storage_policy },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LyftSpecificConfig>(
                "PromRemoteWriteClientConfig.LyftSpecificConfig",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for LyftSpecificConfig {
        const NAME: &'static str = "LyftSpecificConfig";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.general_storage_policy = is.read_tokio_chars()?;
                    },
                    18 => {
                        self.instance_metrics_storage_policy = ::std::option::Option::Some(is.read_tokio_chars()?);
                    },
                    26 => {
                        self.cloudwatch_metrics_storage_policy = ::std::option::Option::Some(is.read_tokio_chars()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.general_storage_policy.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.general_storage_policy);
            }
            if let Some(v) = self.instance_metrics_storage_policy.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.cloudwatch_metrics_storage_policy.as_ref() {
                my_size += ::protobuf::rt::string_size(3, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.general_storage_policy.is_empty() {
                os.write_string(1, &self.general_storage_policy)?;
            }
            if let Some(v) = self.instance_metrics_storage_policy.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.cloudwatch_metrics_storage_policy.as_ref() {
                os.write_string(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> LyftSpecificConfig {
            LyftSpecificConfig::new()
        }

        fn clear(&mut self) {
            self.general_storage_policy.clear();
            self.instance_metrics_storage_policy = ::std::option::Option::None;
            self.cloudwatch_metrics_storage_policy = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static LyftSpecificConfig {
            static instance: LyftSpecificConfig = LyftSpecificConfig {
                general_storage_policy: ::protobuf::Chars::new(),
                instance_metrics_storage_policy: ::std::option::Option::None,
                cloudwatch_metrics_storage_policy: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for LyftSpecificConfig {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("PromRemoteWriteClientConfig.LyftSpecificConfig").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for LyftSpecificConfig {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for LyftSpecificConfig {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n/pulse/config/outflow/v1/prom_remote_write.proto\x12\x17pulse.config.o\
    utflow.v1\x1a#pulse/config/common/v1/common.proto\x1a\"pulse/config/comm\
    on/v1/retry.proto\x1a*pulse/config/outflow/v1/queue_policy.proto\x1a,pul\
    se/config/outflow/v1/outflow_common.proto\x1a\x1egoogle/protobuf/duratio\
    n.proto\x1a\x17validate/validate.proto\"\xe2\x08\n\x1bPromRemoteWriteCli\
    entConfig\x12\x20\n\x07send_to\x18\x01\x20\x01(\tR\x06sendToB\x07\xfaB\
    \x04r\x02\x10\x01\x12L\n\x0frequest_timeout\x18\x02\x20\x01(\x0b2\x19.go\
    ogle.protobuf.DurationR\x0erequestTimeoutB\x08\xfaB\x05\xaa\x01\x02*\0\
    \x12'\n\rmax_in_flight\x18\x03\x20\x01(\x04H\0R\x0bmaxInFlight\x88\x01\
    \x01\x12G\n\x0cqueue_policy\x18\x04\x20\x01(\x0b2$.pulse.config.outflow.\
    v1.QueuePolicyR\x0bqueuePolicy\x12/\n\x11batch_max_samples\x18\x05\x20\
    \x01(\x04H\x01R\x0fbatchMaxSamples\x88\x01\x01\x12#\n\rmetadata_only\x18\
    \x06\x20\x01(\x08R\x0cmetadataOnly\x12F\n\x04auth\x18\x07\x20\x01(\x0b22\
    .pulse.config.outflow.v1.HttpRemoteWriteAuthConfigR\x04auth\x12O\n\x0fre\
    quest_headers\x18\x08\x20\x03(\x0b2&.pulse.config.outflow.v1.RequestHead\
    erR\x0erequestHeaders\x123\n\x13convert_metric_name\x18\t\x20\x01(\x08H\
    \x02R\x11convertMetricName\x88\x01\x01\x12F\n\x0cretry_policy\x18\n\x20\
    \x01(\x0b2#.pulse.config.common.v1.RetryPolicyR\x0bretryPolicy\x12y\n\
    \x14lyft_specific_config\x18\x0b\x20\x01(\x0b2G.pulse.config.outflow.v1.\
    PromRemoteWriteClientConfig.LyftSpecificConfigR\x12lyftSpecificConfig\
    \x1a\xb9\x02\n\x12LyftSpecificConfig\x12=\n\x16general_storage_policy\
    \x18\x01\x20\x01(\tR\x14generalStoragePolicyB\x07\xfaB\x04r\x02\x10\x01\
    \x12J\n\x1finstance_metrics_storage_policy\x18\x02\x20\x01(\tH\0R\x1cins\
    tanceMetricsStoragePolicy\x88\x01\x01\x12N\n!cloudwatch_metrics_storage_\
    policy\x18\x03\x20\x01(\tH\x01R\x1ecloudwatchMetricsStoragePolicy\x88\
    \x01\x01B\"\n\x20_instance_metrics_storage_policyB$\n\"_cloudwatch_metri\
    cs_storage_policyB\x10\n\x0e_max_in_flightB\x14\n\x12_batch_max_samplesB\
    \x16\n\x14_convert_metric_nameb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(6);
            deps.push(super::common::file_descriptor().clone());
            deps.push(super::retry::file_descriptor().clone());
            deps.push(super::queue_policy::file_descriptor().clone());
            deps.push(super::outflow_common::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::duration::file_descriptor().clone());
            deps.push(super::validate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(PromRemoteWriteClientConfig::generated_message_descriptor_data());
            messages.push(prom_remote_write_client_config::LyftSpecificConfig::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
