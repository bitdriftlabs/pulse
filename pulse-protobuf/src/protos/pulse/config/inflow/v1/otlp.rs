// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 29.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `pulse/config/inflow/v1/otlp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:pulse.config.inflow.v1.OtlpServerConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OtlpServerConfig {
    // message fields
    // @@protoc_insertion_point(field:pulse.config.inflow.v1.OtlpServerConfig.bind)
    pub bind: ::protobuf::Chars,
    // @@protoc_insertion_point(field:pulse.config.inflow.v1.OtlpServerConfig.downstream_id_source)
    pub downstream_id_source: ::protobuf::MessageField<super::inflow_common::DownstreamIdSource>,
    // @@protoc_insertion_point(field:pulse.config.inflow.v1.OtlpServerConfig.include_resource_attributes)
    pub include_resource_attributes: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:pulse.config.inflow.v1.OtlpServerConfig.include_scope_attributes)
    pub include_scope_attributes: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.inflow.v1.OtlpServerConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OtlpServerConfig {
    fn default() -> &'a OtlpServerConfig {
        <OtlpServerConfig as ::protobuf::Message>::default_instance()
    }
}

impl OtlpServerConfig {
    pub fn new() -> OtlpServerConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bind",
            |m: &OtlpServerConfig| { &m.bind },
            |m: &mut OtlpServerConfig| { &mut m.bind },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::inflow_common::DownstreamIdSource>(
            "downstream_id_source",
            |m: &OtlpServerConfig| { &m.downstream_id_source },
            |m: &mut OtlpServerConfig| { &mut m.downstream_id_source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "include_resource_attributes",
            |m: &OtlpServerConfig| { &m.include_resource_attributes },
            |m: &mut OtlpServerConfig| { &mut m.include_resource_attributes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "include_scope_attributes",
            |m: &OtlpServerConfig| { &m.include_scope_attributes },
            |m: &mut OtlpServerConfig| { &mut m.include_scope_attributes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OtlpServerConfig>(
            "OtlpServerConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OtlpServerConfig {
    const NAME: &'static str = "OtlpServerConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.bind = is.read_tokio_chars()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.downstream_id_source)?;
                },
                24 => {
                    self.include_resource_attributes = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.include_scope_attributes = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.bind.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.bind);
        }
        if let Some(v) = self.downstream_id_source.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.include_resource_attributes {
            my_size += 1 + 1;
        }
        if let Some(v) = self.include_scope_attributes {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.bind.is_empty() {
            os.write_string(1, &self.bind)?;
        }
        if let Some(v) = self.downstream_id_source.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.include_resource_attributes {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.include_scope_attributes {
            os.write_bool(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OtlpServerConfig {
        OtlpServerConfig::new()
    }

    fn clear(&mut self) {
        self.bind.clear();
        self.downstream_id_source.clear();
        self.include_resource_attributes = ::std::option::Option::None;
        self.include_scope_attributes = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OtlpServerConfig {
        static instance: OtlpServerConfig = OtlpServerConfig {
            bind: ::protobuf::Chars::new(),
            downstream_id_source: ::protobuf::MessageField::none(),
            include_resource_attributes: ::std::option::Option::None,
            include_scope_attributes: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OtlpServerConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OtlpServerConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OtlpServerConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OtlpServerConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!pulse/config/inflow/v1/otlp.proto\x12\x16pulse.config.inflow.v1\x1a*p\
    ulse/config/inflow/v1/inflow_common.proto\x1a\x17validate/validate.proto\
    \"\xce\x02\n\x10OtlpServerConfig\x12\x1b\n\x04bind\x18\x01\x20\x01(\tR\
    \x04bindB\x07\xfaB\x04r\x02\x10\x01\x12\\\n\x14downstream_id_source\x18\
    \x02\x20\x01(\x0b2*.pulse.config.inflow.v1.DownstreamIdSourceR\x12downst\
    reamIdSource\x12C\n\x1binclude_resource_attributes\x18\x03\x20\x01(\x08H\
    \0R\x19includeResourceAttributes\x88\x01\x01\x12=\n\x18include_scope_att\
    ributes\x18\x04\x20\x01(\x08H\x01R\x16includeScopeAttributes\x88\x01\x01\
    B\x1e\n\x1c_include_resource_attributesB\x1b\n\x19_include_scope_attribu\
    tesb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::inflow_common::file_descriptor().clone());
            deps.push(super::validate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(OtlpServerConfig::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
