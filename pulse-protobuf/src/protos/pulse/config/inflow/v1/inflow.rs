// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 29.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `pulse/config/inflow/v1/inflow.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:pulse.config.inflow.v1.InflowConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct InflowConfig {
    // message fields
    // @@protoc_insertion_point(field:pulse.config.inflow.v1.InflowConfig.routes)
    pub routes: ::std::vec::Vec<::protobuf::Chars>,
    // message oneof groups
    pub config_type: ::std::option::Option<inflow_config::Config_type>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.inflow.v1.InflowConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a InflowConfig {
    fn default() -> &'a InflowConfig {
        <InflowConfig as ::protobuf::Message>::default_instance()
    }
}

impl InflowConfig {
    pub fn new() -> InflowConfig {
        ::std::default::Default::default()
    }

    // .pulse.config.inflow.v1.MetricGeneratorConfig metric_generator = 2;

    pub fn metric_generator(&self) -> &super::metric_generator::MetricGeneratorConfig {
        match self.config_type {
            ::std::option::Option::Some(inflow_config::Config_type::MetricGenerator(ref v)) => v,
            _ => <super::metric_generator::MetricGeneratorConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_metric_generator(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_metric_generator(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(inflow_config::Config_type::MetricGenerator(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_metric_generator(&mut self, v: super::metric_generator::MetricGeneratorConfig) {
        self.config_type = ::std::option::Option::Some(inflow_config::Config_type::MetricGenerator(v))
    }

    // Mutable pointer to the field.
    pub fn mut_metric_generator(&mut self) -> &mut super::metric_generator::MetricGeneratorConfig {
        if let ::std::option::Option::Some(inflow_config::Config_type::MetricGenerator(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(inflow_config::Config_type::MetricGenerator(super::metric_generator::MetricGeneratorConfig::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(inflow_config::Config_type::MetricGenerator(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_metric_generator(&mut self) -> super::metric_generator::MetricGeneratorConfig {
        if self.has_metric_generator() {
            match self.config_type.take() {
                ::std::option::Option::Some(inflow_config::Config_type::MetricGenerator(v)) => v,
                _ => panic!(),
            }
        } else {
            super::metric_generator::MetricGeneratorConfig::new()
        }
    }

    // .pulse.config.inflow.v1.PromRemoteWriteServerConfig prom_remote_write = 3;

    pub fn prom_remote_write(&self) -> &super::prom_remote_write::PromRemoteWriteServerConfig {
        match self.config_type {
            ::std::option::Option::Some(inflow_config::Config_type::PromRemoteWrite(ref v)) => v,
            _ => <super::prom_remote_write::PromRemoteWriteServerConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_prom_remote_write(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_prom_remote_write(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(inflow_config::Config_type::PromRemoteWrite(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_prom_remote_write(&mut self, v: super::prom_remote_write::PromRemoteWriteServerConfig) {
        self.config_type = ::std::option::Option::Some(inflow_config::Config_type::PromRemoteWrite(v))
    }

    // Mutable pointer to the field.
    pub fn mut_prom_remote_write(&mut self) -> &mut super::prom_remote_write::PromRemoteWriteServerConfig {
        if let ::std::option::Option::Some(inflow_config::Config_type::PromRemoteWrite(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(inflow_config::Config_type::PromRemoteWrite(super::prom_remote_write::PromRemoteWriteServerConfig::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(inflow_config::Config_type::PromRemoteWrite(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_prom_remote_write(&mut self) -> super::prom_remote_write::PromRemoteWriteServerConfig {
        if self.has_prom_remote_write() {
            match self.config_type.take() {
                ::std::option::Option::Some(inflow_config::Config_type::PromRemoteWrite(v)) => v,
                _ => panic!(),
            }
        } else {
            super::prom_remote_write::PromRemoteWriteServerConfig::new()
        }
    }

    // .pulse.config.inflow.v1.TcpServerConfig tcp = 4;

    pub fn tcp(&self) -> &super::wire::TcpServerConfig {
        match self.config_type {
            ::std::option::Option::Some(inflow_config::Config_type::Tcp(ref v)) => v,
            _ => <super::wire::TcpServerConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_tcp(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_tcp(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(inflow_config::Config_type::Tcp(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_tcp(&mut self, v: super::wire::TcpServerConfig) {
        self.config_type = ::std::option::Option::Some(inflow_config::Config_type::Tcp(v))
    }

    // Mutable pointer to the field.
    pub fn mut_tcp(&mut self) -> &mut super::wire::TcpServerConfig {
        if let ::std::option::Option::Some(inflow_config::Config_type::Tcp(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(inflow_config::Config_type::Tcp(super::wire::TcpServerConfig::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(inflow_config::Config_type::Tcp(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_tcp(&mut self) -> super::wire::TcpServerConfig {
        if self.has_tcp() {
            match self.config_type.take() {
                ::std::option::Option::Some(inflow_config::Config_type::Tcp(v)) => v,
                _ => panic!(),
            }
        } else {
            super::wire::TcpServerConfig::new()
        }
    }

    // .pulse.config.inflow.v1.UdpServerConfig udp = 5;

    pub fn udp(&self) -> &super::wire::UdpServerConfig {
        match self.config_type {
            ::std::option::Option::Some(inflow_config::Config_type::Udp(ref v)) => v,
            _ => <super::wire::UdpServerConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_udp(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_udp(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(inflow_config::Config_type::Udp(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_udp(&mut self, v: super::wire::UdpServerConfig) {
        self.config_type = ::std::option::Option::Some(inflow_config::Config_type::Udp(v))
    }

    // Mutable pointer to the field.
    pub fn mut_udp(&mut self) -> &mut super::wire::UdpServerConfig {
        if let ::std::option::Option::Some(inflow_config::Config_type::Udp(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(inflow_config::Config_type::Udp(super::wire::UdpServerConfig::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(inflow_config::Config_type::Udp(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_udp(&mut self) -> super::wire::UdpServerConfig {
        if self.has_udp() {
            match self.config_type.take() {
                ::std::option::Option::Some(inflow_config::Config_type::Udp(v)) => v,
                _ => panic!(),
            }
        } else {
            super::wire::UdpServerConfig::new()
        }
    }

    // .pulse.config.inflow.v1.UnixServerConfig unix = 6;

    pub fn unix(&self) -> &super::wire::UnixServerConfig {
        match self.config_type {
            ::std::option::Option::Some(inflow_config::Config_type::Unix(ref v)) => v,
            _ => <super::wire::UnixServerConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_unix(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_unix(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(inflow_config::Config_type::Unix(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_unix(&mut self, v: super::wire::UnixServerConfig) {
        self.config_type = ::std::option::Option::Some(inflow_config::Config_type::Unix(v))
    }

    // Mutable pointer to the field.
    pub fn mut_unix(&mut self) -> &mut super::wire::UnixServerConfig {
        if let ::std::option::Option::Some(inflow_config::Config_type::Unix(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(inflow_config::Config_type::Unix(super::wire::UnixServerConfig::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(inflow_config::Config_type::Unix(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_unix(&mut self) -> super::wire::UnixServerConfig {
        if self.has_unix() {
            match self.config_type.take() {
                ::std::option::Option::Some(inflow_config::Config_type::Unix(v)) => v,
                _ => panic!(),
            }
        } else {
            super::wire::UnixServerConfig::new()
        }
    }

    // .pulse.config.inflow.v1.KubernetesPrometheusConfig k8s_prom = 7;

    pub fn k8s_prom(&self) -> &super::k8s_prom::KubernetesPrometheusConfig {
        match self.config_type {
            ::std::option::Option::Some(inflow_config::Config_type::K8sProm(ref v)) => v,
            _ => <super::k8s_prom::KubernetesPrometheusConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_k8s_prom(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_k8s_prom(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(inflow_config::Config_type::K8sProm(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_k8s_prom(&mut self, v: super::k8s_prom::KubernetesPrometheusConfig) {
        self.config_type = ::std::option::Option::Some(inflow_config::Config_type::K8sProm(v))
    }

    // Mutable pointer to the field.
    pub fn mut_k8s_prom(&mut self) -> &mut super::k8s_prom::KubernetesPrometheusConfig {
        if let ::std::option::Option::Some(inflow_config::Config_type::K8sProm(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(inflow_config::Config_type::K8sProm(super::k8s_prom::KubernetesPrometheusConfig::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(inflow_config::Config_type::K8sProm(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_k8s_prom(&mut self) -> super::k8s_prom::KubernetesPrometheusConfig {
        if self.has_k8s_prom() {
            match self.config_type.take() {
                ::std::option::Option::Some(inflow_config::Config_type::K8sProm(v)) => v,
                _ => panic!(),
            }
        } else {
            super::k8s_prom::KubernetesPrometheusConfig::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "routes",
            |m: &InflowConfig| { &m.routes },
            |m: &mut InflowConfig| { &mut m.routes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::metric_generator::MetricGeneratorConfig>(
            "metric_generator",
            InflowConfig::has_metric_generator,
            InflowConfig::metric_generator,
            InflowConfig::mut_metric_generator,
            InflowConfig::set_metric_generator,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::prom_remote_write::PromRemoteWriteServerConfig>(
            "prom_remote_write",
            InflowConfig::has_prom_remote_write,
            InflowConfig::prom_remote_write,
            InflowConfig::mut_prom_remote_write,
            InflowConfig::set_prom_remote_write,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::wire::TcpServerConfig>(
            "tcp",
            InflowConfig::has_tcp,
            InflowConfig::tcp,
            InflowConfig::mut_tcp,
            InflowConfig::set_tcp,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::wire::UdpServerConfig>(
            "udp",
            InflowConfig::has_udp,
            InflowConfig::udp,
            InflowConfig::mut_udp,
            InflowConfig::set_udp,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::wire::UnixServerConfig>(
            "unix",
            InflowConfig::has_unix,
            InflowConfig::unix,
            InflowConfig::mut_unix,
            InflowConfig::set_unix,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::k8s_prom::KubernetesPrometheusConfig>(
            "k8s_prom",
            InflowConfig::has_k8s_prom,
            InflowConfig::k8s_prom,
            InflowConfig::mut_k8s_prom,
            InflowConfig::set_k8s_prom,
        ));
        oneofs.push(inflow_config::Config_type::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InflowConfig>(
            "InflowConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for InflowConfig {
    const NAME: &'static str = "InflowConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.routes.push(is.read_tokio_chars()?);
                },
                18 => {
                    self.config_type = ::std::option::Option::Some(inflow_config::Config_type::MetricGenerator(is.read_message()?));
                },
                26 => {
                    self.config_type = ::std::option::Option::Some(inflow_config::Config_type::PromRemoteWrite(is.read_message()?));
                },
                34 => {
                    self.config_type = ::std::option::Option::Some(inflow_config::Config_type::Tcp(is.read_message()?));
                },
                42 => {
                    self.config_type = ::std::option::Option::Some(inflow_config::Config_type::Udp(is.read_message()?));
                },
                50 => {
                    self.config_type = ::std::option::Option::Some(inflow_config::Config_type::Unix(is.read_message()?));
                },
                58 => {
                    self.config_type = ::std::option::Option::Some(inflow_config::Config_type::K8sProm(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.routes {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &inflow_config::Config_type::MetricGenerator(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &inflow_config::Config_type::PromRemoteWrite(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &inflow_config::Config_type::Tcp(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &inflow_config::Config_type::Udp(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &inflow_config::Config_type::Unix(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &inflow_config::Config_type::K8sProm(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.routes {
            os.write_string(1, &v)?;
        };
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &inflow_config::Config_type::MetricGenerator(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &inflow_config::Config_type::PromRemoteWrite(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &inflow_config::Config_type::Tcp(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &inflow_config::Config_type::Udp(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &inflow_config::Config_type::Unix(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &inflow_config::Config_type::K8sProm(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> InflowConfig {
        InflowConfig::new()
    }

    fn clear(&mut self) {
        self.routes.clear();
        self.config_type = ::std::option::Option::None;
        self.config_type = ::std::option::Option::None;
        self.config_type = ::std::option::Option::None;
        self.config_type = ::std::option::Option::None;
        self.config_type = ::std::option::Option::None;
        self.config_type = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static InflowConfig {
        static instance: InflowConfig = InflowConfig {
            routes: ::std::vec::Vec::new(),
            config_type: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for InflowConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("InflowConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for InflowConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InflowConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `InflowConfig`
pub mod inflow_config {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:pulse.config.inflow.v1.InflowConfig.config_type)
    pub enum Config_type {
        // @@protoc_insertion_point(oneof_field:pulse.config.inflow.v1.InflowConfig.metric_generator)
        MetricGenerator(super::super::metric_generator::MetricGeneratorConfig),
        // @@protoc_insertion_point(oneof_field:pulse.config.inflow.v1.InflowConfig.prom_remote_write)
        PromRemoteWrite(super::super::prom_remote_write::PromRemoteWriteServerConfig),
        // @@protoc_insertion_point(oneof_field:pulse.config.inflow.v1.InflowConfig.tcp)
        Tcp(super::super::wire::TcpServerConfig),
        // @@protoc_insertion_point(oneof_field:pulse.config.inflow.v1.InflowConfig.udp)
        Udp(super::super::wire::UdpServerConfig),
        // @@protoc_insertion_point(oneof_field:pulse.config.inflow.v1.InflowConfig.unix)
        Unix(super::super::wire::UnixServerConfig),
        // @@protoc_insertion_point(oneof_field:pulse.config.inflow.v1.InflowConfig.k8s_prom)
        K8sProm(super::super::k8s_prom::KubernetesPrometheusConfig),
    }

    impl ::protobuf::Oneof for Config_type {
    }

    impl ::protobuf::OneofFull for Config_type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::InflowConfig as ::protobuf::MessageFull>::descriptor().oneof_by_name("config_type").unwrap()).clone()
        }
    }

    impl Config_type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Config_type>("config_type")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#pulse/config/inflow/v1/inflow.proto\x12\x16pulse.config.inflow.v1\x1a\
    %pulse/config/inflow/v1/k8s_prom.proto\x1a-pulse/config/inflow/v1/metric\
    _generator.proto\x1a.pulse/config/inflow/v1/prom_remote_write.proto\x1a!\
    pulse/config/inflow/v1/wire.proto\x1a\x17validate/validate.proto\"\x84\
    \x04\n\x0cInflowConfig\x12\x16\n\x06routes\x18\x01\x20\x03(\tR\x06routes\
    \x12Z\n\x10metric_generator\x18\x02\x20\x01(\x0b2-.pulse.config.inflow.v\
    1.MetricGeneratorConfigH\0R\x0fmetricGenerator\x12a\n\x11prom_remote_wri\
    te\x18\x03\x20\x01(\x0b23.pulse.config.inflow.v1.PromRemoteWriteServerCo\
    nfigH\0R\x0fpromRemoteWrite\x12;\n\x03tcp\x18\x04\x20\x01(\x0b2'.pulse.c\
    onfig.inflow.v1.TcpServerConfigH\0R\x03tcp\x12;\n\x03udp\x18\x05\x20\x01\
    (\x0b2'.pulse.config.inflow.v1.UdpServerConfigH\0R\x03udp\x12>\n\x04unix\
    \x18\x06\x20\x01(\x0b2(.pulse.config.inflow.v1.UnixServerConfigH\0R\x04u\
    nix\x12O\n\x08k8s_prom\x18\x07\x20\x01(\x0b22.pulse.config.inflow.v1.Kub\
    ernetesPrometheusConfigH\0R\x07k8sPromB\x12\n\x0bconfig_type\x12\x03\xf8\
    B\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::k8s_prom::file_descriptor().clone());
            deps.push(super::metric_generator::file_descriptor().clone());
            deps.push(super::prom_remote_write::file_descriptor().clone());
            deps.push(super::wire::file_descriptor().clone());
            deps.push(super::validate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(InflowConfig::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
