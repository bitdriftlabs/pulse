// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 29.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `pulse/config/inflow/v1/k8s_prom.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:pulse.config.inflow.v1.KubernetesPrometheusConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KubernetesPrometheusConfig {
    // message fields
    // @@protoc_insertion_point(field:pulse.config.inflow.v1.KubernetesPrometheusConfig.scrape_interval)
    pub scrape_interval: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // @@protoc_insertion_point(field:pulse.config.inflow.v1.KubernetesPrometheusConfig.emit_up_metric)
    pub emit_up_metric: bool,
    // message oneof groups
    pub target: ::std::option::Option<kubernetes_prometheus_config::Target>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KubernetesPrometheusConfig {
    fn default() -> &'a KubernetesPrometheusConfig {
        <KubernetesPrometheusConfig as ::protobuf::Message>::default_instance()
    }
}

impl KubernetesPrometheusConfig {
    pub fn new() -> KubernetesPrometheusConfig {
        ::std::default::Default::default()
    }

    // .pulse.config.inflow.v1.KubernetesPrometheusConfig.Endpoint endpoint = 2;

    pub fn endpoint(&self) -> &kubernetes_prometheus_config::Endpoint {
        match self.target {
            ::std::option::Option::Some(kubernetes_prometheus_config::Target::Endpoint(ref v)) => v,
            _ => <kubernetes_prometheus_config::Endpoint as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_endpoint(&mut self) {
        self.target = ::std::option::Option::None;
    }

    pub fn has_endpoint(&self) -> bool {
        match self.target {
            ::std::option::Option::Some(kubernetes_prometheus_config::Target::Endpoint(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_endpoint(&mut self, v: kubernetes_prometheus_config::Endpoint) {
        self.target = ::std::option::Option::Some(kubernetes_prometheus_config::Target::Endpoint(v))
    }

    // Mutable pointer to the field.
    pub fn mut_endpoint(&mut self) -> &mut kubernetes_prometheus_config::Endpoint {
        if let ::std::option::Option::Some(kubernetes_prometheus_config::Target::Endpoint(_)) = self.target {
        } else {
            self.target = ::std::option::Option::Some(kubernetes_prometheus_config::Target::Endpoint(kubernetes_prometheus_config::Endpoint::new()));
        }
        match self.target {
            ::std::option::Option::Some(kubernetes_prometheus_config::Target::Endpoint(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_endpoint(&mut self) -> kubernetes_prometheus_config::Endpoint {
        if self.has_endpoint() {
            match self.target.take() {
                ::std::option::Option::Some(kubernetes_prometheus_config::Target::Endpoint(v)) => v,
                _ => panic!(),
            }
        } else {
            kubernetes_prometheus_config::Endpoint::new()
        }
    }

    // .pulse.config.inflow.v1.KubernetesPrometheusConfig.Node node = 3;

    pub fn node(&self) -> &kubernetes_prometheus_config::Node {
        match self.target {
            ::std::option::Option::Some(kubernetes_prometheus_config::Target::Node(ref v)) => v,
            _ => <kubernetes_prometheus_config::Node as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_node(&mut self) {
        self.target = ::std::option::Option::None;
    }

    pub fn has_node(&self) -> bool {
        match self.target {
            ::std::option::Option::Some(kubernetes_prometheus_config::Target::Node(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_node(&mut self, v: kubernetes_prometheus_config::Node) {
        self.target = ::std::option::Option::Some(kubernetes_prometheus_config::Target::Node(v))
    }

    // Mutable pointer to the field.
    pub fn mut_node(&mut self) -> &mut kubernetes_prometheus_config::Node {
        if let ::std::option::Option::Some(kubernetes_prometheus_config::Target::Node(_)) = self.target {
        } else {
            self.target = ::std::option::Option::Some(kubernetes_prometheus_config::Target::Node(kubernetes_prometheus_config::Node::new()));
        }
        match self.target {
            ::std::option::Option::Some(kubernetes_prometheus_config::Target::Node(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_node(&mut self) -> kubernetes_prometheus_config::Node {
        if self.has_node() {
            match self.target.take() {
                ::std::option::Option::Some(kubernetes_prometheus_config::Target::Node(v)) => v,
                _ => panic!(),
            }
        } else {
            kubernetes_prometheus_config::Node::new()
        }
    }

    // .pulse.config.inflow.v1.KubernetesPrometheusConfig.Pod pod = 4;

    pub fn pod(&self) -> &kubernetes_prometheus_config::Pod {
        match self.target {
            ::std::option::Option::Some(kubernetes_prometheus_config::Target::Pod(ref v)) => v,
            _ => <kubernetes_prometheus_config::Pod as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_pod(&mut self) {
        self.target = ::std::option::Option::None;
    }

    pub fn has_pod(&self) -> bool {
        match self.target {
            ::std::option::Option::Some(kubernetes_prometheus_config::Target::Pod(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pod(&mut self, v: kubernetes_prometheus_config::Pod) {
        self.target = ::std::option::Option::Some(kubernetes_prometheus_config::Target::Pod(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pod(&mut self) -> &mut kubernetes_prometheus_config::Pod {
        if let ::std::option::Option::Some(kubernetes_prometheus_config::Target::Pod(_)) = self.target {
        } else {
            self.target = ::std::option::Option::Some(kubernetes_prometheus_config::Target::Pod(kubernetes_prometheus_config::Pod::new()));
        }
        match self.target {
            ::std::option::Option::Some(kubernetes_prometheus_config::Target::Pod(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pod(&mut self) -> kubernetes_prometheus_config::Pod {
        if self.has_pod() {
            match self.target.take() {
                ::std::option::Option::Some(kubernetes_prometheus_config::Target::Pod(v)) => v,
                _ => panic!(),
            }
        } else {
            kubernetes_prometheus_config::Pod::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "scrape_interval",
            |m: &KubernetesPrometheusConfig| { &m.scrape_interval },
            |m: &mut KubernetesPrometheusConfig| { &mut m.scrape_interval },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, kubernetes_prometheus_config::Endpoint>(
            "endpoint",
            KubernetesPrometheusConfig::has_endpoint,
            KubernetesPrometheusConfig::endpoint,
            KubernetesPrometheusConfig::mut_endpoint,
            KubernetesPrometheusConfig::set_endpoint,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, kubernetes_prometheus_config::Node>(
            "node",
            KubernetesPrometheusConfig::has_node,
            KubernetesPrometheusConfig::node,
            KubernetesPrometheusConfig::mut_node,
            KubernetesPrometheusConfig::set_node,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, kubernetes_prometheus_config::Pod>(
            "pod",
            KubernetesPrometheusConfig::has_pod,
            KubernetesPrometheusConfig::pod,
            KubernetesPrometheusConfig::mut_pod,
            KubernetesPrometheusConfig::set_pod,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "emit_up_metric",
            |m: &KubernetesPrometheusConfig| { &m.emit_up_metric },
            |m: &mut KubernetesPrometheusConfig| { &mut m.emit_up_metric },
        ));
        oneofs.push(kubernetes_prometheus_config::Target::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KubernetesPrometheusConfig>(
            "KubernetesPrometheusConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KubernetesPrometheusConfig {
    const NAME: &'static str = "KubernetesPrometheusConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.scrape_interval)?;
                },
                18 => {
                    self.target = ::std::option::Option::Some(kubernetes_prometheus_config::Target::Endpoint(is.read_message()?));
                },
                26 => {
                    self.target = ::std::option::Option::Some(kubernetes_prometheus_config::Target::Node(is.read_message()?));
                },
                34 => {
                    self.target = ::std::option::Option::Some(kubernetes_prometheus_config::Target::Pod(is.read_message()?));
                },
                40 => {
                    self.emit_up_metric = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.scrape_interval.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.emit_up_metric != false {
            my_size += 1 + 1;
        }
        if let ::std::option::Option::Some(ref v) = self.target {
            match v {
                &kubernetes_prometheus_config::Target::Endpoint(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kubernetes_prometheus_config::Target::Node(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kubernetes_prometheus_config::Target::Pod(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.scrape_interval.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.emit_up_metric != false {
            os.write_bool(5, self.emit_up_metric)?;
        }
        if let ::std::option::Option::Some(ref v) = self.target {
            match v {
                &kubernetes_prometheus_config::Target::Endpoint(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &kubernetes_prometheus_config::Target::Node(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &kubernetes_prometheus_config::Target::Pod(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KubernetesPrometheusConfig {
        KubernetesPrometheusConfig::new()
    }

    fn clear(&mut self) {
        self.scrape_interval.clear();
        self.target = ::std::option::Option::None;
        self.target = ::std::option::Option::None;
        self.target = ::std::option::Option::None;
        self.emit_up_metric = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KubernetesPrometheusConfig {
        static instance: KubernetesPrometheusConfig = KubernetesPrometheusConfig {
            scrape_interval: ::protobuf::MessageField::none(),
            emit_up_metric: false,
            target: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KubernetesPrometheusConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KubernetesPrometheusConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KubernetesPrometheusConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KubernetesPrometheusConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `KubernetesPrometheusConfig`
pub mod kubernetes_prometheus_config {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:pulse.config.inflow.v1.KubernetesPrometheusConfig.target)
    pub enum Target {
        // @@protoc_insertion_point(oneof_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.endpoint)
        Endpoint(Endpoint),
        // @@protoc_insertion_point(oneof_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.node)
        Node(Node),
        // @@protoc_insertion_point(oneof_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.pod)
        Pod(Pod),
    }

    impl ::protobuf::Oneof for Target {
    }

    impl ::protobuf::OneofFull for Target {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::KubernetesPrometheusConfig as ::protobuf::MessageFull>::descriptor().oneof_by_name("target").unwrap()).clone()
        }
    }

    impl Target {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Target>("target")
        }
    }
    // @@protoc_insertion_point(message:pulse.config.inflow.v1.KubernetesPrometheusConfig.Endpoint)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Endpoint {
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.Endpoint.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Endpoint {
        fn default() -> &'a Endpoint {
            <Endpoint as ::protobuf::Message>::default_instance()
        }
    }

    impl Endpoint {
        pub fn new() -> Endpoint {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(0);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Endpoint>(
                "KubernetesPrometheusConfig.Endpoint",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Endpoint {
        const NAME: &'static str = "Endpoint";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Endpoint {
            Endpoint::new()
        }

        fn clear(&mut self) {
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Endpoint {
            static instance: Endpoint = Endpoint {
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Endpoint {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("KubernetesPrometheusConfig.Endpoint").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Endpoint {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Endpoint {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:pulse.config.inflow.v1.KubernetesPrometheusConfig.Node)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Node {
        // message fields
        // @@protoc_insertion_point(field:pulse.config.inflow.v1.KubernetesPrometheusConfig.Node.path)
        pub path: ::protobuf::Chars,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.Node.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Node {
        fn default() -> &'a Node {
            <Node as ::protobuf::Message>::default_instance()
        }
    }

    impl Node {
        pub fn new() -> Node {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "path",
                |m: &Node| { &m.path },
                |m: &mut Node| { &mut m.path },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Node>(
                "KubernetesPrometheusConfig.Node",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Node {
        const NAME: &'static str = "Node";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.path = is.read_tokio_chars()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.path.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.path);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.path.is_empty() {
                os.write_string(1, &self.path)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Node {
            Node::new()
        }

        fn clear(&mut self) {
            self.path.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Node {
            static instance: Node = Node {
                path: ::protobuf::Chars::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Node {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("KubernetesPrometheusConfig.Node").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Node {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Node {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:pulse.config.inflow.v1.KubernetesPrometheusConfig.Pod)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Pod {
        // message fields
        // @@protoc_insertion_point(field:pulse.config.inflow.v1.KubernetesPrometheusConfig.Pod.inclusion_filters)
        pub inclusion_filters: ::std::vec::Vec<pod::InclusionFilter>,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.Pod.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Pod {
        fn default() -> &'a Pod {
            <Pod as ::protobuf::Message>::default_instance()
        }
    }

    impl Pod {
        pub fn new() -> Pod {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "inclusion_filters",
                |m: &Pod| { &m.inclusion_filters },
                |m: &mut Pod| { &mut m.inclusion_filters },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Pod>(
                "KubernetesPrometheusConfig.Pod",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Pod {
        const NAME: &'static str = "Pod";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.inclusion_filters.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for value in &self.inclusion_filters {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.inclusion_filters {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Pod {
            Pod::new()
        }

        fn clear(&mut self) {
            self.inclusion_filters.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Pod {
            static instance: Pod = Pod {
                inclusion_filters: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Pod {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("KubernetesPrometheusConfig.Pod").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Pod {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Pod {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Pod`
    pub mod pod {
        // @@protoc_insertion_point(message:pulse.config.inflow.v1.KubernetesPrometheusConfig.Pod.InclusionFilter)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct InclusionFilter {
            // message oneof groups
            pub filter_type: ::std::option::Option<inclusion_filter::Filter_type>,
            // special fields
            // @@protoc_insertion_point(special_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.Pod.InclusionFilter.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a InclusionFilter {
            fn default() -> &'a InclusionFilter {
                <InclusionFilter as ::protobuf::Message>::default_instance()
            }
        }

        impl InclusionFilter {
            pub fn new() -> InclusionFilter {
                ::std::default::Default::default()
            }

            // string container_port_name_regex = 1;

            pub fn container_port_name_regex(&self) -> &str {
                match self.filter_type {
                    ::std::option::Option::Some(inclusion_filter::Filter_type::ContainerPortNameRegex(ref v)) => v,
                    _ => "",
                }
            }

            pub fn clear_container_port_name_regex(&mut self) {
                self.filter_type = ::std::option::Option::None;
            }

            pub fn has_container_port_name_regex(&self) -> bool {
                match self.filter_type {
                    ::std::option::Option::Some(inclusion_filter::Filter_type::ContainerPortNameRegex(..)) => true,
                    _ => false,
                }
            }

            // Param is passed by value, moved
            pub fn set_container_port_name_regex(&mut self, v: ::protobuf::Chars) {
                self.filter_type = ::std::option::Option::Some(inclusion_filter::Filter_type::ContainerPortNameRegex(v))
            }

            // Mutable pointer to the field.
            pub fn mut_container_port_name_regex(&mut self) -> &mut ::protobuf::Chars {
                if let ::std::option::Option::Some(inclusion_filter::Filter_type::ContainerPortNameRegex(_)) = self.filter_type {
                } else {
                    self.filter_type = ::std::option::Option::Some(inclusion_filter::Filter_type::ContainerPortNameRegex(::protobuf::Chars::new()));
                }
                match self.filter_type {
                    ::std::option::Option::Some(inclusion_filter::Filter_type::ContainerPortNameRegex(ref mut v)) => v,
                    _ => panic!(),
                }
            }

            // Take field
            pub fn take_container_port_name_regex(&mut self) -> ::protobuf::Chars {
                if self.has_container_port_name_regex() {
                    match self.filter_type.take() {
                        ::std::option::Option::Some(inclusion_filter::Filter_type::ContainerPortNameRegex(v)) => v,
                        _ => panic!(),
                    }
                } else {
                    ::protobuf::Chars::new()
                }
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(1);
                let mut oneofs = ::std::vec::Vec::with_capacity(1);
                fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
                    "container_port_name_regex",
                    InclusionFilter::has_container_port_name_regex,
                    InclusionFilter::container_port_name_regex,
                    InclusionFilter::set_container_port_name_regex,
                ));
                oneofs.push(inclusion_filter::Filter_type::generated_oneof_descriptor_data());
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InclusionFilter>(
                    "KubernetesPrometheusConfig.Pod.InclusionFilter",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for InclusionFilter {
            const NAME: &'static str = "InclusionFilter";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.filter_type = ::std::option::Option::Some(inclusion_filter::Filter_type::ContainerPortNameRegex(is.read_tokio_chars()?));
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let ::std::option::Option::Some(ref v) = self.filter_type {
                    match v {
                        &inclusion_filter::Filter_type::ContainerPortNameRegex(ref v) => {
                            my_size += ::protobuf::rt::string_size(1, &v);
                        },
                    };
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let ::std::option::Option::Some(ref v) = self.filter_type {
                    match v {
                        &inclusion_filter::Filter_type::ContainerPortNameRegex(ref v) => {
                            os.write_string(1, v)?;
                        },
                    };
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> InclusionFilter {
                InclusionFilter::new()
            }

            fn clear(&mut self) {
                self.filter_type = ::std::option::Option::None;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static InclusionFilter {
                static instance: InclusionFilter = InclusionFilter {
                    filter_type: ::std::option::Option::None,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for InclusionFilter {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("KubernetesPrometheusConfig.Pod.InclusionFilter").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for InclusionFilter {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for InclusionFilter {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        /// Nested message and enums of message `InclusionFilter`
        pub mod inclusion_filter {

            #[derive(Clone,PartialEq,Debug)]
            // @@protoc_insertion_point(oneof:pulse.config.inflow.v1.KubernetesPrometheusConfig.Pod.InclusionFilter.filter_type)
            pub enum Filter_type {
                // @@protoc_insertion_point(oneof_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.Pod.InclusionFilter.container_port_name_regex)
                ContainerPortNameRegex(::protobuf::Chars),
            }

            impl ::protobuf::Oneof for Filter_type {
            }

            impl ::protobuf::OneofFull for Filter_type {
                fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                    static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                    descriptor.get(|| <super::InclusionFilter as ::protobuf::MessageFull>::descriptor().oneof_by_name("filter_type").unwrap()).clone()
                }
            }

            impl Filter_type {
                pub(in super::super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                    ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Filter_type>("filter_type")
                }
            }
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%pulse/config/inflow/v1/k8s_prom.proto\x12\x16pulse.config.inflow.v1\
    \x1a\x1egoogle/protobuf/duration.proto\x1a\x17validate/validate.proto\"\
    \xa7\x05\n\x1aKubernetesPrometheusConfig\x12L\n\x0fscrape_interval\x18\
    \x01\x20\x01(\x0b2\x19.google.protobuf.DurationR\x0escrapeIntervalB\x08\
    \xfaB\x05\x8a\x01\x02\x10\x01\x12Y\n\x08endpoint\x18\x02\x20\x01(\x0b2;.\
    pulse.config.inflow.v1.KubernetesPrometheusConfig.EndpointH\0R\x08endpoi\
    nt\x12M\n\x04node\x18\x03\x20\x01(\x0b27.pulse.config.inflow.v1.Kubernet\
    esPrometheusConfig.NodeH\0R\x04node\x12J\n\x03pod\x18\x04\x20\x01(\x0b26\
    .pulse.config.inflow.v1.KubernetesPrometheusConfig.PodH\0R\x03pod\x12$\n\
    \x0eemit_up_metric\x18\x05\x20\x01(\x08R\x0cemitUpMetric\x1a\n\n\x08Endp\
    oint\x1a#\n\x04Node\x12\x1b\n\x04path\x18\x01\x20\x01(\tR\x04pathB\x07\
    \xfaB\x04r\x02\x10\x01\x1a\xde\x01\n\x03Pod\x12s\n\x11inclusion_filters\
    \x18\x01\x20\x03(\x0b2F.pulse.config.inflow.v1.KubernetesPrometheusConfi\
    g.Pod.InclusionFilterR\x10inclusionFilters\x1ab\n\x0fInclusionFilter\x12\
    ;\n\x19container_port_name_regex\x18\x01\x20\x01(\tH\0R\x16containerPort\
    NameRegexB\x12\n\x0bfilter_type\x12\x03\xf8B\x01B\r\n\x06target\x12\x03\
    \xf8B\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(::protobuf::well_known_types::duration::file_descriptor().clone());
            deps.push(super::validate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(KubernetesPrometheusConfig::generated_message_descriptor_data());
            messages.push(kubernetes_prometheus_config::Endpoint::generated_message_descriptor_data());
            messages.push(kubernetes_prometheus_config::Node::generated_message_descriptor_data());
            messages.push(kubernetes_prometheus_config::Pod::generated_message_descriptor_data());
            messages.push(kubernetes_prometheus_config::pod::InclusionFilter::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
