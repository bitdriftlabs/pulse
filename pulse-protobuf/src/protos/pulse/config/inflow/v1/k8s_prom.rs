// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 29.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `pulse/config/inflow/v1/k8s_prom.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:pulse.config.inflow.v1.KubernetesPrometheusConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KubernetesPrometheusConfig {
    // message fields
    // @@protoc_insertion_point(field:pulse.config.inflow.v1.KubernetesPrometheusConfig.scrape_interval)
    pub scrape_interval: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // @@protoc_insertion_point(field:pulse.config.inflow.v1.KubernetesPrometheusConfig.emit_up_metric)
    pub emit_up_metric: bool,
    // @@protoc_insertion_point(field:pulse.config.inflow.v1.KubernetesPrometheusConfig.tls_config)
    pub tls_config: ::protobuf::MessageField<kubernetes_prometheus_config::TLS>,
    // @@protoc_insertion_point(field:pulse.config.inflow.v1.KubernetesPrometheusConfig.scrape_timeout)
    pub scrape_timeout: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // message oneof groups
    pub target: ::std::option::Option<kubernetes_prometheus_config::Target>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KubernetesPrometheusConfig {
    fn default() -> &'a KubernetesPrometheusConfig {
        <KubernetesPrometheusConfig as ::protobuf::Message>::default_instance()
    }
}

impl KubernetesPrometheusConfig {
    pub fn new() -> KubernetesPrometheusConfig {
        ::std::default::Default::default()
    }

    // .pulse.config.inflow.v1.KubernetesPrometheusConfig.Endpoint endpoint = 2;

    pub fn endpoint(&self) -> &kubernetes_prometheus_config::Endpoint {
        match self.target {
            ::std::option::Option::Some(kubernetes_prometheus_config::Target::Endpoint(ref v)) => v,
            _ => <kubernetes_prometheus_config::Endpoint as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_endpoint(&mut self) {
        self.target = ::std::option::Option::None;
    }

    pub fn has_endpoint(&self) -> bool {
        match self.target {
            ::std::option::Option::Some(kubernetes_prometheus_config::Target::Endpoint(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_endpoint(&mut self, v: kubernetes_prometheus_config::Endpoint) {
        self.target = ::std::option::Option::Some(kubernetes_prometheus_config::Target::Endpoint(v))
    }

    // Mutable pointer to the field.
    pub fn mut_endpoint(&mut self) -> &mut kubernetes_prometheus_config::Endpoint {
        if let ::std::option::Option::Some(kubernetes_prometheus_config::Target::Endpoint(_)) = self.target {
        } else {
            self.target = ::std::option::Option::Some(kubernetes_prometheus_config::Target::Endpoint(kubernetes_prometheus_config::Endpoint::new()));
        }
        match self.target {
            ::std::option::Option::Some(kubernetes_prometheus_config::Target::Endpoint(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_endpoint(&mut self) -> kubernetes_prometheus_config::Endpoint {
        if self.has_endpoint() {
            match self.target.take() {
                ::std::option::Option::Some(kubernetes_prometheus_config::Target::Endpoint(v)) => v,
                _ => panic!(),
            }
        } else {
            kubernetes_prometheus_config::Endpoint::new()
        }
    }

    // .pulse.config.inflow.v1.KubernetesPrometheusConfig.Node node = 3;

    pub fn node(&self) -> &kubernetes_prometheus_config::Node {
        match self.target {
            ::std::option::Option::Some(kubernetes_prometheus_config::Target::Node(ref v)) => v,
            _ => <kubernetes_prometheus_config::Node as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_node(&mut self) {
        self.target = ::std::option::Option::None;
    }

    pub fn has_node(&self) -> bool {
        match self.target {
            ::std::option::Option::Some(kubernetes_prometheus_config::Target::Node(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_node(&mut self, v: kubernetes_prometheus_config::Node) {
        self.target = ::std::option::Option::Some(kubernetes_prometheus_config::Target::Node(v))
    }

    // Mutable pointer to the field.
    pub fn mut_node(&mut self) -> &mut kubernetes_prometheus_config::Node {
        if let ::std::option::Option::Some(kubernetes_prometheus_config::Target::Node(_)) = self.target {
        } else {
            self.target = ::std::option::Option::Some(kubernetes_prometheus_config::Target::Node(kubernetes_prometheus_config::Node::new()));
        }
        match self.target {
            ::std::option::Option::Some(kubernetes_prometheus_config::Target::Node(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_node(&mut self) -> kubernetes_prometheus_config::Node {
        if self.has_node() {
            match self.target.take() {
                ::std::option::Option::Some(kubernetes_prometheus_config::Target::Node(v)) => v,
                _ => panic!(),
            }
        } else {
            kubernetes_prometheus_config::Node::new()
        }
    }

    // .pulse.config.inflow.v1.KubernetesPrometheusConfig.Pod pod = 4;

    pub fn pod(&self) -> &kubernetes_prometheus_config::Pod {
        match self.target {
            ::std::option::Option::Some(kubernetes_prometheus_config::Target::Pod(ref v)) => v,
            _ => <kubernetes_prometheus_config::Pod as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_pod(&mut self) {
        self.target = ::std::option::Option::None;
    }

    pub fn has_pod(&self) -> bool {
        match self.target {
            ::std::option::Option::Some(kubernetes_prometheus_config::Target::Pod(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pod(&mut self, v: kubernetes_prometheus_config::Pod) {
        self.target = ::std::option::Option::Some(kubernetes_prometheus_config::Target::Pod(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pod(&mut self) -> &mut kubernetes_prometheus_config::Pod {
        if let ::std::option::Option::Some(kubernetes_prometheus_config::Target::Pod(_)) = self.target {
        } else {
            self.target = ::std::option::Option::Some(kubernetes_prometheus_config::Target::Pod(kubernetes_prometheus_config::Pod::new()));
        }
        match self.target {
            ::std::option::Option::Some(kubernetes_prometheus_config::Target::Pod(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pod(&mut self) -> kubernetes_prometheus_config::Pod {
        if self.has_pod() {
            match self.target.take() {
                ::std::option::Option::Some(kubernetes_prometheus_config::Target::Pod(v)) => v,
                _ => panic!(),
            }
        } else {
            kubernetes_prometheus_config::Pod::new()
        }
    }

    // .pulse.config.inflow.v1.KubernetesPrometheusConfig.HttpServiceDiscovery http_service_discovery = 8;

    pub fn http_service_discovery(&self) -> &kubernetes_prometheus_config::HttpServiceDiscovery {
        match self.target {
            ::std::option::Option::Some(kubernetes_prometheus_config::Target::HttpServiceDiscovery(ref v)) => v,
            _ => <kubernetes_prometheus_config::HttpServiceDiscovery as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_http_service_discovery(&mut self) {
        self.target = ::std::option::Option::None;
    }

    pub fn has_http_service_discovery(&self) -> bool {
        match self.target {
            ::std::option::Option::Some(kubernetes_prometheus_config::Target::HttpServiceDiscovery(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_http_service_discovery(&mut self, v: kubernetes_prometheus_config::HttpServiceDiscovery) {
        self.target = ::std::option::Option::Some(kubernetes_prometheus_config::Target::HttpServiceDiscovery(v))
    }

    // Mutable pointer to the field.
    pub fn mut_http_service_discovery(&mut self) -> &mut kubernetes_prometheus_config::HttpServiceDiscovery {
        if let ::std::option::Option::Some(kubernetes_prometheus_config::Target::HttpServiceDiscovery(_)) = self.target {
        } else {
            self.target = ::std::option::Option::Some(kubernetes_prometheus_config::Target::HttpServiceDiscovery(kubernetes_prometheus_config::HttpServiceDiscovery::new()));
        }
        match self.target {
            ::std::option::Option::Some(kubernetes_prometheus_config::Target::HttpServiceDiscovery(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_http_service_discovery(&mut self) -> kubernetes_prometheus_config::HttpServiceDiscovery {
        if self.has_http_service_discovery() {
            match self.target.take() {
                ::std::option::Option::Some(kubernetes_prometheus_config::Target::HttpServiceDiscovery(v)) => v,
                _ => panic!(),
            }
        } else {
            kubernetes_prometheus_config::HttpServiceDiscovery::new()
        }
    }

    // .pulse.config.inflow.v1.KubernetesPrometheusConfig.RemoteEndpoint remote_endpoint = 9;

    pub fn remote_endpoint(&self) -> &kubernetes_prometheus_config::RemoteEndpoint {
        match self.target {
            ::std::option::Option::Some(kubernetes_prometheus_config::Target::RemoteEndpoint(ref v)) => v,
            _ => <kubernetes_prometheus_config::RemoteEndpoint as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_remote_endpoint(&mut self) {
        self.target = ::std::option::Option::None;
    }

    pub fn has_remote_endpoint(&self) -> bool {
        match self.target {
            ::std::option::Option::Some(kubernetes_prometheus_config::Target::RemoteEndpoint(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_remote_endpoint(&mut self, v: kubernetes_prometheus_config::RemoteEndpoint) {
        self.target = ::std::option::Option::Some(kubernetes_prometheus_config::Target::RemoteEndpoint(v))
    }

    // Mutable pointer to the field.
    pub fn mut_remote_endpoint(&mut self) -> &mut kubernetes_prometheus_config::RemoteEndpoint {
        if let ::std::option::Option::Some(kubernetes_prometheus_config::Target::RemoteEndpoint(_)) = self.target {
        } else {
            self.target = ::std::option::Option::Some(kubernetes_prometheus_config::Target::RemoteEndpoint(kubernetes_prometheus_config::RemoteEndpoint::new()));
        }
        match self.target {
            ::std::option::Option::Some(kubernetes_prometheus_config::Target::RemoteEndpoint(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_remote_endpoint(&mut self) -> kubernetes_prometheus_config::RemoteEndpoint {
        if self.has_remote_endpoint() {
            match self.target.take() {
                ::std::option::Option::Some(kubernetes_prometheus_config::Target::RemoteEndpoint(v)) => v,
                _ => panic!(),
            }
        } else {
            kubernetes_prometheus_config::RemoteEndpoint::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "scrape_interval",
            |m: &KubernetesPrometheusConfig| { &m.scrape_interval },
            |m: &mut KubernetesPrometheusConfig| { &mut m.scrape_interval },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, kubernetes_prometheus_config::Endpoint>(
            "endpoint",
            KubernetesPrometheusConfig::has_endpoint,
            KubernetesPrometheusConfig::endpoint,
            KubernetesPrometheusConfig::mut_endpoint,
            KubernetesPrometheusConfig::set_endpoint,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, kubernetes_prometheus_config::Node>(
            "node",
            KubernetesPrometheusConfig::has_node,
            KubernetesPrometheusConfig::node,
            KubernetesPrometheusConfig::mut_node,
            KubernetesPrometheusConfig::set_node,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, kubernetes_prometheus_config::Pod>(
            "pod",
            KubernetesPrometheusConfig::has_pod,
            KubernetesPrometheusConfig::pod,
            KubernetesPrometheusConfig::mut_pod,
            KubernetesPrometheusConfig::set_pod,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, kubernetes_prometheus_config::HttpServiceDiscovery>(
            "http_service_discovery",
            KubernetesPrometheusConfig::has_http_service_discovery,
            KubernetesPrometheusConfig::http_service_discovery,
            KubernetesPrometheusConfig::mut_http_service_discovery,
            KubernetesPrometheusConfig::set_http_service_discovery,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, kubernetes_prometheus_config::RemoteEndpoint>(
            "remote_endpoint",
            KubernetesPrometheusConfig::has_remote_endpoint,
            KubernetesPrometheusConfig::remote_endpoint,
            KubernetesPrometheusConfig::mut_remote_endpoint,
            KubernetesPrometheusConfig::set_remote_endpoint,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "emit_up_metric",
            |m: &KubernetesPrometheusConfig| { &m.emit_up_metric },
            |m: &mut KubernetesPrometheusConfig| { &mut m.emit_up_metric },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, kubernetes_prometheus_config::TLS>(
            "tls_config",
            |m: &KubernetesPrometheusConfig| { &m.tls_config },
            |m: &mut KubernetesPrometheusConfig| { &mut m.tls_config },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "scrape_timeout",
            |m: &KubernetesPrometheusConfig| { &m.scrape_timeout },
            |m: &mut KubernetesPrometheusConfig| { &mut m.scrape_timeout },
        ));
        oneofs.push(kubernetes_prometheus_config::Target::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KubernetesPrometheusConfig>(
            "KubernetesPrometheusConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KubernetesPrometheusConfig {
    const NAME: &'static str = "KubernetesPrometheusConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.scrape_interval)?;
                },
                18 => {
                    self.target = ::std::option::Option::Some(kubernetes_prometheus_config::Target::Endpoint(is.read_message()?));
                },
                26 => {
                    self.target = ::std::option::Option::Some(kubernetes_prometheus_config::Target::Node(is.read_message()?));
                },
                34 => {
                    self.target = ::std::option::Option::Some(kubernetes_prometheus_config::Target::Pod(is.read_message()?));
                },
                66 => {
                    self.target = ::std::option::Option::Some(kubernetes_prometheus_config::Target::HttpServiceDiscovery(is.read_message()?));
                },
                74 => {
                    self.target = ::std::option::Option::Some(kubernetes_prometheus_config::Target::RemoteEndpoint(is.read_message()?));
                },
                40 => {
                    self.emit_up_metric = is.read_bool()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.tls_config)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.scrape_timeout)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.scrape_interval.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.emit_up_metric != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.tls_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.scrape_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.target {
            match v {
                &kubernetes_prometheus_config::Target::Endpoint(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kubernetes_prometheus_config::Target::Node(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kubernetes_prometheus_config::Target::Pod(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kubernetes_prometheus_config::Target::HttpServiceDiscovery(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &kubernetes_prometheus_config::Target::RemoteEndpoint(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.scrape_interval.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.emit_up_metric != false {
            os.write_bool(5, self.emit_up_metric)?;
        }
        if let Some(v) = self.tls_config.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.scrape_timeout.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.target {
            match v {
                &kubernetes_prometheus_config::Target::Endpoint(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &kubernetes_prometheus_config::Target::Node(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &kubernetes_prometheus_config::Target::Pod(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &kubernetes_prometheus_config::Target::HttpServiceDiscovery(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &kubernetes_prometheus_config::Target::RemoteEndpoint(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KubernetesPrometheusConfig {
        KubernetesPrometheusConfig::new()
    }

    fn clear(&mut self) {
        self.scrape_interval.clear();
        self.target = ::std::option::Option::None;
        self.target = ::std::option::Option::None;
        self.target = ::std::option::Option::None;
        self.target = ::std::option::Option::None;
        self.target = ::std::option::Option::None;
        self.emit_up_metric = false;
        self.tls_config.clear();
        self.scrape_timeout.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KubernetesPrometheusConfig {
        static instance: KubernetesPrometheusConfig = KubernetesPrometheusConfig {
            scrape_interval: ::protobuf::MessageField::none(),
            emit_up_metric: false,
            tls_config: ::protobuf::MessageField::none(),
            scrape_timeout: ::protobuf::MessageField::none(),
            target: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KubernetesPrometheusConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KubernetesPrometheusConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KubernetesPrometheusConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KubernetesPrometheusConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `KubernetesPrometheusConfig`
pub mod kubernetes_prometheus_config {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:pulse.config.inflow.v1.KubernetesPrometheusConfig.target)
    pub enum Target {
        // @@protoc_insertion_point(oneof_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.endpoint)
        Endpoint(Endpoint),
        // @@protoc_insertion_point(oneof_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.node)
        Node(Node),
        // @@protoc_insertion_point(oneof_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.pod)
        Pod(Pod),
        // @@protoc_insertion_point(oneof_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.http_service_discovery)
        HttpServiceDiscovery(HttpServiceDiscovery),
        // @@protoc_insertion_point(oneof_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.remote_endpoint)
        RemoteEndpoint(RemoteEndpoint),
    }

    impl ::protobuf::Oneof for Target {
    }

    impl ::protobuf::OneofFull for Target {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::KubernetesPrometheusConfig as ::protobuf::MessageFull>::descriptor().oneof_by_name("target").unwrap()).clone()
        }
    }

    impl Target {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Target>("target")
        }
    }
    // @@protoc_insertion_point(message:pulse.config.inflow.v1.KubernetesPrometheusConfig.UseK8sHttpsServiceAuthMatcher)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct UseK8sHttpsServiceAuthMatcher {
        // message oneof groups
        pub auth_matcher: ::std::option::Option<use_k8s_https_service_auth_matcher::Auth_matcher>,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.UseK8sHttpsServiceAuthMatcher.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a UseK8sHttpsServiceAuthMatcher {
        fn default() -> &'a UseK8sHttpsServiceAuthMatcher {
            <UseK8sHttpsServiceAuthMatcher as ::protobuf::Message>::default_instance()
        }
    }

    impl UseK8sHttpsServiceAuthMatcher {
        pub fn new() -> UseK8sHttpsServiceAuthMatcher {
            ::std::default::Default::default()
        }

        // .pulse.config.inflow.v1.KubernetesPrometheusConfig.UseK8sHttpsServiceAuthMatcher.KeyValue annotation_matcher = 1;

        pub fn annotation_matcher(&self) -> &use_k8s_https_service_auth_matcher::KeyValue {
            match self.auth_matcher {
                ::std::option::Option::Some(use_k8s_https_service_auth_matcher::Auth_matcher::AnnotationMatcher(ref v)) => v,
                _ => <use_k8s_https_service_auth_matcher::KeyValue as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_annotation_matcher(&mut self) {
            self.auth_matcher = ::std::option::Option::None;
        }

        pub fn has_annotation_matcher(&self) -> bool {
            match self.auth_matcher {
                ::std::option::Option::Some(use_k8s_https_service_auth_matcher::Auth_matcher::AnnotationMatcher(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_annotation_matcher(&mut self, v: use_k8s_https_service_auth_matcher::KeyValue) {
            self.auth_matcher = ::std::option::Option::Some(use_k8s_https_service_auth_matcher::Auth_matcher::AnnotationMatcher(v))
        }

        // Mutable pointer to the field.
        pub fn mut_annotation_matcher(&mut self) -> &mut use_k8s_https_service_auth_matcher::KeyValue {
            if let ::std::option::Option::Some(use_k8s_https_service_auth_matcher::Auth_matcher::AnnotationMatcher(_)) = self.auth_matcher {
            } else {
                self.auth_matcher = ::std::option::Option::Some(use_k8s_https_service_auth_matcher::Auth_matcher::AnnotationMatcher(use_k8s_https_service_auth_matcher::KeyValue::new()));
            }
            match self.auth_matcher {
                ::std::option::Option::Some(use_k8s_https_service_auth_matcher::Auth_matcher::AnnotationMatcher(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_annotation_matcher(&mut self) -> use_k8s_https_service_auth_matcher::KeyValue {
            if self.has_annotation_matcher() {
                match self.auth_matcher.take() {
                    ::std::option::Option::Some(use_k8s_https_service_auth_matcher::Auth_matcher::AnnotationMatcher(v)) => v,
                    _ => panic!(),
                }
            } else {
                use_k8s_https_service_auth_matcher::KeyValue::new()
            }
        }

        // bool always = 2;

        pub fn always(&self) -> bool {
            match self.auth_matcher {
                ::std::option::Option::Some(use_k8s_https_service_auth_matcher::Auth_matcher::Always(v)) => v,
                _ => false,
            }
        }

        pub fn clear_always(&mut self) {
            self.auth_matcher = ::std::option::Option::None;
        }

        pub fn has_always(&self) -> bool {
            match self.auth_matcher {
                ::std::option::Option::Some(use_k8s_https_service_auth_matcher::Auth_matcher::Always(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_always(&mut self, v: bool) {
            self.auth_matcher = ::std::option::Option::Some(use_k8s_https_service_auth_matcher::Auth_matcher::Always(v))
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(1);
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, use_k8s_https_service_auth_matcher::KeyValue>(
                "annotation_matcher",
                UseK8sHttpsServiceAuthMatcher::has_annotation_matcher,
                UseK8sHttpsServiceAuthMatcher::annotation_matcher,
                UseK8sHttpsServiceAuthMatcher::mut_annotation_matcher,
                UseK8sHttpsServiceAuthMatcher::set_annotation_matcher,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
                "always",
                UseK8sHttpsServiceAuthMatcher::has_always,
                UseK8sHttpsServiceAuthMatcher::always,
                UseK8sHttpsServiceAuthMatcher::set_always,
            ));
            oneofs.push(use_k8s_https_service_auth_matcher::Auth_matcher::generated_oneof_descriptor_data());
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UseK8sHttpsServiceAuthMatcher>(
                "KubernetesPrometheusConfig.UseK8sHttpsServiceAuthMatcher",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for UseK8sHttpsServiceAuthMatcher {
        const NAME: &'static str = "UseK8sHttpsServiceAuthMatcher";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.auth_matcher = ::std::option::Option::Some(use_k8s_https_service_auth_matcher::Auth_matcher::AnnotationMatcher(is.read_message()?));
                    },
                    16 => {
                        self.auth_matcher = ::std::option::Option::Some(use_k8s_https_service_auth_matcher::Auth_matcher::Always(is.read_bool()?));
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let ::std::option::Option::Some(ref v) = self.auth_matcher {
                match v {
                    &use_k8s_https_service_auth_matcher::Auth_matcher::AnnotationMatcher(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &use_k8s_https_service_auth_matcher::Auth_matcher::Always(v) => {
                        my_size += 1 + 1;
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let ::std::option::Option::Some(ref v) = self.auth_matcher {
                match v {
                    &use_k8s_https_service_auth_matcher::Auth_matcher::AnnotationMatcher(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                    },
                    &use_k8s_https_service_auth_matcher::Auth_matcher::Always(v) => {
                        os.write_bool(2, v)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> UseK8sHttpsServiceAuthMatcher {
            UseK8sHttpsServiceAuthMatcher::new()
        }

        fn clear(&mut self) {
            self.auth_matcher = ::std::option::Option::None;
            self.auth_matcher = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static UseK8sHttpsServiceAuthMatcher {
            static instance: UseK8sHttpsServiceAuthMatcher = UseK8sHttpsServiceAuthMatcher {
                auth_matcher: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for UseK8sHttpsServiceAuthMatcher {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("KubernetesPrometheusConfig.UseK8sHttpsServiceAuthMatcher").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for UseK8sHttpsServiceAuthMatcher {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for UseK8sHttpsServiceAuthMatcher {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `UseK8sHttpsServiceAuthMatcher`
    pub mod use_k8s_https_service_auth_matcher {

        #[derive(Clone,PartialEq,Debug)]
        // @@protoc_insertion_point(oneof:pulse.config.inflow.v1.KubernetesPrometheusConfig.UseK8sHttpsServiceAuthMatcher.auth_matcher)
        pub enum Auth_matcher {
            // @@protoc_insertion_point(oneof_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.UseK8sHttpsServiceAuthMatcher.annotation_matcher)
            AnnotationMatcher(KeyValue),
            // @@protoc_insertion_point(oneof_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.UseK8sHttpsServiceAuthMatcher.always)
            Always(bool),
        }

        impl ::protobuf::Oneof for Auth_matcher {
        }

        impl ::protobuf::OneofFull for Auth_matcher {
            fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| <super::UseK8sHttpsServiceAuthMatcher as ::protobuf::MessageFull>::descriptor().oneof_by_name("auth_matcher").unwrap()).clone()
            }
        }

        impl Auth_matcher {
            pub(in super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Auth_matcher>("auth_matcher")
            }
        }
        // @@protoc_insertion_point(message:pulse.config.inflow.v1.KubernetesPrometheusConfig.UseK8sHttpsServiceAuthMatcher.KeyValue)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct KeyValue {
            // message fields
            // @@protoc_insertion_point(field:pulse.config.inflow.v1.KubernetesPrometheusConfig.UseK8sHttpsServiceAuthMatcher.KeyValue.key)
            pub key: ::protobuf::Chars,
            // @@protoc_insertion_point(field:pulse.config.inflow.v1.KubernetesPrometheusConfig.UseK8sHttpsServiceAuthMatcher.KeyValue.value)
            pub value: ::std::option::Option<::protobuf::Chars>,
            // special fields
            // @@protoc_insertion_point(special_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.UseK8sHttpsServiceAuthMatcher.KeyValue.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a KeyValue {
            fn default() -> &'a KeyValue {
                <KeyValue as ::protobuf::Message>::default_instance()
            }
        }

        impl KeyValue {
            pub fn new() -> KeyValue {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(2);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "key",
                    |m: &KeyValue| { &m.key },
                    |m: &mut KeyValue| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "value",
                    |m: &KeyValue| { &m.value },
                    |m: &mut KeyValue| { &mut m.value },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KeyValue>(
                    "KubernetesPrometheusConfig.UseK8sHttpsServiceAuthMatcher.KeyValue",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for KeyValue {
            const NAME: &'static str = "KeyValue";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.key = is.read_tokio_chars()?;
                        },
                        18 => {
                            self.value = ::std::option::Option::Some(is.read_tokio_chars()?);
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if !self.key.is_empty() {
                    my_size += ::protobuf::rt::string_size(1, &self.key);
                }
                if let Some(v) = self.value.as_ref() {
                    my_size += ::protobuf::rt::string_size(2, &v);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if !self.key.is_empty() {
                    os.write_string(1, &self.key)?;
                }
                if let Some(v) = self.value.as_ref() {
                    os.write_string(2, v)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> KeyValue {
                KeyValue::new()
            }

            fn clear(&mut self) {
                self.key.clear();
                self.value = ::std::option::Option::None;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static KeyValue {
                static instance: KeyValue = KeyValue {
                    key: ::protobuf::Chars::new(),
                    value: ::std::option::Option::None,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for KeyValue {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("KubernetesPrometheusConfig.UseK8sHttpsServiceAuthMatcher.KeyValue").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for KeyValue {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for KeyValue {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }

    // @@protoc_insertion_point(message:pulse.config.inflow.v1.KubernetesPrometheusConfig.InclusionFilter)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct InclusionFilter {
        // message oneof groups
        pub filter_type: ::std::option::Option<inclusion_filter::Filter_type>,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.InclusionFilter.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a InclusionFilter {
        fn default() -> &'a InclusionFilter {
            <InclusionFilter as ::protobuf::Message>::default_instance()
        }
    }

    impl InclusionFilter {
        pub fn new() -> InclusionFilter {
            ::std::default::Default::default()
        }

        // string container_port_name_regex = 1;

        pub fn container_port_name_regex(&self) -> &str {
            match self.filter_type {
                ::std::option::Option::Some(inclusion_filter::Filter_type::ContainerPortNameRegex(ref v)) => v,
                _ => "",
            }
        }

        pub fn clear_container_port_name_regex(&mut self) {
            self.filter_type = ::std::option::Option::None;
        }

        pub fn has_container_port_name_regex(&self) -> bool {
            match self.filter_type {
                ::std::option::Option::Some(inclusion_filter::Filter_type::ContainerPortNameRegex(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_container_port_name_regex(&mut self, v: ::protobuf::Chars) {
            self.filter_type = ::std::option::Option::Some(inclusion_filter::Filter_type::ContainerPortNameRegex(v))
        }

        // Mutable pointer to the field.
        pub fn mut_container_port_name_regex(&mut self) -> &mut ::protobuf::Chars {
            if let ::std::option::Option::Some(inclusion_filter::Filter_type::ContainerPortNameRegex(_)) = self.filter_type {
            } else {
                self.filter_type = ::std::option::Option::Some(inclusion_filter::Filter_type::ContainerPortNameRegex(::protobuf::Chars::new()));
            }
            match self.filter_type {
                ::std::option::Option::Some(inclusion_filter::Filter_type::ContainerPortNameRegex(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_container_port_name_regex(&mut self) -> ::protobuf::Chars {
            if self.has_container_port_name_regex() {
                match self.filter_type.take() {
                    ::std::option::Option::Some(inclusion_filter::Filter_type::ContainerPortNameRegex(v)) => v,
                    _ => panic!(),
                }
            } else {
                ::protobuf::Chars::new()
            }
        }

        // .pulse.config.inflow.v1.KubernetesPrometheusConfig.InclusionFilter.AnnotationMatcher annotation_matcher = 2;

        pub fn annotation_matcher(&self) -> &inclusion_filter::AnnotationMatcher {
            match self.filter_type {
                ::std::option::Option::Some(inclusion_filter::Filter_type::AnnotationMatcher(ref v)) => v,
                _ => <inclusion_filter::AnnotationMatcher as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_annotation_matcher(&mut self) {
            self.filter_type = ::std::option::Option::None;
        }

        pub fn has_annotation_matcher(&self) -> bool {
            match self.filter_type {
                ::std::option::Option::Some(inclusion_filter::Filter_type::AnnotationMatcher(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_annotation_matcher(&mut self, v: inclusion_filter::AnnotationMatcher) {
            self.filter_type = ::std::option::Option::Some(inclusion_filter::Filter_type::AnnotationMatcher(v))
        }

        // Mutable pointer to the field.
        pub fn mut_annotation_matcher(&mut self) -> &mut inclusion_filter::AnnotationMatcher {
            if let ::std::option::Option::Some(inclusion_filter::Filter_type::AnnotationMatcher(_)) = self.filter_type {
            } else {
                self.filter_type = ::std::option::Option::Some(inclusion_filter::Filter_type::AnnotationMatcher(inclusion_filter::AnnotationMatcher::new()));
            }
            match self.filter_type {
                ::std::option::Option::Some(inclusion_filter::Filter_type::AnnotationMatcher(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_annotation_matcher(&mut self) -> inclusion_filter::AnnotationMatcher {
            if self.has_annotation_matcher() {
                match self.filter_type.take() {
                    ::std::option::Option::Some(inclusion_filter::Filter_type::AnnotationMatcher(v)) => v,
                    _ => panic!(),
                }
            } else {
                inclusion_filter::AnnotationMatcher::new()
            }
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(1);
            fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
                "container_port_name_regex",
                InclusionFilter::has_container_port_name_regex,
                InclusionFilter::container_port_name_regex,
                InclusionFilter::set_container_port_name_regex,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, inclusion_filter::AnnotationMatcher>(
                "annotation_matcher",
                InclusionFilter::has_annotation_matcher,
                InclusionFilter::annotation_matcher,
                InclusionFilter::mut_annotation_matcher,
                InclusionFilter::set_annotation_matcher,
            ));
            oneofs.push(inclusion_filter::Filter_type::generated_oneof_descriptor_data());
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InclusionFilter>(
                "KubernetesPrometheusConfig.InclusionFilter",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for InclusionFilter {
        const NAME: &'static str = "InclusionFilter";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.filter_type = ::std::option::Option::Some(inclusion_filter::Filter_type::ContainerPortNameRegex(is.read_tokio_chars()?));
                    },
                    18 => {
                        self.filter_type = ::std::option::Option::Some(inclusion_filter::Filter_type::AnnotationMatcher(is.read_message()?));
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let ::std::option::Option::Some(ref v) = self.filter_type {
                match v {
                    &inclusion_filter::Filter_type::ContainerPortNameRegex(ref v) => {
                        my_size += ::protobuf::rt::string_size(1, &v);
                    },
                    &inclusion_filter::Filter_type::AnnotationMatcher(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let ::std::option::Option::Some(ref v) = self.filter_type {
                match v {
                    &inclusion_filter::Filter_type::ContainerPortNameRegex(ref v) => {
                        os.write_string(1, v)?;
                    },
                    &inclusion_filter::Filter_type::AnnotationMatcher(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> InclusionFilter {
            InclusionFilter::new()
        }

        fn clear(&mut self) {
            self.filter_type = ::std::option::Option::None;
            self.filter_type = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static InclusionFilter {
            static instance: InclusionFilter = InclusionFilter {
                filter_type: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for InclusionFilter {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("KubernetesPrometheusConfig.InclusionFilter").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for InclusionFilter {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for InclusionFilter {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `InclusionFilter`
    pub mod inclusion_filter {

        #[derive(Clone,PartialEq,Debug)]
        // @@protoc_insertion_point(oneof:pulse.config.inflow.v1.KubernetesPrometheusConfig.InclusionFilter.filter_type)
        pub enum Filter_type {
            // @@protoc_insertion_point(oneof_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.InclusionFilter.container_port_name_regex)
            ContainerPortNameRegex(::protobuf::Chars),
            // @@protoc_insertion_point(oneof_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.InclusionFilter.annotation_matcher)
            AnnotationMatcher(AnnotationMatcher),
        }

        impl ::protobuf::Oneof for Filter_type {
        }

        impl ::protobuf::OneofFull for Filter_type {
            fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| <super::InclusionFilter as ::protobuf::MessageFull>::descriptor().oneof_by_name("filter_type").unwrap()).clone()
            }
        }

        impl Filter_type {
            pub(in super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Filter_type>("filter_type")
            }
        }
        // @@protoc_insertion_point(message:pulse.config.inflow.v1.KubernetesPrometheusConfig.InclusionFilter.AnnotationMatcher)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct AnnotationMatcher {
            // message fields
            // @@protoc_insertion_point(field:pulse.config.inflow.v1.KubernetesPrometheusConfig.InclusionFilter.AnnotationMatcher.inclusion_annotation_name)
            pub inclusion_annotation_name: ::protobuf::Chars,
            // @@protoc_insertion_point(field:pulse.config.inflow.v1.KubernetesPrometheusConfig.InclusionFilter.AnnotationMatcher.inclusion_annotation_regex)
            pub inclusion_annotation_regex: ::protobuf::Chars,
            // @@protoc_insertion_point(field:pulse.config.inflow.v1.KubernetesPrometheusConfig.InclusionFilter.AnnotationMatcher.port_annotation_name)
            pub port_annotation_name: ::protobuf::Chars,
            // special fields
            // @@protoc_insertion_point(special_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.InclusionFilter.AnnotationMatcher.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a AnnotationMatcher {
            fn default() -> &'a AnnotationMatcher {
                <AnnotationMatcher as ::protobuf::Message>::default_instance()
            }
        }

        impl AnnotationMatcher {
            pub fn new() -> AnnotationMatcher {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(3);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "inclusion_annotation_name",
                    |m: &AnnotationMatcher| { &m.inclusion_annotation_name },
                    |m: &mut AnnotationMatcher| { &mut m.inclusion_annotation_name },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "inclusion_annotation_regex",
                    |m: &AnnotationMatcher| { &m.inclusion_annotation_regex },
                    |m: &mut AnnotationMatcher| { &mut m.inclusion_annotation_regex },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                    "port_annotation_name",
                    |m: &AnnotationMatcher| { &m.port_annotation_name },
                    |m: &mut AnnotationMatcher| { &mut m.port_annotation_name },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AnnotationMatcher>(
                    "KubernetesPrometheusConfig.InclusionFilter.AnnotationMatcher",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for AnnotationMatcher {
            const NAME: &'static str = "AnnotationMatcher";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.inclusion_annotation_name = is.read_tokio_chars()?;
                        },
                        18 => {
                            self.inclusion_annotation_regex = is.read_tokio_chars()?;
                        },
                        26 => {
                            self.port_annotation_name = is.read_tokio_chars()?;
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if !self.inclusion_annotation_name.is_empty() {
                    my_size += ::protobuf::rt::string_size(1, &self.inclusion_annotation_name);
                }
                if !self.inclusion_annotation_regex.is_empty() {
                    my_size += ::protobuf::rt::string_size(2, &self.inclusion_annotation_regex);
                }
                if !self.port_annotation_name.is_empty() {
                    my_size += ::protobuf::rt::string_size(3, &self.port_annotation_name);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if !self.inclusion_annotation_name.is_empty() {
                    os.write_string(1, &self.inclusion_annotation_name)?;
                }
                if !self.inclusion_annotation_regex.is_empty() {
                    os.write_string(2, &self.inclusion_annotation_regex)?;
                }
                if !self.port_annotation_name.is_empty() {
                    os.write_string(3, &self.port_annotation_name)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> AnnotationMatcher {
                AnnotationMatcher::new()
            }

            fn clear(&mut self) {
                self.inclusion_annotation_name.clear();
                self.inclusion_annotation_regex.clear();
                self.port_annotation_name.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static AnnotationMatcher {
                static instance: AnnotationMatcher = AnnotationMatcher {
                    inclusion_annotation_name: ::protobuf::Chars::new(),
                    inclusion_annotation_regex: ::protobuf::Chars::new(),
                    port_annotation_name: ::protobuf::Chars::new(),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for AnnotationMatcher {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("KubernetesPrometheusConfig.InclusionFilter.AnnotationMatcher").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for AnnotationMatcher {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for AnnotationMatcher {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }

    // @@protoc_insertion_point(message:pulse.config.inflow.v1.KubernetesPrometheusConfig.Endpoint)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Endpoint {
        // message fields
        // @@protoc_insertion_point(field:pulse.config.inflow.v1.KubernetesPrometheusConfig.Endpoint.use_k8s_https_service_auth_matchers)
        pub use_k8s_https_service_auth_matchers: ::std::vec::Vec<UseK8sHttpsServiceAuthMatcher>,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.Endpoint.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Endpoint {
        fn default() -> &'a Endpoint {
            <Endpoint as ::protobuf::Message>::default_instance()
        }
    }

    impl Endpoint {
        pub fn new() -> Endpoint {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "use_k8s_https_service_auth_matchers",
                |m: &Endpoint| { &m.use_k8s_https_service_auth_matchers },
                |m: &mut Endpoint| { &mut m.use_k8s_https_service_auth_matchers },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Endpoint>(
                "KubernetesPrometheusConfig.Endpoint",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Endpoint {
        const NAME: &'static str = "Endpoint";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    18 => {
                        self.use_k8s_https_service_auth_matchers.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for value in &self.use_k8s_https_service_auth_matchers {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.use_k8s_https_service_auth_matchers {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Endpoint {
            Endpoint::new()
        }

        fn clear(&mut self) {
            self.use_k8s_https_service_auth_matchers.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Endpoint {
            static instance: Endpoint = Endpoint {
                use_k8s_https_service_auth_matchers: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Endpoint {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("KubernetesPrometheusConfig.Endpoint").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Endpoint {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Endpoint {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:pulse.config.inflow.v1.KubernetesPrometheusConfig.RemoteEndpoint)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct RemoteEndpoint {
        // message fields
        // @@protoc_insertion_point(field:pulse.config.inflow.v1.KubernetesPrometheusConfig.RemoteEndpoint.namespace)
        pub namespace: ::protobuf::Chars,
        // @@protoc_insertion_point(field:pulse.config.inflow.v1.KubernetesPrometheusConfig.RemoteEndpoint.service)
        pub service: ::protobuf::Chars,
        // @@protoc_insertion_point(field:pulse.config.inflow.v1.KubernetesPrometheusConfig.RemoteEndpoint.inclusion_filters)
        pub inclusion_filters: ::std::vec::Vec<InclusionFilter>,
        // @@protoc_insertion_point(field:pulse.config.inflow.v1.KubernetesPrometheusConfig.RemoteEndpoint.use_k8s_https_service_auth_matchers)
        pub use_k8s_https_service_auth_matchers: ::std::vec::Vec<UseK8sHttpsServiceAuthMatcher>,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.RemoteEndpoint.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a RemoteEndpoint {
        fn default() -> &'a RemoteEndpoint {
            <RemoteEndpoint as ::protobuf::Message>::default_instance()
        }
    }

    impl RemoteEndpoint {
        pub fn new() -> RemoteEndpoint {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "namespace",
                |m: &RemoteEndpoint| { &m.namespace },
                |m: &mut RemoteEndpoint| { &mut m.namespace },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "service",
                |m: &RemoteEndpoint| { &m.service },
                |m: &mut RemoteEndpoint| { &mut m.service },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "inclusion_filters",
                |m: &RemoteEndpoint| { &m.inclusion_filters },
                |m: &mut RemoteEndpoint| { &mut m.inclusion_filters },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "use_k8s_https_service_auth_matchers",
                |m: &RemoteEndpoint| { &m.use_k8s_https_service_auth_matchers },
                |m: &mut RemoteEndpoint| { &mut m.use_k8s_https_service_auth_matchers },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RemoteEndpoint>(
                "KubernetesPrometheusConfig.RemoteEndpoint",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for RemoteEndpoint {
        const NAME: &'static str = "RemoteEndpoint";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.namespace = is.read_tokio_chars()?;
                    },
                    18 => {
                        self.service = is.read_tokio_chars()?;
                    },
                    26 => {
                        self.inclusion_filters.push(is.read_message()?);
                    },
                    34 => {
                        self.use_k8s_https_service_auth_matchers.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.namespace.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.namespace);
            }
            if !self.service.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.service);
            }
            for value in &self.inclusion_filters {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            for value in &self.use_k8s_https_service_auth_matchers {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.namespace.is_empty() {
                os.write_string(1, &self.namespace)?;
            }
            if !self.service.is_empty() {
                os.write_string(2, &self.service)?;
            }
            for v in &self.inclusion_filters {
                ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            };
            for v in &self.use_k8s_https_service_auth_matchers {
                ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> RemoteEndpoint {
            RemoteEndpoint::new()
        }

        fn clear(&mut self) {
            self.namespace.clear();
            self.service.clear();
            self.inclusion_filters.clear();
            self.use_k8s_https_service_auth_matchers.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static RemoteEndpoint {
            static instance: RemoteEndpoint = RemoteEndpoint {
                namespace: ::protobuf::Chars::new(),
                service: ::protobuf::Chars::new(),
                inclusion_filters: ::std::vec::Vec::new(),
                use_k8s_https_service_auth_matchers: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for RemoteEndpoint {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("KubernetesPrometheusConfig.RemoteEndpoint").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for RemoteEndpoint {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for RemoteEndpoint {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:pulse.config.inflow.v1.KubernetesPrometheusConfig.Node)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Node {
        // message fields
        // @@protoc_insertion_point(field:pulse.config.inflow.v1.KubernetesPrometheusConfig.Node.path)
        pub path: ::protobuf::Chars,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.Node.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Node {
        fn default() -> &'a Node {
            <Node as ::protobuf::Message>::default_instance()
        }
    }

    impl Node {
        pub fn new() -> Node {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "path",
                |m: &Node| { &m.path },
                |m: &mut Node| { &mut m.path },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Node>(
                "KubernetesPrometheusConfig.Node",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Node {
        const NAME: &'static str = "Node";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.path = is.read_tokio_chars()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.path.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.path);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.path.is_empty() {
                os.write_string(1, &self.path)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Node {
            Node::new()
        }

        fn clear(&mut self) {
            self.path.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Node {
            static instance: Node = Node {
                path: ::protobuf::Chars::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Node {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("KubernetesPrometheusConfig.Node").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Node {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Node {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:pulse.config.inflow.v1.KubernetesPrometheusConfig.Pod)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Pod {
        // message fields
        // @@protoc_insertion_point(field:pulse.config.inflow.v1.KubernetesPrometheusConfig.Pod.inclusion_filters)
        pub inclusion_filters: ::std::vec::Vec<InclusionFilter>,
        // @@protoc_insertion_point(field:pulse.config.inflow.v1.KubernetesPrometheusConfig.Pod.use_k8s_https_service_auth_matchers)
        pub use_k8s_https_service_auth_matchers: ::std::vec::Vec<UseK8sHttpsServiceAuthMatcher>,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.Pod.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Pod {
        fn default() -> &'a Pod {
            <Pod as ::protobuf::Message>::default_instance()
        }
    }

    impl Pod {
        pub fn new() -> Pod {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "inclusion_filters",
                |m: &Pod| { &m.inclusion_filters },
                |m: &mut Pod| { &mut m.inclusion_filters },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "use_k8s_https_service_auth_matchers",
                |m: &Pod| { &m.use_k8s_https_service_auth_matchers },
                |m: &mut Pod| { &mut m.use_k8s_https_service_auth_matchers },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Pod>(
                "KubernetesPrometheusConfig.Pod",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Pod {
        const NAME: &'static str = "Pod";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.inclusion_filters.push(is.read_message()?);
                    },
                    18 => {
                        self.use_k8s_https_service_auth_matchers.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for value in &self.inclusion_filters {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            for value in &self.use_k8s_https_service_auth_matchers {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.inclusion_filters {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            };
            for v in &self.use_k8s_https_service_auth_matchers {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Pod {
            Pod::new()
        }

        fn clear(&mut self) {
            self.inclusion_filters.clear();
            self.use_k8s_https_service_auth_matchers.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Pod {
            static instance: Pod = Pod {
                inclusion_filters: ::std::vec::Vec::new(),
                use_k8s_https_service_auth_matchers: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Pod {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("KubernetesPrometheusConfig.Pod").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Pod {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Pod {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:pulse.config.inflow.v1.KubernetesPrometheusConfig.HttpServiceDiscovery)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct HttpServiceDiscovery {
        // message fields
        // @@protoc_insertion_point(field:pulse.config.inflow.v1.KubernetesPrometheusConfig.HttpServiceDiscovery.url)
        pub url: ::protobuf::MessageField<super::super::common::EnvOrInline>,
        // @@protoc_insertion_point(field:pulse.config.inflow.v1.KubernetesPrometheusConfig.HttpServiceDiscovery.fetch_interval)
        pub fetch_interval: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.HttpServiceDiscovery.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a HttpServiceDiscovery {
        fn default() -> &'a HttpServiceDiscovery {
            <HttpServiceDiscovery as ::protobuf::Message>::default_instance()
        }
    }

    impl HttpServiceDiscovery {
        pub fn new() -> HttpServiceDiscovery {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::common::EnvOrInline>(
                "url",
                |m: &HttpServiceDiscovery| { &m.url },
                |m: &mut HttpServiceDiscovery| { &mut m.url },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
                "fetch_interval",
                |m: &HttpServiceDiscovery| { &m.fetch_interval },
                |m: &mut HttpServiceDiscovery| { &mut m.fetch_interval },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HttpServiceDiscovery>(
                "KubernetesPrometheusConfig.HttpServiceDiscovery",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for HttpServiceDiscovery {
        const NAME: &'static str = "HttpServiceDiscovery";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.url)?;
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.fetch_interval)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.url.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.fetch_interval.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.url.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if let Some(v) = self.fetch_interval.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> HttpServiceDiscovery {
            HttpServiceDiscovery::new()
        }

        fn clear(&mut self) {
            self.url.clear();
            self.fetch_interval.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static HttpServiceDiscovery {
            static instance: HttpServiceDiscovery = HttpServiceDiscovery {
                url: ::protobuf::MessageField::none(),
                fetch_interval: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for HttpServiceDiscovery {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("KubernetesPrometheusConfig.HttpServiceDiscovery").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for HttpServiceDiscovery {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for HttpServiceDiscovery {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:pulse.config.inflow.v1.KubernetesPrometheusConfig.TLS)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct TLS {
        // message fields
        // @@protoc_insertion_point(field:pulse.config.inflow.v1.KubernetesPrometheusConfig.TLS.cert_file)
        pub cert_file: ::std::option::Option<::protobuf::Chars>,
        // @@protoc_insertion_point(field:pulse.config.inflow.v1.KubernetesPrometheusConfig.TLS.key_file)
        pub key_file: ::std::option::Option<::protobuf::Chars>,
        // @@protoc_insertion_point(field:pulse.config.inflow.v1.KubernetesPrometheusConfig.TLS.insecure_skip_verify)
        pub insecure_skip_verify: bool,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.inflow.v1.KubernetesPrometheusConfig.TLS.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a TLS {
        fn default() -> &'a TLS {
            <TLS as ::protobuf::Message>::default_instance()
        }
    }

    impl TLS {
        pub fn new() -> TLS {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "cert_file",
                |m: &TLS| { &m.cert_file },
                |m: &mut TLS| { &mut m.cert_file },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "key_file",
                |m: &TLS| { &m.key_file },
                |m: &mut TLS| { &mut m.key_file },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "insecure_skip_verify",
                |m: &TLS| { &m.insecure_skip_verify },
                |m: &mut TLS| { &mut m.insecure_skip_verify },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TLS>(
                "KubernetesPrometheusConfig.TLS",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for TLS {
        const NAME: &'static str = "TLS";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.cert_file = ::std::option::Option::Some(is.read_tokio_chars()?);
                    },
                    18 => {
                        self.key_file = ::std::option::Option::Some(is.read_tokio_chars()?);
                    },
                    24 => {
                        self.insecure_skip_verify = is.read_bool()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.cert_file.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.key_file.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            if self.insecure_skip_verify != false {
                my_size += 1 + 1;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.cert_file.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.key_file.as_ref() {
                os.write_string(2, v)?;
            }
            if self.insecure_skip_verify != false {
                os.write_bool(3, self.insecure_skip_verify)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> TLS {
            TLS::new()
        }

        fn clear(&mut self) {
            self.cert_file = ::std::option::Option::None;
            self.key_file = ::std::option::Option::None;
            self.insecure_skip_verify = false;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static TLS {
            static instance: TLS = TLS {
                cert_file: ::std::option::Option::None,
                key_file: ::std::option::Option::None,
                insecure_skip_verify: false,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for TLS {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("KubernetesPrometheusConfig.TLS").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for TLS {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for TLS {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%pulse/config/inflow/v1/k8s_prom.proto\x12\x16pulse.config.inflow.v1\
    \x1a#pulse/config/common/v1/common.proto\x1a\x1egoogle/protobuf/duration\
    .proto\x1a\x17validate/validate.proto\"\x9d\x15\n\x1aKubernetesPrometheu\
    sConfig\x12L\n\x0fscrape_interval\x18\x01\x20\x01(\x0b2\x19.google.proto\
    buf.DurationR\x0escrapeIntervalB\x08\xfaB\x05\x8a\x01\x02\x10\x01\x12Y\n\
    \x08endpoint\x18\x02\x20\x01(\x0b2;.pulse.config.inflow.v1.KubernetesPro\
    metheusConfig.EndpointH\0R\x08endpoint\x12M\n\x04node\x18\x03\x20\x01(\
    \x0b27.pulse.config.inflow.v1.KubernetesPrometheusConfig.NodeH\0R\x04nod\
    e\x12J\n\x03pod\x18\x04\x20\x01(\x0b26.pulse.config.inflow.v1.Kubernetes\
    PrometheusConfig.PodH\0R\x03pod\x12\x7f\n\x16http_service_discovery\x18\
    \x08\x20\x01(\x0b2G.pulse.config.inflow.v1.KubernetesPrometheusConfig.Ht\
    tpServiceDiscoveryH\0R\x14httpServiceDiscovery\x12l\n\x0fremote_endpoint\
    \x18\t\x20\x01(\x0b2A.pulse.config.inflow.v1.KubernetesPrometheusConfig.\
    RemoteEndpointH\0R\x0eremoteEndpoint\x12$\n\x0eemit_up_metric\x18\x05\
    \x20\x01(\x08R\x0cemitUpMetric\x12U\n\ntls_config\x18\x06\x20\x01(\x0b26\
    .pulse.config.inflow.v1.KubernetesPrometheusConfig.TLSR\ttlsConfig\x12@\
    \n\x0escrape_timeout\x18\x07\x20\x01(\x0b2\x19.google.protobuf.DurationR\
    \rscrapeTimeout\x1a\xa7\x02\n\x1dUseK8sHttpsServiceAuthMatcher\x12\x8a\
    \x01\n\x12annotation_matcher\x18\x01\x20\x01(\x0b2Y.pulse.config.inflow.\
    v1.KubernetesPrometheusConfig.UseK8sHttpsServiceAuthMatcher.KeyValueH\0R\
    \x11annotationMatcher\x12\x18\n\x06always\x18\x02\x20\x01(\x08H\0R\x06al\
    ways\x1aJ\n\x08KeyValue\x12\x19\n\x03key\x18\x01\x20\x01(\tR\x03keyB\x07\
    \xfaB\x04r\x02\x10\x01\x12\x19\n\x05value\x18\x02\x20\x01(\tH\0R\x05valu\
    e\x88\x01\x01B\x08\n\x06_valueB\x13\n\x0cauth_matcher\x12\x03\xf8B\x01\
    \x1a\xc7\x03\n\x0fInclusionFilter\x12;\n\x19container_port_name_regex\
    \x18\x01\x20\x01(\tH\0R\x16containerPortNameRegex\x12\x85\x01\n\x12annot\
    ation_matcher\x18\x02\x20\x01(\x0b2T.pulse.config.inflow.v1.KubernetesPr\
    ometheusConfig.InclusionFilter.AnnotationMatcherH\0R\x11annotationMatche\
    r\x1a\xda\x01\n\x11AnnotationMatcher\x12C\n\x19inclusion_annotation_name\
    \x18\x01\x20\x01(\tR\x17inclusionAnnotationNameB\x07\xfaB\x04r\x02\x10\
    \x01\x12E\n\x1ainclusion_annotation_regex\x18\x02\x20\x01(\tR\x18inclusi\
    onAnnotationRegexB\x07\xfaB\x04r\x02\x10\x01\x129\n\x14port_annotation_n\
    ame\x18\x03\x20\x01(\tR\x12portAnnotationNameB\x07\xfaB\x04r\x02\x10\x01\
    B\x12\n\x0bfilter_type\x12\x03\xf8B\x01\x1a\xaa\x01\n\x08Endpoint\x12\
    \x9d\x01\n#use_k8s_https_service_auth_matchers\x18\x02\x20\x03(\x0b2P.pu\
    lse.config.inflow.v1.KubernetesPrometheusConfig.UseK8sHttpsServiceAuthMa\
    tcherR\x1euseK8sHttpsServiceAuthMatchers\x1a\xeb\x02\n\x0eRemoteEndpoint\
    \x12%\n\tnamespace\x18\x01\x20\x01(\tR\tnamespaceB\x07\xfaB\x04r\x02\x10\
    \x01\x12!\n\x07service\x18\x02\x20\x01(\tR\x07serviceB\x07\xfaB\x04r\x02\
    \x10\x01\x12o\n\x11inclusion_filters\x18\x03\x20\x03(\x0b2B.pulse.config\
    .inflow.v1.KubernetesPrometheusConfig.InclusionFilterR\x10inclusionFilte\
    rs\x12\x9d\x01\n#use_k8s_https_service_auth_matchers\x18\x04\x20\x03(\
    \x0b2P.pulse.config.inflow.v1.KubernetesPrometheusConfig.UseK8sHttpsServ\
    iceAuthMatcherR\x1euseK8sHttpsServiceAuthMatchers\x1a#\n\x04Node\x12\x1b\
    \n\x04path\x18\x01\x20\x01(\tR\x04pathB\x07\xfaB\x04r\x02\x10\x01\x1a\
    \x96\x02\n\x03Pod\x12o\n\x11inclusion_filters\x18\x01\x20\x03(\x0b2B.pul\
    se.config.inflow.v1.KubernetesPrometheusConfig.InclusionFilterR\x10inclu\
    sionFilters\x12\x9d\x01\n#use_k8s_https_service_auth_matchers\x18\x02\
    \x20\x03(\x0b2P.pulse.config.inflow.v1.KubernetesPrometheusConfig.UseK8s\
    HttpsServiceAuthMatcherR\x1euseK8sHttpsServiceAuthMatchers\x1a\x99\x01\n\
    \x14HttpServiceDiscovery\x12?\n\x03url\x18\x01\x20\x01(\x0b2#.pulse.conf\
    ig.common.v1.EnvOrInlineR\x03urlB\x08\xfaB\x05\x8a\x01\x02\x10\x01\x12@\
    \n\x0efetch_interval\x18\x02\x20\x01(\x0b2\x19.google.protobuf.DurationR\
    \rfetchInterval\x1a\x94\x01\n\x03TLS\x12\x20\n\tcert_file\x18\x01\x20\
    \x01(\tH\0R\x08certFile\x88\x01\x01\x12\x1e\n\x08key_file\x18\x02\x20\
    \x01(\tH\x01R\x07keyFile\x88\x01\x01\x120\n\x14insecure_skip_verify\x18\
    \x03\x20\x01(\x08R\x12insecureSkipVerifyB\x0c\n\n_cert_fileB\x0b\n\t_key\
    _fileB\r\n\x06target\x12\x03\xf8B\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::common::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::duration::file_descriptor().clone());
            deps.push(super::validate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(11);
            messages.push(KubernetesPrometheusConfig::generated_message_descriptor_data());
            messages.push(kubernetes_prometheus_config::UseK8sHttpsServiceAuthMatcher::generated_message_descriptor_data());
            messages.push(kubernetes_prometheus_config::InclusionFilter::generated_message_descriptor_data());
            messages.push(kubernetes_prometheus_config::Endpoint::generated_message_descriptor_data());
            messages.push(kubernetes_prometheus_config::RemoteEndpoint::generated_message_descriptor_data());
            messages.push(kubernetes_prometheus_config::Node::generated_message_descriptor_data());
            messages.push(kubernetes_prometheus_config::Pod::generated_message_descriptor_data());
            messages.push(kubernetes_prometheus_config::HttpServiceDiscovery::generated_message_descriptor_data());
            messages.push(kubernetes_prometheus_config::TLS::generated_message_descriptor_data());
            messages.push(kubernetes_prometheus_config::use_k8s_https_service_auth_matcher::KeyValue::generated_message_descriptor_data());
            messages.push(kubernetes_prometheus_config::inclusion_filter::AnnotationMatcher::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
