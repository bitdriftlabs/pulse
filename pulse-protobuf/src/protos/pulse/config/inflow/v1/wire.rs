// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 27.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `pulse/config/inflow/v1/wire.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:pulse.config.inflow.v1.AdvancedSocketServerConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AdvancedSocketServerConfig {
    // message fields
    // @@protoc_insertion_point(field:pulse.config.inflow.v1.AdvancedSocketServerConfig.idle_timeout)
    pub idle_timeout: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // @@protoc_insertion_point(field:pulse.config.inflow.v1.AdvancedSocketServerConfig.buffer_size)
    pub buffer_size: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:pulse.config.inflow.v1.AdvancedSocketServerConfig.max_connection_duration)
    pub max_connection_duration: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.inflow.v1.AdvancedSocketServerConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AdvancedSocketServerConfig {
    fn default() -> &'a AdvancedSocketServerConfig {
        <AdvancedSocketServerConfig as ::protobuf::Message>::default_instance()
    }
}

impl AdvancedSocketServerConfig {
    pub fn new() -> AdvancedSocketServerConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "idle_timeout",
            |m: &AdvancedSocketServerConfig| { &m.idle_timeout },
            |m: &mut AdvancedSocketServerConfig| { &mut m.idle_timeout },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "buffer_size",
            |m: &AdvancedSocketServerConfig| { &m.buffer_size },
            |m: &mut AdvancedSocketServerConfig| { &mut m.buffer_size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "max_connection_duration",
            |m: &AdvancedSocketServerConfig| { &m.max_connection_duration },
            |m: &mut AdvancedSocketServerConfig| { &mut m.max_connection_duration },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AdvancedSocketServerConfig>(
            "AdvancedSocketServerConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AdvancedSocketServerConfig {
    const NAME: &'static str = "AdvancedSocketServerConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.idle_timeout)?;
                },
                16 => {
                    self.buffer_size = ::std::option::Option::Some(is.read_uint64()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.max_connection_duration)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.idle_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.buffer_size {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.max_connection_duration.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.idle_timeout.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.buffer_size {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.max_connection_duration.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AdvancedSocketServerConfig {
        AdvancedSocketServerConfig::new()
    }

    fn clear(&mut self) {
        self.idle_timeout.clear();
        self.buffer_size = ::std::option::Option::None;
        self.max_connection_duration.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AdvancedSocketServerConfig {
        static instance: AdvancedSocketServerConfig = AdvancedSocketServerConfig {
            idle_timeout: ::protobuf::MessageField::none(),
            buffer_size: ::std::option::Option::None,
            max_connection_duration: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AdvancedSocketServerConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AdvancedSocketServerConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AdvancedSocketServerConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AdvancedSocketServerConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pulse.config.inflow.v1.TcpServerConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TcpServerConfig {
    // message fields
    // @@protoc_insertion_point(field:pulse.config.inflow.v1.TcpServerConfig.bind)
    pub bind: ::protobuf::Chars,
    // @@protoc_insertion_point(field:pulse.config.inflow.v1.TcpServerConfig.protocol)
    pub protocol: ::protobuf::MessageField<super::common::WireProtocol>,
    // @@protoc_insertion_point(field:pulse.config.inflow.v1.TcpServerConfig.advanced)
    pub advanced: ::protobuf::MessageField<AdvancedSocketServerConfig>,
    // @@protoc_insertion_point(field:pulse.config.inflow.v1.TcpServerConfig.bind_k8s_pod_metadata_by_remote_ip)
    pub bind_k8s_pod_metadata_by_remote_ip: bool,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.inflow.v1.TcpServerConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TcpServerConfig {
    fn default() -> &'a TcpServerConfig {
        <TcpServerConfig as ::protobuf::Message>::default_instance()
    }
}

impl TcpServerConfig {
    pub fn new() -> TcpServerConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bind",
            |m: &TcpServerConfig| { &m.bind },
            |m: &mut TcpServerConfig| { &mut m.bind },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::WireProtocol>(
            "protocol",
            |m: &TcpServerConfig| { &m.protocol },
            |m: &mut TcpServerConfig| { &mut m.protocol },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, AdvancedSocketServerConfig>(
            "advanced",
            |m: &TcpServerConfig| { &m.advanced },
            |m: &mut TcpServerConfig| { &mut m.advanced },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bind_k8s_pod_metadata_by_remote_ip",
            |m: &TcpServerConfig| { &m.bind_k8s_pod_metadata_by_remote_ip },
            |m: &mut TcpServerConfig| { &mut m.bind_k8s_pod_metadata_by_remote_ip },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TcpServerConfig>(
            "TcpServerConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TcpServerConfig {
    const NAME: &'static str = "TcpServerConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.bind = is.read_tokio_chars()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.protocol)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.advanced)?;
                },
                32 => {
                    self.bind_k8s_pod_metadata_by_remote_ip = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.bind.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.bind);
        }
        if let Some(v) = self.protocol.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.advanced.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.bind_k8s_pod_metadata_by_remote_ip != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.bind.is_empty() {
            os.write_string(1, &self.bind)?;
        }
        if let Some(v) = self.protocol.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.advanced.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if self.bind_k8s_pod_metadata_by_remote_ip != false {
            os.write_bool(4, self.bind_k8s_pod_metadata_by_remote_ip)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TcpServerConfig {
        TcpServerConfig::new()
    }

    fn clear(&mut self) {
        self.bind.clear();
        self.protocol.clear();
        self.advanced.clear();
        self.bind_k8s_pod_metadata_by_remote_ip = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TcpServerConfig {
        static instance: TcpServerConfig = TcpServerConfig {
            bind: ::protobuf::Chars::new(),
            protocol: ::protobuf::MessageField::none(),
            advanced: ::protobuf::MessageField::none(),
            bind_k8s_pod_metadata_by_remote_ip: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TcpServerConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TcpServerConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TcpServerConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TcpServerConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pulse.config.inflow.v1.UdpServerConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UdpServerConfig {
    // message fields
    // @@protoc_insertion_point(field:pulse.config.inflow.v1.UdpServerConfig.bind)
    pub bind: ::protobuf::Chars,
    // @@protoc_insertion_point(field:pulse.config.inflow.v1.UdpServerConfig.protocol)
    pub protocol: ::protobuf::MessageField<super::common::WireProtocol>,
    // @@protoc_insertion_point(field:pulse.config.inflow.v1.UdpServerConfig.bind_k8s_pod_metadata_by_remote_ip)
    pub bind_k8s_pod_metadata_by_remote_ip: bool,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.inflow.v1.UdpServerConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UdpServerConfig {
    fn default() -> &'a UdpServerConfig {
        <UdpServerConfig as ::protobuf::Message>::default_instance()
    }
}

impl UdpServerConfig {
    pub fn new() -> UdpServerConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bind",
            |m: &UdpServerConfig| { &m.bind },
            |m: &mut UdpServerConfig| { &mut m.bind },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::WireProtocol>(
            "protocol",
            |m: &UdpServerConfig| { &m.protocol },
            |m: &mut UdpServerConfig| { &mut m.protocol },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bind_k8s_pod_metadata_by_remote_ip",
            |m: &UdpServerConfig| { &m.bind_k8s_pod_metadata_by_remote_ip },
            |m: &mut UdpServerConfig| { &mut m.bind_k8s_pod_metadata_by_remote_ip },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UdpServerConfig>(
            "UdpServerConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UdpServerConfig {
    const NAME: &'static str = "UdpServerConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.bind = is.read_tokio_chars()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.protocol)?;
                },
                24 => {
                    self.bind_k8s_pod_metadata_by_remote_ip = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.bind.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.bind);
        }
        if let Some(v) = self.protocol.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.bind_k8s_pod_metadata_by_remote_ip != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.bind.is_empty() {
            os.write_string(1, &self.bind)?;
        }
        if let Some(v) = self.protocol.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.bind_k8s_pod_metadata_by_remote_ip != false {
            os.write_bool(3, self.bind_k8s_pod_metadata_by_remote_ip)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UdpServerConfig {
        UdpServerConfig::new()
    }

    fn clear(&mut self) {
        self.bind.clear();
        self.protocol.clear();
        self.bind_k8s_pod_metadata_by_remote_ip = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UdpServerConfig {
        static instance: UdpServerConfig = UdpServerConfig {
            bind: ::protobuf::Chars::new(),
            protocol: ::protobuf::MessageField::none(),
            bind_k8s_pod_metadata_by_remote_ip: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UdpServerConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UdpServerConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UdpServerConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UdpServerConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pulse.config.inflow.v1.UnixServerConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UnixServerConfig {
    // message fields
    // @@protoc_insertion_point(field:pulse.config.inflow.v1.UnixServerConfig.path)
    pub path: ::protobuf::Chars,
    // @@protoc_insertion_point(field:pulse.config.inflow.v1.UnixServerConfig.protocol)
    pub protocol: ::protobuf::MessageField<super::common::WireProtocol>,
    // @@protoc_insertion_point(field:pulse.config.inflow.v1.UnixServerConfig.advanced)
    pub advanced: ::protobuf::MessageField<AdvancedSocketServerConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.inflow.v1.UnixServerConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UnixServerConfig {
    fn default() -> &'a UnixServerConfig {
        <UnixServerConfig as ::protobuf::Message>::default_instance()
    }
}

impl UnixServerConfig {
    pub fn new() -> UnixServerConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "path",
            |m: &UnixServerConfig| { &m.path },
            |m: &mut UnixServerConfig| { &mut m.path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::WireProtocol>(
            "protocol",
            |m: &UnixServerConfig| { &m.protocol },
            |m: &mut UnixServerConfig| { &mut m.protocol },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, AdvancedSocketServerConfig>(
            "advanced",
            |m: &UnixServerConfig| { &m.advanced },
            |m: &mut UnixServerConfig| { &mut m.advanced },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UnixServerConfig>(
            "UnixServerConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UnixServerConfig {
    const NAME: &'static str = "UnixServerConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.path = is.read_tokio_chars()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.protocol)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.advanced)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        if let Some(v) = self.protocol.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.advanced.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        if let Some(v) = self.protocol.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.advanced.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UnixServerConfig {
        UnixServerConfig::new()
    }

    fn clear(&mut self) {
        self.path.clear();
        self.protocol.clear();
        self.advanced.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UnixServerConfig {
        static instance: UnixServerConfig = UnixServerConfig {
            path: ::protobuf::Chars::new(),
            protocol: ::protobuf::MessageField::none(),
            advanced: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UnixServerConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UnixServerConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UnixServerConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnixServerConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!pulse/config/inflow/v1/wire.proto\x12\x16pulse.config.inflow.v1\x1a#p\
    ulse/config/common/v1/common.proto\x1a\x1egoogle/protobuf/duration.proto\
    \x1a\x17validate/validate.proto\"\xf7\x01\n\x1aAdvancedSocketServerConfi\
    g\x12F\n\x0cidle_timeout\x18\x01\x20\x01(\x0b2\x19.google.protobuf.Durat\
    ionR\x0bidleTimeoutB\x08\xfaB\x05\xaa\x01\x02*\0\x12$\n\x0bbuffer_size\
    \x18\x02\x20\x01(\x04H\0R\nbufferSize\x88\x01\x01\x12[\n\x17max_connecti\
    on_duration\x18\x03\x20\x01(\x0b2\x19.google.protobuf.DurationR\x15maxCo\
    nnectionDurationB\x08\xfaB\x05\xaa\x01\x02*\0B\x0e\n\x0c_buffer_size\"\
    \x94\x02\n\x0fTcpServerConfig\x12\x1b\n\x04bind\x18\x01\x20\x01(\tR\x04b\
    indB\x07\xfaB\x04r\x02\x10\x01\x12J\n\x08protocol\x18\x02\x20\x01(\x0b2$\
    .pulse.config.common.v1.WireProtocolR\x08protocolB\x08\xfaB\x05\x8a\x01\
    \x02\x10\x01\x12N\n\x08advanced\x18\x03\x20\x01(\x0b22.pulse.config.infl\
    ow.v1.AdvancedSocketServerConfigR\x08advanced\x12H\n\"bind_k8s_pod_metad\
    ata_by_remote_ip\x18\x04\x20\x01(\x08R\x1cbindK8sPodMetadataByRemoteIp\"\
    \xc4\x01\n\x0fUdpServerConfig\x12\x1b\n\x04bind\x18\x01\x20\x01(\tR\x04b\
    indB\x07\xfaB\x04r\x02\x10\x01\x12J\n\x08protocol\x18\x02\x20\x01(\x0b2$\
    .pulse.config.common.v1.WireProtocolR\x08protocolB\x08\xfaB\x05\x8a\x01\
    \x02\x10\x01\x12H\n\"bind_k8s_pod_metadata_by_remote_ip\x18\x03\x20\x01(\
    \x08R\x1cbindK8sPodMetadataByRemoteIp\"\xcb\x01\n\x10UnixServerConfig\
    \x12\x1b\n\x04path\x18\x01\x20\x01(\tR\x04pathB\x07\xfaB\x04r\x02\x10\
    \x01\x12J\n\x08protocol\x18\x02\x20\x01(\x0b2$.pulse.config.common.v1.Wi\
    reProtocolR\x08protocolB\x08\xfaB\x05\x8a\x01\x02\x10\x01\x12N\n\x08adva\
    nced\x18\x03\x20\x01(\x0b22.pulse.config.inflow.v1.AdvancedSocketServerC\
    onfigR\x08advancedb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::common::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::duration::file_descriptor().clone());
            deps.push(super::validate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(AdvancedSocketServerConfig::generated_message_descriptor_data());
            messages.push(TcpServerConfig::generated_message_descriptor_data());
            messages.push(UdpServerConfig::generated_message_descriptor_data());
            messages.push(UnixServerConfig::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
