// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 32.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `pulse/config/common/v1/file_watcher.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:pulse.config.common.v1.LocalFileSourceConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LocalFileSourceConfig {
    // message fields
    // @@protoc_insertion_point(field:pulse.config.common.v1.LocalFileSourceConfig.runtime_config)
    pub runtime_config: ::protobuf::MessageField<super::common::RuntimeConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.common.v1.LocalFileSourceConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LocalFileSourceConfig {
    fn default() -> &'a LocalFileSourceConfig {
        <LocalFileSourceConfig as ::protobuf::Message>::default_instance()
    }
}

impl LocalFileSourceConfig {
    pub fn new() -> LocalFileSourceConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::RuntimeConfig>(
            "runtime_config",
            |m: &LocalFileSourceConfig| { &m.runtime_config },
            |m: &mut LocalFileSourceConfig| { &mut m.runtime_config },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LocalFileSourceConfig>(
            "LocalFileSourceConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LocalFileSourceConfig {
    const NAME: &'static str = "LocalFileSourceConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.runtime_config)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.runtime_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.runtime_config.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LocalFileSourceConfig {
        LocalFileSourceConfig::new()
    }

    fn clear(&mut self) {
        self.runtime_config.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LocalFileSourceConfig {
        static instance: LocalFileSourceConfig = LocalFileSourceConfig {
            runtime_config: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LocalFileSourceConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LocalFileSourceConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LocalFileSourceConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LocalFileSourceConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pulse.config.common.v1.HttpFileSourceConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HttpFileSourceConfig {
    // message fields
    // @@protoc_insertion_point(field:pulse.config.common.v1.HttpFileSourceConfig.url)
    pub url: ::protobuf::Chars,
    // @@protoc_insertion_point(field:pulse.config.common.v1.HttpFileSourceConfig.interval)
    pub interval: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // @@protoc_insertion_point(field:pulse.config.common.v1.HttpFileSourceConfig.auth_bearer_token)
    pub auth_bearer_token: ::protobuf::MessageField<super::common::BearerTokenConfig>,
    // @@protoc_insertion_point(field:pulse.config.common.v1.HttpFileSourceConfig.request_timeout)
    pub request_timeout: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // @@protoc_insertion_point(field:pulse.config.common.v1.HttpFileSourceConfig.cache_path)
    pub cache_path: ::std::option::Option<::protobuf::Chars>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.common.v1.HttpFileSourceConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HttpFileSourceConfig {
    fn default() -> &'a HttpFileSourceConfig {
        <HttpFileSourceConfig as ::protobuf::Message>::default_instance()
    }
}

impl HttpFileSourceConfig {
    pub fn new() -> HttpFileSourceConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "url",
            |m: &HttpFileSourceConfig| { &m.url },
            |m: &mut HttpFileSourceConfig| { &mut m.url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "interval",
            |m: &HttpFileSourceConfig| { &m.interval },
            |m: &mut HttpFileSourceConfig| { &mut m.interval },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::BearerTokenConfig>(
            "auth_bearer_token",
            |m: &HttpFileSourceConfig| { &m.auth_bearer_token },
            |m: &mut HttpFileSourceConfig| { &mut m.auth_bearer_token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "request_timeout",
            |m: &HttpFileSourceConfig| { &m.request_timeout },
            |m: &mut HttpFileSourceConfig| { &mut m.request_timeout },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "cache_path",
            |m: &HttpFileSourceConfig| { &m.cache_path },
            |m: &mut HttpFileSourceConfig| { &mut m.cache_path },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HttpFileSourceConfig>(
            "HttpFileSourceConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HttpFileSourceConfig {
    const NAME: &'static str = "HttpFileSourceConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.url = is.read_tokio_chars()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.interval)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.auth_bearer_token)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.request_timeout)?;
                },
                42 => {
                    self.cache_path = ::std::option::Option::Some(is.read_tokio_chars()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.url.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.url);
        }
        if let Some(v) = self.interval.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.auth_bearer_token.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.request_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.cache_path.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.url.is_empty() {
            os.write_string(1, &self.url)?;
        }
        if let Some(v) = self.interval.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.auth_bearer_token.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.request_timeout.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.cache_path.as_ref() {
            os.write_string(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HttpFileSourceConfig {
        HttpFileSourceConfig::new()
    }

    fn clear(&mut self) {
        self.url.clear();
        self.interval.clear();
        self.auth_bearer_token.clear();
        self.request_timeout.clear();
        self.cache_path = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HttpFileSourceConfig {
        static instance: HttpFileSourceConfig = HttpFileSourceConfig {
            url: ::protobuf::Chars::new(),
            interval: ::protobuf::MessageField::none(),
            auth_bearer_token: ::protobuf::MessageField::none(),
            request_timeout: ::protobuf::MessageField::none(),
            cache_path: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HttpFileSourceConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HttpFileSourceConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HttpFileSourceConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpFileSourceConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pulse.config.common.v1.FileSourceConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FileSourceConfig {
    // message oneof groups
    pub file_source_type: ::std::option::Option<file_source_config::File_source_type>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.common.v1.FileSourceConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FileSourceConfig {
    fn default() -> &'a FileSourceConfig {
        <FileSourceConfig as ::protobuf::Message>::default_instance()
    }
}

impl FileSourceConfig {
    pub fn new() -> FileSourceConfig {
        ::std::default::Default::default()
    }

    // .pulse.config.common.v1.LocalFileSourceConfig local = 1;

    pub fn local(&self) -> &LocalFileSourceConfig {
        match self.file_source_type {
            ::std::option::Option::Some(file_source_config::File_source_type::Local(ref v)) => v,
            _ => <LocalFileSourceConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_local(&mut self) {
        self.file_source_type = ::std::option::Option::None;
    }

    pub fn has_local(&self) -> bool {
        match self.file_source_type {
            ::std::option::Option::Some(file_source_config::File_source_type::Local(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_local(&mut self, v: LocalFileSourceConfig) {
        self.file_source_type = ::std::option::Option::Some(file_source_config::File_source_type::Local(v))
    }

    // Mutable pointer to the field.
    pub fn mut_local(&mut self) -> &mut LocalFileSourceConfig {
        if let ::std::option::Option::Some(file_source_config::File_source_type::Local(_)) = self.file_source_type {
        } else {
            self.file_source_type = ::std::option::Option::Some(file_source_config::File_source_type::Local(LocalFileSourceConfig::new()));
        }
        match self.file_source_type {
            ::std::option::Option::Some(file_source_config::File_source_type::Local(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_local(&mut self) -> LocalFileSourceConfig {
        if self.has_local() {
            match self.file_source_type.take() {
                ::std::option::Option::Some(file_source_config::File_source_type::Local(v)) => v,
                _ => panic!(),
            }
        } else {
            LocalFileSourceConfig::new()
        }
    }

    // .pulse.config.common.v1.HttpFileSourceConfig http = 2;

    pub fn http(&self) -> &HttpFileSourceConfig {
        match self.file_source_type {
            ::std::option::Option::Some(file_source_config::File_source_type::Http(ref v)) => v,
            _ => <HttpFileSourceConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_http(&mut self) {
        self.file_source_type = ::std::option::Option::None;
    }

    pub fn has_http(&self) -> bool {
        match self.file_source_type {
            ::std::option::Option::Some(file_source_config::File_source_type::Http(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_http(&mut self, v: HttpFileSourceConfig) {
        self.file_source_type = ::std::option::Option::Some(file_source_config::File_source_type::Http(v))
    }

    // Mutable pointer to the field.
    pub fn mut_http(&mut self) -> &mut HttpFileSourceConfig {
        if let ::std::option::Option::Some(file_source_config::File_source_type::Http(_)) = self.file_source_type {
        } else {
            self.file_source_type = ::std::option::Option::Some(file_source_config::File_source_type::Http(HttpFileSourceConfig::new()));
        }
        match self.file_source_type {
            ::std::option::Option::Some(file_source_config::File_source_type::Http(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_http(&mut self) -> HttpFileSourceConfig {
        if self.has_http() {
            match self.file_source_type.take() {
                ::std::option::Option::Some(file_source_config::File_source_type::Http(v)) => v,
                _ => panic!(),
            }
        } else {
            HttpFileSourceConfig::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, LocalFileSourceConfig>(
            "local",
            FileSourceConfig::has_local,
            FileSourceConfig::local,
            FileSourceConfig::mut_local,
            FileSourceConfig::set_local,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, HttpFileSourceConfig>(
            "http",
            FileSourceConfig::has_http,
            FileSourceConfig::http,
            FileSourceConfig::mut_http,
            FileSourceConfig::set_http,
        ));
        oneofs.push(file_source_config::File_source_type::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FileSourceConfig>(
            "FileSourceConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FileSourceConfig {
    const NAME: &'static str = "FileSourceConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.file_source_type = ::std::option::Option::Some(file_source_config::File_source_type::Local(is.read_message()?));
                },
                18 => {
                    self.file_source_type = ::std::option::Option::Some(file_source_config::File_source_type::Http(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.file_source_type {
            match v {
                &file_source_config::File_source_type::Local(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &file_source_config::File_source_type::Http(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.file_source_type {
            match v {
                &file_source_config::File_source_type::Local(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &file_source_config::File_source_type::Http(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FileSourceConfig {
        FileSourceConfig::new()
    }

    fn clear(&mut self) {
        self.file_source_type = ::std::option::Option::None;
        self.file_source_type = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FileSourceConfig {
        static instance: FileSourceConfig = FileSourceConfig {
            file_source_type: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FileSourceConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FileSourceConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FileSourceConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FileSourceConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `FileSourceConfig`
pub mod file_source_config {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:pulse.config.common.v1.FileSourceConfig.file_source_type)
    pub enum File_source_type {
        // @@protoc_insertion_point(oneof_field:pulse.config.common.v1.FileSourceConfig.local)
        Local(super::LocalFileSourceConfig),
        // @@protoc_insertion_point(oneof_field:pulse.config.common.v1.FileSourceConfig.http)
        Http(super::HttpFileSourceConfig),
    }

    impl ::protobuf::Oneof for File_source_type {
    }

    impl ::protobuf::OneofFull for File_source_type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::FileSourceConfig as ::protobuf::MessageFull>::descriptor().oneof_by_name("file_source_type").unwrap()).clone()
        }
    }

    impl File_source_type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<File_source_type>("file_source_type")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)pulse/config/common/v1/file_watcher.proto\x12\x16pulse.config.common.\
    v1\x1a#pulse/config/common/v1/common.proto\x1a\x1egoogle/protobuf/durati\
    on.proto\x1a\x17validate/validate.proto\"o\n\x15LocalFileSourceConfig\
    \x12V\n\x0eruntime_config\x18\x01\x20\x01(\x0b2%.pulse.config.common.v1.\
    RuntimeConfigR\rruntimeConfigB\x08\xfaB\x05\x8a\x01\x02\x10\x01\"\xee\
    \x02\n\x14HttpFileSourceConfig\x12\x19\n\x03url\x18\x01\x20\x01(\tR\x03u\
    rlB\x07\xfaB\x04r\x02\x10\x01\x12?\n\x08interval\x18\x02\x20\x01(\x0b2\
    \x19.google.protobuf.DurationR\x08intervalB\x08\xfaB\x05\xaa\x01\x02*\0\
    \x12Z\n\x11auth_bearer_token\x18\x03\x20\x01(\x0b2).pulse.config.common.\
    v1.BearerTokenConfigH\0R\x0fauthBearerToken\x88\x01\x01\x12L\n\x0freques\
    t_timeout\x18\x04\x20\x01(\x0b2\x19.google.protobuf.DurationR\x0erequest\
    TimeoutB\x08\xfaB\x05\xaa\x01\x02*\0\x12+\n\ncache_path\x18\x05\x20\x01(\
    \tH\x01R\tcachePathB\x07\xfaB\x04r\x02\x10\x01\x88\x01\x01B\x14\n\x12_au\
    th_bearer_tokenB\r\n\x0b_cache_path\"\xb6\x01\n\x10FileSourceConfig\x12E\
    \n\x05local\x18\x01\x20\x01(\x0b2-.pulse.config.common.v1.LocalFileSourc\
    eConfigH\0R\x05local\x12B\n\x04http\x18\x02\x20\x01(\x0b2,.pulse.config.\
    common.v1.HttpFileSourceConfigH\0R\x04httpB\x17\n\x10file_source_type\
    \x12\x03\xf8B\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::common::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::duration::file_descriptor().clone());
            deps.push(super::validate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(LocalFileSourceConfig::generated_message_descriptor_data());
            messages.push(HttpFileSourceConfig::generated_message_descriptor_data());
            messages.push(FileSourceConfig::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
