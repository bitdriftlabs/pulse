// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 32.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `pulse/config/common/v1/common.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:pulse.config.common.v1.WireProtocol)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct WireProtocol {
    // message oneof groups
    pub protocol_type: ::std::option::Option<wire_protocol::Protocol_type>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.common.v1.WireProtocol.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WireProtocol {
    fn default() -> &'a WireProtocol {
        <WireProtocol as ::protobuf::Message>::default_instance()
    }
}

impl WireProtocol {
    pub fn new() -> WireProtocol {
        ::std::default::Default::default()
    }

    // .pulse.config.common.v1.WireProtocol.Carbon carbon = 1;

    pub fn carbon(&self) -> &wire_protocol::Carbon {
        match self.protocol_type {
            ::std::option::Option::Some(wire_protocol::Protocol_type::Carbon(ref v)) => v,
            _ => <wire_protocol::Carbon as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_carbon(&mut self) {
        self.protocol_type = ::std::option::Option::None;
    }

    pub fn has_carbon(&self) -> bool {
        match self.protocol_type {
            ::std::option::Option::Some(wire_protocol::Protocol_type::Carbon(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_carbon(&mut self, v: wire_protocol::Carbon) {
        self.protocol_type = ::std::option::Option::Some(wire_protocol::Protocol_type::Carbon(v))
    }

    // Mutable pointer to the field.
    pub fn mut_carbon(&mut self) -> &mut wire_protocol::Carbon {
        if let ::std::option::Option::Some(wire_protocol::Protocol_type::Carbon(_)) = self.protocol_type {
        } else {
            self.protocol_type = ::std::option::Option::Some(wire_protocol::Protocol_type::Carbon(wire_protocol::Carbon::new()));
        }
        match self.protocol_type {
            ::std::option::Option::Some(wire_protocol::Protocol_type::Carbon(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_carbon(&mut self) -> wire_protocol::Carbon {
        if self.has_carbon() {
            match self.protocol_type.take() {
                ::std::option::Option::Some(wire_protocol::Protocol_type::Carbon(v)) => v,
                _ => panic!(),
            }
        } else {
            wire_protocol::Carbon::new()
        }
    }

    // .pulse.config.common.v1.WireProtocol.StatsD statsd = 2;

    pub fn statsd(&self) -> &wire_protocol::StatsD {
        match self.protocol_type {
            ::std::option::Option::Some(wire_protocol::Protocol_type::Statsd(ref v)) => v,
            _ => <wire_protocol::StatsD as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_statsd(&mut self) {
        self.protocol_type = ::std::option::Option::None;
    }

    pub fn has_statsd(&self) -> bool {
        match self.protocol_type {
            ::std::option::Option::Some(wire_protocol::Protocol_type::Statsd(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_statsd(&mut self, v: wire_protocol::StatsD) {
        self.protocol_type = ::std::option::Option::Some(wire_protocol::Protocol_type::Statsd(v))
    }

    // Mutable pointer to the field.
    pub fn mut_statsd(&mut self) -> &mut wire_protocol::StatsD {
        if let ::std::option::Option::Some(wire_protocol::Protocol_type::Statsd(_)) = self.protocol_type {
        } else {
            self.protocol_type = ::std::option::Option::Some(wire_protocol::Protocol_type::Statsd(wire_protocol::StatsD::new()));
        }
        match self.protocol_type {
            ::std::option::Option::Some(wire_protocol::Protocol_type::Statsd(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_statsd(&mut self) -> wire_protocol::StatsD {
        if self.has_statsd() {
            match self.protocol_type.take() {
                ::std::option::Option::Some(wire_protocol::Protocol_type::Statsd(v)) => v,
                _ => panic!(),
            }
        } else {
            wire_protocol::StatsD::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, wire_protocol::Carbon>(
            "carbon",
            WireProtocol::has_carbon,
            WireProtocol::carbon,
            WireProtocol::mut_carbon,
            WireProtocol::set_carbon,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, wire_protocol::StatsD>(
            "statsd",
            WireProtocol::has_statsd,
            WireProtocol::statsd,
            WireProtocol::mut_statsd,
            WireProtocol::set_statsd,
        ));
        oneofs.push(wire_protocol::Protocol_type::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WireProtocol>(
            "WireProtocol",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WireProtocol {
    const NAME: &'static str = "WireProtocol";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.protocol_type = ::std::option::Option::Some(wire_protocol::Protocol_type::Carbon(is.read_message()?));
                },
                18 => {
                    self.protocol_type = ::std::option::Option::Some(wire_protocol::Protocol_type::Statsd(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.protocol_type {
            match v {
                &wire_protocol::Protocol_type::Carbon(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &wire_protocol::Protocol_type::Statsd(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.protocol_type {
            match v {
                &wire_protocol::Protocol_type::Carbon(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &wire_protocol::Protocol_type::Statsd(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WireProtocol {
        WireProtocol::new()
    }

    fn clear(&mut self) {
        self.protocol_type = ::std::option::Option::None;
        self.protocol_type = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WireProtocol {
        static instance: WireProtocol = WireProtocol {
            protocol_type: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WireProtocol {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WireProtocol").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WireProtocol {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WireProtocol {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `WireProtocol`
pub mod wire_protocol {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:pulse.config.common.v1.WireProtocol.protocol_type)
    pub enum Protocol_type {
        // @@protoc_insertion_point(oneof_field:pulse.config.common.v1.WireProtocol.carbon)
        Carbon(Carbon),
        // @@protoc_insertion_point(oneof_field:pulse.config.common.v1.WireProtocol.statsd)
        Statsd(StatsD),
    }

    impl ::protobuf::Oneof for Protocol_type {
    }

    impl ::protobuf::OneofFull for Protocol_type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::WireProtocol as ::protobuf::MessageFull>::descriptor().oneof_by_name("protocol_type").unwrap()).clone()
        }
    }

    impl Protocol_type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Protocol_type>("protocol_type")
        }
    }
    // @@protoc_insertion_point(message:pulse.config.common.v1.WireProtocol.Carbon)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Carbon {
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.common.v1.WireProtocol.Carbon.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Carbon {
        fn default() -> &'a Carbon {
            <Carbon as ::protobuf::Message>::default_instance()
        }
    }

    impl Carbon {
        pub fn new() -> Carbon {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(0);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Carbon>(
                "WireProtocol.Carbon",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Carbon {
        const NAME: &'static str = "Carbon";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Carbon {
            Carbon::new()
        }

        fn clear(&mut self) {
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Carbon {
            static instance: Carbon = Carbon {
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Carbon {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("WireProtocol.Carbon").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Carbon {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Carbon {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:pulse.config.common.v1.WireProtocol.StatsD)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct StatsD {
        // message fields
        // @@protoc_insertion_point(field:pulse.config.common.v1.WireProtocol.StatsD.lyft_tags)
        pub lyft_tags: bool,
        // @@protoc_insertion_point(field:pulse.config.common.v1.WireProtocol.StatsD.sanitize_tags)
        pub sanitize_tags: bool,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.common.v1.WireProtocol.StatsD.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a StatsD {
        fn default() -> &'a StatsD {
            <StatsD as ::protobuf::Message>::default_instance()
        }
    }

    impl StatsD {
        pub fn new() -> StatsD {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "lyft_tags",
                |m: &StatsD| { &m.lyft_tags },
                |m: &mut StatsD| { &mut m.lyft_tags },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "sanitize_tags",
                |m: &StatsD| { &m.sanitize_tags },
                |m: &mut StatsD| { &mut m.sanitize_tags },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StatsD>(
                "WireProtocol.StatsD",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for StatsD {
        const NAME: &'static str = "StatsD";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.lyft_tags = is.read_bool()?;
                    },
                    16 => {
                        self.sanitize_tags = is.read_bool()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.lyft_tags != false {
                my_size += 1 + 1;
            }
            if self.sanitize_tags != false {
                my_size += 1 + 1;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.lyft_tags != false {
                os.write_bool(1, self.lyft_tags)?;
            }
            if self.sanitize_tags != false {
                os.write_bool(2, self.sanitize_tags)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> StatsD {
            StatsD::new()
        }

        fn clear(&mut self) {
            self.lyft_tags = false;
            self.sanitize_tags = false;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static StatsD {
            static instance: StatsD = StatsD {
                lyft_tags: false,
                sanitize_tags: false,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for StatsD {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("WireProtocol.StatsD").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for StatsD {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for StatsD {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:pulse.config.common.v1.BearerTokenConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BearerTokenConfig {
    // message oneof groups
    pub token_type: ::std::option::Option<bearer_token_config::Token_type>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.common.v1.BearerTokenConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BearerTokenConfig {
    fn default() -> &'a BearerTokenConfig {
        <BearerTokenConfig as ::protobuf::Message>::default_instance()
    }
}

impl BearerTokenConfig {
    pub fn new() -> BearerTokenConfig {
        ::std::default::Default::default()
    }

    // string token = 1;

    pub fn token(&self) -> &str {
        match self.token_type {
            ::std::option::Option::Some(bearer_token_config::Token_type::Token(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_token(&mut self) {
        self.token_type = ::std::option::Option::None;
    }

    pub fn has_token(&self) -> bool {
        match self.token_type {
            ::std::option::Option::Some(bearer_token_config::Token_type::Token(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::protobuf::Chars) {
        self.token_type = ::std::option::Option::Some(bearer_token_config::Token_type::Token(v))
    }

    // Mutable pointer to the field.
    pub fn mut_token(&mut self) -> &mut ::protobuf::Chars {
        if let ::std::option::Option::Some(bearer_token_config::Token_type::Token(_)) = self.token_type {
        } else {
            self.token_type = ::std::option::Option::Some(bearer_token_config::Token_type::Token(::protobuf::Chars::new()));
        }
        match self.token_type {
            ::std::option::Option::Some(bearer_token_config::Token_type::Token(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_token(&mut self) -> ::protobuf::Chars {
        if self.has_token() {
            match self.token_type.take() {
                ::std::option::Option::Some(bearer_token_config::Token_type::Token(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::Chars::new()
        }
    }

    // string file_path = 2;

    pub fn file_path(&self) -> &str {
        match self.token_type {
            ::std::option::Option::Some(bearer_token_config::Token_type::FilePath(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_file_path(&mut self) {
        self.token_type = ::std::option::Option::None;
    }

    pub fn has_file_path(&self) -> bool {
        match self.token_type {
            ::std::option::Option::Some(bearer_token_config::Token_type::FilePath(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_file_path(&mut self, v: ::protobuf::Chars) {
        self.token_type = ::std::option::Option::Some(bearer_token_config::Token_type::FilePath(v))
    }

    // Mutable pointer to the field.
    pub fn mut_file_path(&mut self) -> &mut ::protobuf::Chars {
        if let ::std::option::Option::Some(bearer_token_config::Token_type::FilePath(_)) = self.token_type {
        } else {
            self.token_type = ::std::option::Option::Some(bearer_token_config::Token_type::FilePath(::protobuf::Chars::new()));
        }
        match self.token_type {
            ::std::option::Option::Some(bearer_token_config::Token_type::FilePath(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_file_path(&mut self) -> ::protobuf::Chars {
        if self.has_file_path() {
            match self.token_type.take() {
                ::std::option::Option::Some(bearer_token_config::Token_type::FilePath(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::Chars::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "token",
            BearerTokenConfig::has_token,
            BearerTokenConfig::token,
            BearerTokenConfig::set_token,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "file_path",
            BearerTokenConfig::has_file_path,
            BearerTokenConfig::file_path,
            BearerTokenConfig::set_file_path,
        ));
        oneofs.push(bearer_token_config::Token_type::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BearerTokenConfig>(
            "BearerTokenConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BearerTokenConfig {
    const NAME: &'static str = "BearerTokenConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.token_type = ::std::option::Option::Some(bearer_token_config::Token_type::Token(is.read_tokio_chars()?));
                },
                18 => {
                    self.token_type = ::std::option::Option::Some(bearer_token_config::Token_type::FilePath(is.read_tokio_chars()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.token_type {
            match v {
                &bearer_token_config::Token_type::Token(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &bearer_token_config::Token_type::FilePath(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.token_type {
            match v {
                &bearer_token_config::Token_type::Token(ref v) => {
                    os.write_string(1, v)?;
                },
                &bearer_token_config::Token_type::FilePath(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BearerTokenConfig {
        BearerTokenConfig::new()
    }

    fn clear(&mut self) {
        self.token_type = ::std::option::Option::None;
        self.token_type = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BearerTokenConfig {
        static instance: BearerTokenConfig = BearerTokenConfig {
            token_type: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BearerTokenConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BearerTokenConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BearerTokenConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BearerTokenConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `BearerTokenConfig`
pub mod bearer_token_config {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:pulse.config.common.v1.BearerTokenConfig.token_type)
    pub enum Token_type {
        // @@protoc_insertion_point(oneof_field:pulse.config.common.v1.BearerTokenConfig.token)
        Token(::protobuf::Chars),
        // @@protoc_insertion_point(oneof_field:pulse.config.common.v1.BearerTokenConfig.file_path)
        FilePath(::protobuf::Chars),
    }

    impl ::protobuf::Oneof for Token_type {
    }

    impl ::protobuf::OneofFull for Token_type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::BearerTokenConfig as ::protobuf::MessageFull>::descriptor().oneof_by_name("token_type").unwrap()).clone()
        }
    }

    impl Token_type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Token_type>("token_type")
        }
    }
}

// @@protoc_insertion_point(message:pulse.config.common.v1.EnvOrInline)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EnvOrInline {
    // message oneof groups
    pub data_type: ::std::option::Option<env_or_inline::Data_type>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.common.v1.EnvOrInline.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EnvOrInline {
    fn default() -> &'a EnvOrInline {
        <EnvOrInline as ::protobuf::Message>::default_instance()
    }
}

impl EnvOrInline {
    pub fn new() -> EnvOrInline {
        ::std::default::Default::default()
    }

    // string env_var = 1;

    pub fn env_var(&self) -> &str {
        match self.data_type {
            ::std::option::Option::Some(env_or_inline::Data_type::EnvVar(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_env_var(&mut self) {
        self.data_type = ::std::option::Option::None;
    }

    pub fn has_env_var(&self) -> bool {
        match self.data_type {
            ::std::option::Option::Some(env_or_inline::Data_type::EnvVar(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_env_var(&mut self, v: ::protobuf::Chars) {
        self.data_type = ::std::option::Option::Some(env_or_inline::Data_type::EnvVar(v))
    }

    // Mutable pointer to the field.
    pub fn mut_env_var(&mut self) -> &mut ::protobuf::Chars {
        if let ::std::option::Option::Some(env_or_inline::Data_type::EnvVar(_)) = self.data_type {
        } else {
            self.data_type = ::std::option::Option::Some(env_or_inline::Data_type::EnvVar(::protobuf::Chars::new()));
        }
        match self.data_type {
            ::std::option::Option::Some(env_or_inline::Data_type::EnvVar(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_env_var(&mut self) -> ::protobuf::Chars {
        if self.has_env_var() {
            match self.data_type.take() {
                ::std::option::Option::Some(env_or_inline::Data_type::EnvVar(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::Chars::new()
        }
    }

    // string inline = 2;

    pub fn inline(&self) -> &str {
        match self.data_type {
            ::std::option::Option::Some(env_or_inline::Data_type::Inline(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_inline(&mut self) {
        self.data_type = ::std::option::Option::None;
    }

    pub fn has_inline(&self) -> bool {
        match self.data_type {
            ::std::option::Option::Some(env_or_inline::Data_type::Inline(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_inline(&mut self, v: ::protobuf::Chars) {
        self.data_type = ::std::option::Option::Some(env_or_inline::Data_type::Inline(v))
    }

    // Mutable pointer to the field.
    pub fn mut_inline(&mut self) -> &mut ::protobuf::Chars {
        if let ::std::option::Option::Some(env_or_inline::Data_type::Inline(_)) = self.data_type {
        } else {
            self.data_type = ::std::option::Option::Some(env_or_inline::Data_type::Inline(::protobuf::Chars::new()));
        }
        match self.data_type {
            ::std::option::Option::Some(env_or_inline::Data_type::Inline(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_inline(&mut self) -> ::protobuf::Chars {
        if self.has_inline() {
            match self.data_type.take() {
                ::std::option::Option::Some(env_or_inline::Data_type::Inline(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::Chars::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "env_var",
            EnvOrInline::has_env_var,
            EnvOrInline::env_var,
            EnvOrInline::set_env_var,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "inline",
            EnvOrInline::has_inline,
            EnvOrInline::inline,
            EnvOrInline::set_inline,
        ));
        oneofs.push(env_or_inline::Data_type::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EnvOrInline>(
            "EnvOrInline",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EnvOrInline {
    const NAME: &'static str = "EnvOrInline";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data_type = ::std::option::Option::Some(env_or_inline::Data_type::EnvVar(is.read_tokio_chars()?));
                },
                18 => {
                    self.data_type = ::std::option::Option::Some(env_or_inline::Data_type::Inline(is.read_tokio_chars()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.data_type {
            match v {
                &env_or_inline::Data_type::EnvVar(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &env_or_inline::Data_type::Inline(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.data_type {
            match v {
                &env_or_inline::Data_type::EnvVar(ref v) => {
                    os.write_string(1, v)?;
                },
                &env_or_inline::Data_type::Inline(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EnvOrInline {
        EnvOrInline::new()
    }

    fn clear(&mut self) {
        self.data_type = ::std::option::Option::None;
        self.data_type = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EnvOrInline {
        static instance: EnvOrInline = EnvOrInline {
            data_type: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EnvOrInline {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EnvOrInline").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EnvOrInline {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnvOrInline {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `EnvOrInline`
pub mod env_or_inline {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:pulse.config.common.v1.EnvOrInline.data_type)
    pub enum Data_type {
        // @@protoc_insertion_point(oneof_field:pulse.config.common.v1.EnvOrInline.env_var)
        EnvVar(::protobuf::Chars),
        // @@protoc_insertion_point(oneof_field:pulse.config.common.v1.EnvOrInline.inline)
        Inline(::protobuf::Chars),
    }

    impl ::protobuf::Oneof for Data_type {
    }

    impl ::protobuf::OneofFull for Data_type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::EnvOrInline as ::protobuf::MessageFull>::descriptor().oneof_by_name("data_type").unwrap()).clone()
        }
    }

    impl Data_type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Data_type>("data_type")
        }
    }
}

// @@protoc_insertion_point(message:pulse.config.common.v1.EnvInlineOrFile)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EnvInlineOrFile {
    // message oneof groups
    pub data_type: ::std::option::Option<env_inline_or_file::Data_type>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.common.v1.EnvInlineOrFile.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EnvInlineOrFile {
    fn default() -> &'a EnvInlineOrFile {
        <EnvInlineOrFile as ::protobuf::Message>::default_instance()
    }
}

impl EnvInlineOrFile {
    pub fn new() -> EnvInlineOrFile {
        ::std::default::Default::default()
    }

    // .pulse.config.common.v1.EnvOrInline env_or_inline = 1;

    pub fn env_or_inline(&self) -> &EnvOrInline {
        match self.data_type {
            ::std::option::Option::Some(env_inline_or_file::Data_type::EnvOrInline(ref v)) => v,
            _ => <EnvOrInline as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_env_or_inline(&mut self) {
        self.data_type = ::std::option::Option::None;
    }

    pub fn has_env_or_inline(&self) -> bool {
        match self.data_type {
            ::std::option::Option::Some(env_inline_or_file::Data_type::EnvOrInline(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_env_or_inline(&mut self, v: EnvOrInline) {
        self.data_type = ::std::option::Option::Some(env_inline_or_file::Data_type::EnvOrInline(v))
    }

    // Mutable pointer to the field.
    pub fn mut_env_or_inline(&mut self) -> &mut EnvOrInline {
        if let ::std::option::Option::Some(env_inline_or_file::Data_type::EnvOrInline(_)) = self.data_type {
        } else {
            self.data_type = ::std::option::Option::Some(env_inline_or_file::Data_type::EnvOrInline(EnvOrInline::new()));
        }
        match self.data_type {
            ::std::option::Option::Some(env_inline_or_file::Data_type::EnvOrInline(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_env_or_inline(&mut self) -> EnvOrInline {
        if self.has_env_or_inline() {
            match self.data_type.take() {
                ::std::option::Option::Some(env_inline_or_file::Data_type::EnvOrInline(v)) => v,
                _ => panic!(),
            }
        } else {
            EnvOrInline::new()
        }
    }

    // string file_path = 2;

    pub fn file_path(&self) -> &str {
        match self.data_type {
            ::std::option::Option::Some(env_inline_or_file::Data_type::FilePath(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_file_path(&mut self) {
        self.data_type = ::std::option::Option::None;
    }

    pub fn has_file_path(&self) -> bool {
        match self.data_type {
            ::std::option::Option::Some(env_inline_or_file::Data_type::FilePath(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_file_path(&mut self, v: ::protobuf::Chars) {
        self.data_type = ::std::option::Option::Some(env_inline_or_file::Data_type::FilePath(v))
    }

    // Mutable pointer to the field.
    pub fn mut_file_path(&mut self) -> &mut ::protobuf::Chars {
        if let ::std::option::Option::Some(env_inline_or_file::Data_type::FilePath(_)) = self.data_type {
        } else {
            self.data_type = ::std::option::Option::Some(env_inline_or_file::Data_type::FilePath(::protobuf::Chars::new()));
        }
        match self.data_type {
            ::std::option::Option::Some(env_inline_or_file::Data_type::FilePath(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_file_path(&mut self) -> ::protobuf::Chars {
        if self.has_file_path() {
            match self.data_type.take() {
                ::std::option::Option::Some(env_inline_or_file::Data_type::FilePath(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::Chars::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, EnvOrInline>(
            "env_or_inline",
            EnvInlineOrFile::has_env_or_inline,
            EnvInlineOrFile::env_or_inline,
            EnvInlineOrFile::mut_env_or_inline,
            EnvInlineOrFile::set_env_or_inline,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "file_path",
            EnvInlineOrFile::has_file_path,
            EnvInlineOrFile::file_path,
            EnvInlineOrFile::set_file_path,
        ));
        oneofs.push(env_inline_or_file::Data_type::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EnvInlineOrFile>(
            "EnvInlineOrFile",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EnvInlineOrFile {
    const NAME: &'static str = "EnvInlineOrFile";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data_type = ::std::option::Option::Some(env_inline_or_file::Data_type::EnvOrInline(is.read_message()?));
                },
                18 => {
                    self.data_type = ::std::option::Option::Some(env_inline_or_file::Data_type::FilePath(is.read_tokio_chars()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.data_type {
            match v {
                &env_inline_or_file::Data_type::EnvOrInline(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &env_inline_or_file::Data_type::FilePath(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.data_type {
            match v {
                &env_inline_or_file::Data_type::EnvOrInline(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &env_inline_or_file::Data_type::FilePath(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EnvInlineOrFile {
        EnvInlineOrFile::new()
    }

    fn clear(&mut self) {
        self.data_type = ::std::option::Option::None;
        self.data_type = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EnvInlineOrFile {
        static instance: EnvInlineOrFile = EnvInlineOrFile {
            data_type: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EnvInlineOrFile {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EnvInlineOrFile").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EnvInlineOrFile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnvInlineOrFile {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `EnvInlineOrFile`
pub mod env_inline_or_file {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:pulse.config.common.v1.EnvInlineOrFile.data_type)
    pub enum Data_type {
        // @@protoc_insertion_point(oneof_field:pulse.config.common.v1.EnvInlineOrFile.env_or_inline)
        EnvOrInline(super::EnvOrInline),
        // @@protoc_insertion_point(oneof_field:pulse.config.common.v1.EnvInlineOrFile.file_path)
        FilePath(::protobuf::Chars),
    }

    impl ::protobuf::Oneof for Data_type {
    }

    impl ::protobuf::OneofFull for Data_type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::EnvInlineOrFile as ::protobuf::MessageFull>::descriptor().oneof_by_name("data_type").unwrap()).clone()
        }
    }

    impl Data_type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Data_type>("data_type")
        }
    }
}

// @@protoc_insertion_point(message:pulse.config.common.v1.RuntimeConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RuntimeConfig {
    // message fields
    // @@protoc_insertion_point(field:pulse.config.common.v1.RuntimeConfig.dir)
    pub dir: ::protobuf::Chars,
    // @@protoc_insertion_point(field:pulse.config.common.v1.RuntimeConfig.file)
    pub file: ::protobuf::Chars,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.common.v1.RuntimeConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RuntimeConfig {
    fn default() -> &'a RuntimeConfig {
        <RuntimeConfig as ::protobuf::Message>::default_instance()
    }
}

impl RuntimeConfig {
    pub fn new() -> RuntimeConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dir",
            |m: &RuntimeConfig| { &m.dir },
            |m: &mut RuntimeConfig| { &mut m.dir },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "file",
            |m: &RuntimeConfig| { &m.file },
            |m: &mut RuntimeConfig| { &mut m.file },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RuntimeConfig>(
            "RuntimeConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RuntimeConfig {
    const NAME: &'static str = "RuntimeConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.dir = is.read_tokio_chars()?;
                },
                18 => {
                    self.file = is.read_tokio_chars()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.dir.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.dir);
        }
        if !self.file.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.file);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.dir.is_empty() {
            os.write_string(1, &self.dir)?;
        }
        if !self.file.is_empty() {
            os.write_string(2, &self.file)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RuntimeConfig {
        RuntimeConfig::new()
    }

    fn clear(&mut self) {
        self.dir.clear();
        self.file.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RuntimeConfig {
        static instance: RuntimeConfig = RuntimeConfig {
            dir: ::protobuf::Chars::new(),
            file: ::protobuf::Chars::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RuntimeConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RuntimeConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RuntimeConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RuntimeConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#pulse/config/common/v1/common.proto\x12\x16pulse.config.common.v1\x1a\
    \x17validate/validate.proto\"\x88\x02\n\x0cWireProtocol\x12E\n\x06carbon\
    \x18\x01\x20\x01(\x0b2+.pulse.config.common.v1.WireProtocol.CarbonH\0R\
    \x06carbon\x12E\n\x06statsd\x18\x02\x20\x01(\x0b2+.pulse.config.common.v\
    1.WireProtocol.StatsDH\0R\x06statsd\x1a\x08\n\x06Carbon\x1aJ\n\x06StatsD\
    \x12\x1b\n\tlyft_tags\x18\x01\x20\x01(\x08R\x08lyftTags\x12#\n\rsanitize\
    _tags\x18\x02\x20\x01(\x08R\x0csanitizeTagsB\x14\n\rprotocol_type\x12\
    \x03\xf8B\x01\"o\n\x11BearerTokenConfig\x12\x1f\n\x05token\x18\x01\x20\
    \x01(\tH\0R\x05tokenB\x07\xfaB\x04r\x02\x10\x01\x12&\n\tfile_path\x18\
    \x02\x20\x01(\tH\0R\x08filePathB\x07\xfaB\x04r\x02\x10\x01B\x11\n\ntoken\
    _type\x12\x03\xf8B\x01\"f\n\x0bEnvOrInline\x12\"\n\x07env_var\x18\x01\
    \x20\x01(\tH\0R\x06envVarB\x07\xfaB\x04r\x02\x10\x01\x12!\n\x06inline\
    \x18\x02\x20\x01(\tH\0R\x06inlineB\x07\xfaB\x04r\x02\x10\x01B\x10\n\tdat\
    a_type\x12\x03\xf8B\x01\"\x96\x01\n\x0fEnvInlineOrFile\x12I\n\renv_or_in\
    line\x18\x01\x20\x01(\x0b2#.pulse.config.common.v1.EnvOrInlineH\0R\x0ben\
    vOrInline\x12&\n\tfile_path\x18\x02\x20\x01(\tH\0R\x08filePathB\x07\xfaB\
    \x04r\x02\x10\x01B\x10\n\tdata_type\x12\x03\xf8B\x01\"G\n\rRuntimeConfig\
    \x12\x19\n\x03dir\x18\x01\x20\x01(\tR\x03dirB\x07\xfaB\x04r\x02\x10\x01\
    \x12\x1b\n\x04file\x18\x02\x20\x01(\tR\x04fileB\x07\xfaB\x04r\x02\x10\
    \x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::validate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(WireProtocol::generated_message_descriptor_data());
            messages.push(BearerTokenConfig::generated_message_descriptor_data());
            messages.push(EnvOrInline::generated_message_descriptor_data());
            messages.push(EnvInlineOrFile::generated_message_descriptor_data());
            messages.push(RuntimeConfig::generated_message_descriptor_data());
            messages.push(wire_protocol::Carbon::generated_message_descriptor_data());
            messages.push(wire_protocol::StatsD::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
