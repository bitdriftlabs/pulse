// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 29.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `pulse/config/bootstrap/v1/bootstrap.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:pulse.config.bootstrap.v1.AdvancedPipelineConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AdvancedPipelineConfig {
    // message fields
    // @@protoc_insertion_point(field:pulse.config.bootstrap.v1.AdvancedPipelineConfig.max_cached_metrics)
    pub max_cached_metrics: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.bootstrap.v1.AdvancedPipelineConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AdvancedPipelineConfig {
    fn default() -> &'a AdvancedPipelineConfig {
        <AdvancedPipelineConfig as ::protobuf::Message>::default_instance()
    }
}

impl AdvancedPipelineConfig {
    pub fn new() -> AdvancedPipelineConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "max_cached_metrics",
            |m: &AdvancedPipelineConfig| { &m.max_cached_metrics },
            |m: &mut AdvancedPipelineConfig| { &mut m.max_cached_metrics },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AdvancedPipelineConfig>(
            "AdvancedPipelineConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AdvancedPipelineConfig {
    const NAME: &'static str = "AdvancedPipelineConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.max_cached_metrics = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.max_cached_metrics {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.max_cached_metrics {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AdvancedPipelineConfig {
        AdvancedPipelineConfig::new()
    }

    fn clear(&mut self) {
        self.max_cached_metrics = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AdvancedPipelineConfig {
        static instance: AdvancedPipelineConfig = AdvancedPipelineConfig {
            max_cached_metrics: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AdvancedPipelineConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AdvancedPipelineConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AdvancedPipelineConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AdvancedPipelineConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pulse.config.bootstrap.v1.PipelineConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PipelineConfig {
    // message fields
    // @@protoc_insertion_point(field:pulse.config.bootstrap.v1.PipelineConfig.inflows)
    pub inflows: ::std::collections::HashMap<::protobuf::Chars, super::inflow::InflowConfig>,
    // @@protoc_insertion_point(field:pulse.config.bootstrap.v1.PipelineConfig.processors)
    pub processors: ::std::collections::HashMap<::protobuf::Chars, super::processor::ProcessorConfig>,
    // @@protoc_insertion_point(field:pulse.config.bootstrap.v1.PipelineConfig.outflows)
    pub outflows: ::std::collections::HashMap<::protobuf::Chars, super::outflow::OutflowConfig>,
    // @@protoc_insertion_point(field:pulse.config.bootstrap.v1.PipelineConfig.advanced)
    pub advanced: ::protobuf::MessageField<AdvancedPipelineConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.bootstrap.v1.PipelineConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PipelineConfig {
    fn default() -> &'a PipelineConfig {
        <PipelineConfig as ::protobuf::Message>::default_instance()
    }
}

impl PipelineConfig {
    pub fn new() -> PipelineConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "inflows",
            |m: &PipelineConfig| { &m.inflows },
            |m: &mut PipelineConfig| { &mut m.inflows },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "processors",
            |m: &PipelineConfig| { &m.processors },
            |m: &mut PipelineConfig| { &mut m.processors },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "outflows",
            |m: &PipelineConfig| { &m.outflows },
            |m: &mut PipelineConfig| { &mut m.outflows },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, AdvancedPipelineConfig>(
            "advanced",
            |m: &PipelineConfig| { &m.advanced },
            |m: &mut PipelineConfig| { &mut m.advanced },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PipelineConfig>(
            "PipelineConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PipelineConfig {
    const NAME: &'static str = "PipelineConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_tokio_chars()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.inflows.insert(key, value);
                },
                18 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_tokio_chars()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.processors.insert(key, value);
                },
                26 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_tokio_chars()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.outflows.insert(key, value);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.advanced)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for (k, v) in &self.inflows {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for (k, v) in &self.processors {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for (k, v) in &self.outflows {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if let Some(v) = self.advanced.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for (k, v) in &self.inflows {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(10)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for (k, v) in &self.processors {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(18)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for (k, v) in &self.outflows {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(26)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.advanced.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PipelineConfig {
        PipelineConfig::new()
    }

    fn clear(&mut self) {
        self.inflows.clear();
        self.processors.clear();
        self.outflows.clear();
        self.advanced.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PipelineConfig {
        static instance: ::protobuf::rt::Lazy<PipelineConfig> = ::protobuf::rt::Lazy::new();
        instance.get(PipelineConfig::new)
    }
}

impl ::protobuf::MessageFull for PipelineConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PipelineConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PipelineConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PipelineConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pulse.config.bootstrap.v1.MetaStats)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MetaStats {
    // message fields
    // @@protoc_insertion_point(field:pulse.config.bootstrap.v1.MetaStats.meta_protocol)
    pub meta_protocol: ::std::vec::Vec<meta_stats::MetaProtocol>,
    // @@protoc_insertion_point(field:pulse.config.bootstrap.v1.MetaStats.meta_prefix)
    pub meta_prefix: ::std::option::Option<::protobuf::Chars>,
    // @@protoc_insertion_point(field:pulse.config.bootstrap.v1.MetaStats.meta_tag)
    pub meta_tag: ::std::vec::Vec<meta_stats::MetaTag>,
    // @@protoc_insertion_point(field:pulse.config.bootstrap.v1.MetaStats.node_id)
    pub node_id: ::protobuf::MessageField<super::common::EnvOrInline>,
    // @@protoc_insertion_point(field:pulse.config.bootstrap.v1.MetaStats.flush_interval)
    pub flush_interval: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.bootstrap.v1.MetaStats.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MetaStats {
    fn default() -> &'a MetaStats {
        <MetaStats as ::protobuf::Message>::default_instance()
    }
}

impl MetaStats {
    pub fn new() -> MetaStats {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "meta_protocol",
            |m: &MetaStats| { &m.meta_protocol },
            |m: &mut MetaStats| { &mut m.meta_protocol },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "meta_prefix",
            |m: &MetaStats| { &m.meta_prefix },
            |m: &mut MetaStats| { &mut m.meta_prefix },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "meta_tag",
            |m: &MetaStats| { &m.meta_tag },
            |m: &mut MetaStats| { &mut m.meta_tag },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::EnvOrInline>(
            "node_id",
            |m: &MetaStats| { &m.node_id },
            |m: &mut MetaStats| { &mut m.node_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "flush_interval",
            |m: &MetaStats| { &m.flush_interval },
            |m: &mut MetaStats| { &mut m.flush_interval },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MetaStats>(
            "MetaStats",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MetaStats {
    const NAME: &'static str = "MetaStats";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.meta_protocol.push(is.read_message()?);
                },
                18 => {
                    self.meta_prefix = ::std::option::Option::Some(is.read_tokio_chars()?);
                },
                26 => {
                    self.meta_tag.push(is.read_message()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.node_id)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.flush_interval)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.meta_protocol {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.meta_prefix.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        for value in &self.meta_tag {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.node_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.flush_interval.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.meta_protocol {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.meta_prefix.as_ref() {
            os.write_string(2, v)?;
        }
        for v in &self.meta_tag {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if let Some(v) = self.node_id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.flush_interval.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MetaStats {
        MetaStats::new()
    }

    fn clear(&mut self) {
        self.meta_protocol.clear();
        self.meta_prefix = ::std::option::Option::None;
        self.meta_tag.clear();
        self.node_id.clear();
        self.flush_interval.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MetaStats {
        static instance: MetaStats = MetaStats {
            meta_protocol: ::std::vec::Vec::new(),
            meta_prefix: ::std::option::Option::None,
            meta_tag: ::std::vec::Vec::new(),
            node_id: ::protobuf::MessageField::none(),
            flush_interval: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MetaStats {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MetaStats").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MetaStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetaStats {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `MetaStats`
pub mod meta_stats {
    // @@protoc_insertion_point(message:pulse.config.bootstrap.v1.MetaStats.MetaProtocol)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct MetaProtocol {
        // message oneof groups
        pub protocol: ::std::option::Option<meta_protocol::Protocol>,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.bootstrap.v1.MetaStats.MetaProtocol.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a MetaProtocol {
        fn default() -> &'a MetaProtocol {
            <MetaProtocol as ::protobuf::Message>::default_instance()
        }
    }

    impl MetaProtocol {
        pub fn new() -> MetaProtocol {
            ::std::default::Default::default()
        }

        // .pulse.config.outflow.v1.TcpClientConfig wire = 1;

        pub fn wire(&self) -> &super::super::wire::TcpClientConfig {
            match self.protocol {
                ::std::option::Option::Some(meta_protocol::Protocol::Wire(ref v)) => v,
                _ => <super::super::wire::TcpClientConfig as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_wire(&mut self) {
            self.protocol = ::std::option::Option::None;
        }

        pub fn has_wire(&self) -> bool {
            match self.protocol {
                ::std::option::Option::Some(meta_protocol::Protocol::Wire(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_wire(&mut self, v: super::super::wire::TcpClientConfig) {
            self.protocol = ::std::option::Option::Some(meta_protocol::Protocol::Wire(v))
        }

        // Mutable pointer to the field.
        pub fn mut_wire(&mut self) -> &mut super::super::wire::TcpClientConfig {
            if let ::std::option::Option::Some(meta_protocol::Protocol::Wire(_)) = self.protocol {
            } else {
                self.protocol = ::std::option::Option::Some(meta_protocol::Protocol::Wire(super::super::wire::TcpClientConfig::new()));
            }
            match self.protocol {
                ::std::option::Option::Some(meta_protocol::Protocol::Wire(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_wire(&mut self) -> super::super::wire::TcpClientConfig {
            if self.has_wire() {
                match self.protocol.take() {
                    ::std::option::Option::Some(meta_protocol::Protocol::Wire(v)) => v,
                    _ => panic!(),
                }
            } else {
                super::super::wire::TcpClientConfig::new()
            }
        }

        // .pulse.config.outflow.v1.PromRemoteWriteClientConfig prom_remote_write = 2;

        pub fn prom_remote_write(&self) -> &super::super::prom_remote_write::PromRemoteWriteClientConfig {
            match self.protocol {
                ::std::option::Option::Some(meta_protocol::Protocol::PromRemoteWrite(ref v)) => v,
                _ => <super::super::prom_remote_write::PromRemoteWriteClientConfig as ::protobuf::Message>::default_instance(),
            }
        }

        pub fn clear_prom_remote_write(&mut self) {
            self.protocol = ::std::option::Option::None;
        }

        pub fn has_prom_remote_write(&self) -> bool {
            match self.protocol {
                ::std::option::Option::Some(meta_protocol::Protocol::PromRemoteWrite(..)) => true,
                _ => false,
            }
        }

        // Param is passed by value, moved
        pub fn set_prom_remote_write(&mut self, v: super::super::prom_remote_write::PromRemoteWriteClientConfig) {
            self.protocol = ::std::option::Option::Some(meta_protocol::Protocol::PromRemoteWrite(v))
        }

        // Mutable pointer to the field.
        pub fn mut_prom_remote_write(&mut self) -> &mut super::super::prom_remote_write::PromRemoteWriteClientConfig {
            if let ::std::option::Option::Some(meta_protocol::Protocol::PromRemoteWrite(_)) = self.protocol {
            } else {
                self.protocol = ::std::option::Option::Some(meta_protocol::Protocol::PromRemoteWrite(super::super::prom_remote_write::PromRemoteWriteClientConfig::new()));
            }
            match self.protocol {
                ::std::option::Option::Some(meta_protocol::Protocol::PromRemoteWrite(ref mut v)) => v,
                _ => panic!(),
            }
        }

        // Take field
        pub fn take_prom_remote_write(&mut self) -> super::super::prom_remote_write::PromRemoteWriteClientConfig {
            if self.has_prom_remote_write() {
                match self.protocol.take() {
                    ::std::option::Option::Some(meta_protocol::Protocol::PromRemoteWrite(v)) => v,
                    _ => panic!(),
                }
            } else {
                super::super::prom_remote_write::PromRemoteWriteClientConfig::new()
            }
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(1);
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::super::wire::TcpClientConfig>(
                "wire",
                MetaProtocol::has_wire,
                MetaProtocol::wire,
                MetaProtocol::mut_wire,
                MetaProtocol::set_wire,
            ));
            fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::super::prom_remote_write::PromRemoteWriteClientConfig>(
                "prom_remote_write",
                MetaProtocol::has_prom_remote_write,
                MetaProtocol::prom_remote_write,
                MetaProtocol::mut_prom_remote_write,
                MetaProtocol::set_prom_remote_write,
            ));
            oneofs.push(meta_protocol::Protocol::generated_oneof_descriptor_data());
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MetaProtocol>(
                "MetaStats.MetaProtocol",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for MetaProtocol {
        const NAME: &'static str = "MetaProtocol";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.protocol = ::std::option::Option::Some(meta_protocol::Protocol::Wire(is.read_message()?));
                    },
                    18 => {
                        self.protocol = ::std::option::Option::Some(meta_protocol::Protocol::PromRemoteWrite(is.read_message()?));
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let ::std::option::Option::Some(ref v) = self.protocol {
                match v {
                    &meta_protocol::Protocol::Wire(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                    &meta_protocol::Protocol::PromRemoteWrite(ref v) => {
                        let len = v.compute_size();
                        my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                    },
                };
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let ::std::option::Option::Some(ref v) = self.protocol {
                match v {
                    &meta_protocol::Protocol::Wire(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                    },
                    &meta_protocol::Protocol::PromRemoteWrite(ref v) => {
                        ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                    },
                };
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> MetaProtocol {
            MetaProtocol::new()
        }

        fn clear(&mut self) {
            self.protocol = ::std::option::Option::None;
            self.protocol = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static MetaProtocol {
            static instance: MetaProtocol = MetaProtocol {
                protocol: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for MetaProtocol {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("MetaStats.MetaProtocol").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for MetaProtocol {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for MetaProtocol {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `MetaProtocol`
    pub mod meta_protocol {

        #[derive(Clone,PartialEq,Debug)]
        // @@protoc_insertion_point(oneof:pulse.config.bootstrap.v1.MetaStats.MetaProtocol.protocol)
        pub enum Protocol {
            // @@protoc_insertion_point(oneof_field:pulse.config.bootstrap.v1.MetaStats.MetaProtocol.wire)
            Wire(super::super::super::wire::TcpClientConfig),
            // @@protoc_insertion_point(oneof_field:pulse.config.bootstrap.v1.MetaStats.MetaProtocol.prom_remote_write)
            PromRemoteWrite(super::super::super::prom_remote_write::PromRemoteWriteClientConfig),
        }

        impl ::protobuf::Oneof for Protocol {
        }

        impl ::protobuf::OneofFull for Protocol {
            fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| <super::MetaProtocol as ::protobuf::MessageFull>::descriptor().oneof_by_name("protocol").unwrap()).clone()
            }
        }

        impl Protocol {
            pub(in super::super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
                ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Protocol>("protocol")
            }
        }
    }

    // @@protoc_insertion_point(message:pulse.config.bootstrap.v1.MetaStats.MetaTag)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct MetaTag {
        // message fields
        // @@protoc_insertion_point(field:pulse.config.bootstrap.v1.MetaStats.MetaTag.key)
        pub key: ::protobuf::Chars,
        // @@protoc_insertion_point(field:pulse.config.bootstrap.v1.MetaStats.MetaTag.value)
        pub value: ::protobuf::Chars,
        // special fields
        // @@protoc_insertion_point(special_field:pulse.config.bootstrap.v1.MetaStats.MetaTag.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a MetaTag {
        fn default() -> &'a MetaTag {
            <MetaTag as ::protobuf::Message>::default_instance()
        }
    }

    impl MetaTag {
        pub fn new() -> MetaTag {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "key",
                |m: &MetaTag| { &m.key },
                |m: &mut MetaTag| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "value",
                |m: &MetaTag| { &m.value },
                |m: &mut MetaTag| { &mut m.value },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MetaTag>(
                "MetaStats.MetaTag",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for MetaTag {
        const NAME: &'static str = "MetaTag";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.key = is.read_tokio_chars()?;
                    },
                    18 => {
                        self.value = is.read_tokio_chars()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.key.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.key);
            }
            if !self.value.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.value);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.key.is_empty() {
                os.write_string(1, &self.key)?;
            }
            if !self.value.is_empty() {
                os.write_string(2, &self.value)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> MetaTag {
            MetaTag::new()
        }

        fn clear(&mut self) {
            self.key.clear();
            self.value.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static MetaTag {
            static instance: MetaTag = MetaTag {
                key: ::protobuf::Chars::new(),
                value: ::protobuf::Chars::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for MetaTag {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("MetaStats.MetaTag").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for MetaTag {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for MetaTag {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:pulse.config.bootstrap.v1.AdminConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AdminConfig {
    // message fields
    // @@protoc_insertion_point(field:pulse.config.bootstrap.v1.AdminConfig.bind)
    pub bind: ::protobuf::Chars,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.bootstrap.v1.AdminConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AdminConfig {
    fn default() -> &'a AdminConfig {
        <AdminConfig as ::protobuf::Message>::default_instance()
    }
}

impl AdminConfig {
    pub fn new() -> AdminConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bind",
            |m: &AdminConfig| { &m.bind },
            |m: &mut AdminConfig| { &mut m.bind },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AdminConfig>(
            "AdminConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AdminConfig {
    const NAME: &'static str = "AdminConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.bind = is.read_tokio_chars()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.bind.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.bind);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.bind.is_empty() {
            os.write_string(1, &self.bind)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AdminConfig {
        AdminConfig::new()
    }

    fn clear(&mut self) {
        self.bind.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AdminConfig {
        static instance: AdminConfig = AdminConfig {
            bind: ::protobuf::Chars::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AdminConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AdminConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AdminConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AdminConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pulse.config.bootstrap.v1.KubernetesBootstrapConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KubernetesBootstrapConfig {
    // message fields
    // @@protoc_insertion_point(field:pulse.config.bootstrap.v1.KubernetesBootstrapConfig.node_name)
    pub node_name: ::protobuf::MessageField<super::common::EnvOrInline>,
    // @@protoc_insertion_point(field:pulse.config.bootstrap.v1.KubernetesBootstrapConfig.evaluate_services)
    pub evaluate_services: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:pulse.config.bootstrap.v1.KubernetesBootstrapConfig.services_cache_interval)
    pub services_cache_interval: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // @@protoc_insertion_point(field:pulse.config.bootstrap.v1.KubernetesBootstrapConfig.pod_phases)
    pub pod_phases: ::std::vec::Vec<::protobuf::Chars>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.bootstrap.v1.KubernetesBootstrapConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KubernetesBootstrapConfig {
    fn default() -> &'a KubernetesBootstrapConfig {
        <KubernetesBootstrapConfig as ::protobuf::Message>::default_instance()
    }
}

impl KubernetesBootstrapConfig {
    pub fn new() -> KubernetesBootstrapConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::EnvOrInline>(
            "node_name",
            |m: &KubernetesBootstrapConfig| { &m.node_name },
            |m: &mut KubernetesBootstrapConfig| { &mut m.node_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "evaluate_services",
            |m: &KubernetesBootstrapConfig| { &m.evaluate_services },
            |m: &mut KubernetesBootstrapConfig| { &mut m.evaluate_services },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "services_cache_interval",
            |m: &KubernetesBootstrapConfig| { &m.services_cache_interval },
            |m: &mut KubernetesBootstrapConfig| { &mut m.services_cache_interval },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "pod_phases",
            |m: &KubernetesBootstrapConfig| { &m.pod_phases },
            |m: &mut KubernetesBootstrapConfig| { &mut m.pod_phases },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KubernetesBootstrapConfig>(
            "KubernetesBootstrapConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KubernetesBootstrapConfig {
    const NAME: &'static str = "KubernetesBootstrapConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.node_name)?;
                },
                16 => {
                    self.evaluate_services = ::std::option::Option::Some(is.read_bool()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.services_cache_interval)?;
                },
                26 => {
                    self.pod_phases.push(is.read_tokio_chars()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.node_name.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.evaluate_services {
            my_size += 1 + 1;
        }
        if let Some(v) = self.services_cache_interval.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.pod_phases {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.node_name.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.evaluate_services {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.services_cache_interval.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        for v in &self.pod_phases {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KubernetesBootstrapConfig {
        KubernetesBootstrapConfig::new()
    }

    fn clear(&mut self) {
        self.node_name.clear();
        self.evaluate_services = ::std::option::Option::None;
        self.services_cache_interval.clear();
        self.pod_phases.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KubernetesBootstrapConfig {
        static instance: KubernetesBootstrapConfig = KubernetesBootstrapConfig {
            node_name: ::protobuf::MessageField::none(),
            evaluate_services: ::std::option::Option::None,
            services_cache_interval: ::protobuf::MessageField::none(),
            pod_phases: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KubernetesBootstrapConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KubernetesBootstrapConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KubernetesBootstrapConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KubernetesBootstrapConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pulse.config.bootstrap.v1.MergedConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MergedConfig {
    // message fields
    // @@protoc_insertion_point(field:pulse.config.bootstrap.v1.MergedConfig.bootstrap)
    pub bootstrap: ::protobuf::MessageField<PipelineConfig>,
    // @@protoc_insertion_point(field:pulse.config.bootstrap.v1.MergedConfig.fs_watched_pipelines)
    pub fs_watched_pipelines: ::std::vec::Vec<super::common::RuntimeConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.bootstrap.v1.MergedConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MergedConfig {
    fn default() -> &'a MergedConfig {
        <MergedConfig as ::protobuf::Message>::default_instance()
    }
}

impl MergedConfig {
    pub fn new() -> MergedConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PipelineConfig>(
            "bootstrap",
            |m: &MergedConfig| { &m.bootstrap },
            |m: &mut MergedConfig| { &mut m.bootstrap },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "fs_watched_pipelines",
            |m: &MergedConfig| { &m.fs_watched_pipelines },
            |m: &mut MergedConfig| { &mut m.fs_watched_pipelines },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MergedConfig>(
            "MergedConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MergedConfig {
    const NAME: &'static str = "MergedConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.bootstrap)?;
                },
                18 => {
                    self.fs_watched_pipelines.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.bootstrap.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.fs_watched_pipelines {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.bootstrap.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.fs_watched_pipelines {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MergedConfig {
        MergedConfig::new()
    }

    fn clear(&mut self) {
        self.bootstrap.clear();
        self.fs_watched_pipelines.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MergedConfig {
        static instance: MergedConfig = MergedConfig {
            bootstrap: ::protobuf::MessageField::none(),
            fs_watched_pipelines: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MergedConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MergedConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MergedConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MergedConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pulse.config.bootstrap.v1.Config)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Config {
    // message fields
    // @@protoc_insertion_point(field:pulse.config.bootstrap.v1.Config.admin)
    pub admin: ::protobuf::MessageField<AdminConfig>,
    // @@protoc_insertion_point(field:pulse.config.bootstrap.v1.Config.meta_stats)
    pub meta_stats: ::protobuf::MessageField<MetaStats>,
    // @@protoc_insertion_point(field:pulse.config.bootstrap.v1.Config.kubernetes)
    pub kubernetes: ::protobuf::MessageField<KubernetesBootstrapConfig>,
    // message oneof groups
    pub pipeline_type: ::std::option::Option<config::Pipeline_type>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.config.bootstrap.v1.Config.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Config {
    fn default() -> &'a Config {
        <Config as ::protobuf::Message>::default_instance()
    }
}

impl Config {
    pub fn new() -> Config {
        ::std::default::Default::default()
    }

    // .pulse.config.bootstrap.v1.PipelineConfig pipeline = 4;

    pub fn pipeline(&self) -> &PipelineConfig {
        match self.pipeline_type {
            ::std::option::Option::Some(config::Pipeline_type::Pipeline(ref v)) => v,
            _ => <PipelineConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_pipeline(&mut self) {
        self.pipeline_type = ::std::option::Option::None;
    }

    pub fn has_pipeline(&self) -> bool {
        match self.pipeline_type {
            ::std::option::Option::Some(config::Pipeline_type::Pipeline(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pipeline(&mut self, v: PipelineConfig) {
        self.pipeline_type = ::std::option::Option::Some(config::Pipeline_type::Pipeline(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pipeline(&mut self) -> &mut PipelineConfig {
        if let ::std::option::Option::Some(config::Pipeline_type::Pipeline(_)) = self.pipeline_type {
        } else {
            self.pipeline_type = ::std::option::Option::Some(config::Pipeline_type::Pipeline(PipelineConfig::new()));
        }
        match self.pipeline_type {
            ::std::option::Option::Some(config::Pipeline_type::Pipeline(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pipeline(&mut self) -> PipelineConfig {
        if self.has_pipeline() {
            match self.pipeline_type.take() {
                ::std::option::Option::Some(config::Pipeline_type::Pipeline(v)) => v,
                _ => panic!(),
            }
        } else {
            PipelineConfig::new()
        }
    }

    // .pulse.config.common.v1.RuntimeConfig fs_watched_pipeline = 5;

    pub fn fs_watched_pipeline(&self) -> &super::common::RuntimeConfig {
        match self.pipeline_type {
            ::std::option::Option::Some(config::Pipeline_type::FsWatchedPipeline(ref v)) => v,
            _ => <super::common::RuntimeConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_fs_watched_pipeline(&mut self) {
        self.pipeline_type = ::std::option::Option::None;
    }

    pub fn has_fs_watched_pipeline(&self) -> bool {
        match self.pipeline_type {
            ::std::option::Option::Some(config::Pipeline_type::FsWatchedPipeline(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fs_watched_pipeline(&mut self, v: super::common::RuntimeConfig) {
        self.pipeline_type = ::std::option::Option::Some(config::Pipeline_type::FsWatchedPipeline(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fs_watched_pipeline(&mut self) -> &mut super::common::RuntimeConfig {
        if let ::std::option::Option::Some(config::Pipeline_type::FsWatchedPipeline(_)) = self.pipeline_type {
        } else {
            self.pipeline_type = ::std::option::Option::Some(config::Pipeline_type::FsWatchedPipeline(super::common::RuntimeConfig::new()));
        }
        match self.pipeline_type {
            ::std::option::Option::Some(config::Pipeline_type::FsWatchedPipeline(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fs_watched_pipeline(&mut self) -> super::common::RuntimeConfig {
        if self.has_fs_watched_pipeline() {
            match self.pipeline_type.take() {
                ::std::option::Option::Some(config::Pipeline_type::FsWatchedPipeline(v)) => v,
                _ => panic!(),
            }
        } else {
            super::common::RuntimeConfig::new()
        }
    }

    // .pulse.config.bootstrap.v1.MergedConfig merged_pipeline = 6;

    pub fn merged_pipeline(&self) -> &MergedConfig {
        match self.pipeline_type {
            ::std::option::Option::Some(config::Pipeline_type::MergedPipeline(ref v)) => v,
            _ => <MergedConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_merged_pipeline(&mut self) {
        self.pipeline_type = ::std::option::Option::None;
    }

    pub fn has_merged_pipeline(&self) -> bool {
        match self.pipeline_type {
            ::std::option::Option::Some(config::Pipeline_type::MergedPipeline(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_merged_pipeline(&mut self, v: MergedConfig) {
        self.pipeline_type = ::std::option::Option::Some(config::Pipeline_type::MergedPipeline(v))
    }

    // Mutable pointer to the field.
    pub fn mut_merged_pipeline(&mut self) -> &mut MergedConfig {
        if let ::std::option::Option::Some(config::Pipeline_type::MergedPipeline(_)) = self.pipeline_type {
        } else {
            self.pipeline_type = ::std::option::Option::Some(config::Pipeline_type::MergedPipeline(MergedConfig::new()));
        }
        match self.pipeline_type {
            ::std::option::Option::Some(config::Pipeline_type::MergedPipeline(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_merged_pipeline(&mut self) -> MergedConfig {
        if self.has_merged_pipeline() {
            match self.pipeline_type.take() {
                ::std::option::Option::Some(config::Pipeline_type::MergedPipeline(v)) => v,
                _ => panic!(),
            }
        } else {
            MergedConfig::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, AdminConfig>(
            "admin",
            |m: &Config| { &m.admin },
            |m: &mut Config| { &mut m.admin },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MetaStats>(
            "meta_stats",
            |m: &Config| { &m.meta_stats },
            |m: &mut Config| { &mut m.meta_stats },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, KubernetesBootstrapConfig>(
            "kubernetes",
            |m: &Config| { &m.kubernetes },
            |m: &mut Config| { &mut m.kubernetes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PipelineConfig>(
            "pipeline",
            Config::has_pipeline,
            Config::pipeline,
            Config::mut_pipeline,
            Config::set_pipeline,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::common::RuntimeConfig>(
            "fs_watched_pipeline",
            Config::has_fs_watched_pipeline,
            Config::fs_watched_pipeline,
            Config::mut_fs_watched_pipeline,
            Config::set_fs_watched_pipeline,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, MergedConfig>(
            "merged_pipeline",
            Config::has_merged_pipeline,
            Config::merged_pipeline,
            Config::mut_merged_pipeline,
            Config::set_merged_pipeline,
        ));
        oneofs.push(config::Pipeline_type::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Config>(
            "Config",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Config {
    const NAME: &'static str = "Config";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.admin)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.meta_stats)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.kubernetes)?;
                },
                34 => {
                    self.pipeline_type = ::std::option::Option::Some(config::Pipeline_type::Pipeline(is.read_message()?));
                },
                42 => {
                    self.pipeline_type = ::std::option::Option::Some(config::Pipeline_type::FsWatchedPipeline(is.read_message()?));
                },
                50 => {
                    self.pipeline_type = ::std::option::Option::Some(config::Pipeline_type::MergedPipeline(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.admin.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.meta_stats.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.kubernetes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.pipeline_type {
            match v {
                &config::Pipeline_type::Pipeline(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &config::Pipeline_type::FsWatchedPipeline(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &config::Pipeline_type::MergedPipeline(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.admin.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.meta_stats.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.kubernetes.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.pipeline_type {
            match v {
                &config::Pipeline_type::Pipeline(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &config::Pipeline_type::FsWatchedPipeline(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &config::Pipeline_type::MergedPipeline(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Config {
        Config::new()
    }

    fn clear(&mut self) {
        self.admin.clear();
        self.meta_stats.clear();
        self.kubernetes.clear();
        self.pipeline_type = ::std::option::Option::None;
        self.pipeline_type = ::std::option::Option::None;
        self.pipeline_type = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Config {
        static instance: Config = Config {
            admin: ::protobuf::MessageField::none(),
            meta_stats: ::protobuf::MessageField::none(),
            kubernetes: ::protobuf::MessageField::none(),
            pipeline_type: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Config {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Config").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Config {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Config {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Config`
pub mod config {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:pulse.config.bootstrap.v1.Config.pipeline_type)
    pub enum Pipeline_type {
        // @@protoc_insertion_point(oneof_field:pulse.config.bootstrap.v1.Config.pipeline)
        Pipeline(super::PipelineConfig),
        // @@protoc_insertion_point(oneof_field:pulse.config.bootstrap.v1.Config.fs_watched_pipeline)
        FsWatchedPipeline(super::super::common::RuntimeConfig),
        // @@protoc_insertion_point(oneof_field:pulse.config.bootstrap.v1.Config.merged_pipeline)
        MergedPipeline(super::MergedConfig),
    }

    impl ::protobuf::Oneof for Pipeline_type {
    }

    impl ::protobuf::OneofFull for Pipeline_type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Config as ::protobuf::MessageFull>::descriptor().oneof_by_name("pipeline_type").unwrap()).clone()
        }
    }

    impl Pipeline_type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Pipeline_type>("pipeline_type")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)pulse/config/bootstrap/v1/bootstrap.proto\x12\x19pulse.config.bootstr\
    ap.v1\x1a#pulse/config/common/v1/common.proto\x1a#pulse/config/inflow/v1\
    /inflow.proto\x1a)pulse/config/processor/v1/processor.proto\x1a%pulse/co\
    nfig/outflow/v1/outflow.proto\x1a/pulse/config/outflow/v1/prom_remote_wr\
    ite.proto\x1a\"pulse/config/outflow/v1/wire.proto\x1a\x1egoogle/protobuf\
    /duration.proto\x1a\x17validate/validate.proto\"b\n\x16AdvancedPipelineC\
    onfig\x121\n\x12max_cached_metrics\x18\x01\x20\x01(\x04H\0R\x10maxCached\
    Metrics\x88\x01\x01B\x15\n\x13_max_cached_metrics\"\x93\x05\n\x0ePipelin\
    eConfig\x12P\n\x07inflows\x18\x01\x20\x03(\x0b26.pulse.config.bootstrap.\
    v1.PipelineConfig.InflowsEntryR\x07inflows\x12Y\n\nprocessors\x18\x02\
    \x20\x03(\x0b29.pulse.config.bootstrap.v1.PipelineConfig.ProcessorsEntry\
    R\nprocessors\x12S\n\x08outflows\x18\x03\x20\x03(\x0b27.pulse.config.boo\
    tstrap.v1.PipelineConfig.OutflowsEntryR\x08outflows\x12M\n\x08advanced\
    \x18\x04\x20\x01(\x0b21.pulse.config.bootstrap.v1.AdvancedPipelineConfig\
    R\x08advanced\x1a`\n\x0cInflowsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\t\
    R\x03key\x12:\n\x05value\x18\x02\x20\x01(\x0b2$.pulse.config.inflow.v1.I\
    nflowConfigR\x05value:\x028\x01\x1ai\n\x0fProcessorsEntry\x12\x10\n\x03k\
    ey\x18\x01\x20\x01(\tR\x03key\x12@\n\x05value\x18\x02\x20\x01(\x0b2*.pul\
    se.config.processor.v1.ProcessorConfigR\x05value:\x028\x01\x1ac\n\rOutfl\
    owsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12<\n\x05value\x18\
    \x02\x20\x01(\x0b2&.pulse.config.outflow.v1.OutflowConfigR\x05value:\x02\
    8\x01\"\x81\x05\n\tMetaStats\x12`\n\rmeta_protocol\x18\x01\x20\x03(\x0b2\
    1.pulse.config.bootstrap.v1.MetaStats.MetaProtocolR\x0cmetaProtocolB\x08\
    \xfaB\x05\x92\x01\x02\x08\x01\x12$\n\x0bmeta_prefix\x18\x02\x20\x01(\tH\
    \0R\nmetaPrefix\x88\x01\x01\x12G\n\x08meta_tag\x18\x03\x20\x03(\x0b2,.pu\
    lse.config.bootstrap.v1.MetaStats.MetaTagR\x07metaTag\x12<\n\x07node_id\
    \x18\x04\x20\x01(\x0b2#.pulse.config.common.v1.EnvOrInlineR\x06nodeId\
    \x12J\n\x0eflush_interval\x18\x05\x20\x01(\x0b2\x19.google.protobuf.Dura\
    tionR\rflushIntervalB\x08\xfaB\x05\xaa\x01\x02*\0\x1a\xc3\x01\n\x0cMetaP\
    rotocol\x12>\n\x04wire\x18\x01\x20\x01(\x0b2(.pulse.config.outflow.v1.Tc\
    pClientConfigH\0R\x04wire\x12b\n\x11prom_remote_write\x18\x02\x20\x01(\
    \x0b24.pulse.config.outflow.v1.PromRemoteWriteClientConfigH\0R\x0fpromRe\
    moteWriteB\x0f\n\x08protocol\x12\x03\xf8B\x01\x1aC\n\x07MetaTag\x12\x19\
    \n\x03key\x18\x01\x20\x01(\tR\x03keyB\x07\xfaB\x04r\x02\x10\x01\x12\x1d\
    \n\x05value\x18\x02\x20\x01(\tR\x05valueB\x07\xfaB\x04r\x02\x10\x01B\x0e\
    \n\x0c_meta_prefix\"*\n\x0bAdminConfig\x12\x1b\n\x04bind\x18\x01\x20\x01\
    (\tR\x04bindB\x07\xfaB\x04r\x02\x10\x01\"\x97\x02\n\x19KubernetesBootstr\
    apConfig\x12@\n\tnode_name\x18\x01\x20\x01(\x0b2#.pulse.config.common.v1\
    .EnvOrInlineR\x08nodeName\x120\n\x11evaluate_services\x18\x02\x20\x01(\
    \x08H\0R\x10evaluateServices\x88\x01\x01\x12Q\n\x17services_cache_interv\
    al\x18\x04\x20\x01(\x0b2\x19.google.protobuf.DurationR\x15servicesCacheI\
    nterval\x12\x1d\n\npod_phases\x18\x03\x20\x03(\tR\tpodPhasesB\x14\n\x12_\
    evaluate_services\"\xb0\x01\n\x0cMergedConfig\x12G\n\tbootstrap\x18\x01\
    \x20\x01(\x0b2).pulse.config.bootstrap.v1.PipelineConfigR\tbootstrap\x12\
    W\n\x14fs_watched_pipelines\x18\x02\x20\x03(\x0b2%.pulse.config.common.v\
    1.RuntimeConfigR\x12fsWatchedPipelines\"\xed\x03\n\x06Config\x12<\n\x05a\
    dmin\x18\x01\x20\x01(\x0b2&.pulse.config.bootstrap.v1.AdminConfigR\x05ad\
    min\x12C\n\nmeta_stats\x18\x02\x20\x01(\x0b2$.pulse.config.bootstrap.v1.\
    MetaStatsR\tmetaStats\x12T\n\nkubernetes\x18\x03\x20\x01(\x0b24.pulse.co\
    nfig.bootstrap.v1.KubernetesBootstrapConfigR\nkubernetes\x12G\n\x08pipel\
    ine\x18\x04\x20\x01(\x0b2).pulse.config.bootstrap.v1.PipelineConfigH\0R\
    \x08pipeline\x12W\n\x13fs_watched_pipeline\x18\x05\x20\x01(\x0b2%.pulse.\
    config.common.v1.RuntimeConfigH\0R\x11fsWatchedPipeline\x12R\n\x0fmerged\
    _pipeline\x18\x06\x20\x01(\x0b2'.pulse.config.bootstrap.v1.MergedConfigH\
    \0R\x0emergedPipelineB\x14\n\rpipeline_type\x12\x03\xf8B\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(8);
            deps.push(super::common::file_descriptor().clone());
            deps.push(super::inflow::file_descriptor().clone());
            deps.push(super::processor::file_descriptor().clone());
            deps.push(super::outflow::file_descriptor().clone());
            deps.push(super::prom_remote_write::file_descriptor().clone());
            deps.push(super::wire::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::duration::file_descriptor().clone());
            deps.push(super::validate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(9);
            messages.push(AdvancedPipelineConfig::generated_message_descriptor_data());
            messages.push(PipelineConfig::generated_message_descriptor_data());
            messages.push(MetaStats::generated_message_descriptor_data());
            messages.push(AdminConfig::generated_message_descriptor_data());
            messages.push(KubernetesBootstrapConfig::generated_message_descriptor_data());
            messages.push(MergedConfig::generated_message_descriptor_data());
            messages.push(Config::generated_message_descriptor_data());
            messages.push(meta_stats::MetaProtocol::generated_message_descriptor_data());
            messages.push(meta_stats::MetaTag::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
