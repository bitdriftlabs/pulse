// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 29.0
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `pulse/vrl_tester/v1/vrl_tester.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:pulse.vrl_tester.v1.MetricTransform)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MetricTransform {
    // message fields
    // @@protoc_insertion_point(field:pulse.vrl_tester.v1.MetricTransform.input)
    pub input: ::protobuf::Chars,
    // @@protoc_insertion_point(field:pulse.vrl_tester.v1.MetricTransform.output)
    pub output: ::protobuf::Chars,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.vrl_tester.v1.MetricTransform.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MetricTransform {
    fn default() -> &'a MetricTransform {
        <MetricTransform as ::protobuf::Message>::default_instance()
    }
}

impl MetricTransform {
    pub fn new() -> MetricTransform {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "input",
            |m: &MetricTransform| { &m.input },
            |m: &mut MetricTransform| { &mut m.input },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "output",
            |m: &MetricTransform| { &m.output },
            |m: &mut MetricTransform| { &mut m.output },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MetricTransform>(
            "MetricTransform",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MetricTransform {
    const NAME: &'static str = "MetricTransform";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.input = is.read_tokio_chars()?;
                },
                18 => {
                    self.output = is.read_tokio_chars()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.input.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.input);
        }
        if !self.output.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.output);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.input.is_empty() {
            os.write_string(1, &self.input)?;
        }
        if !self.output.is_empty() {
            os.write_string(2, &self.output)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MetricTransform {
        MetricTransform::new()
    }

    fn clear(&mut self) {
        self.input.clear();
        self.output.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MetricTransform {
        static instance: MetricTransform = MetricTransform {
            input: ::protobuf::Chars::new(),
            output: ::protobuf::Chars::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MetricTransform {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MetricTransform").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MetricTransform {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricTransform {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pulse.vrl_tester.v1.Transform)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Transform {
    // message oneof groups
    pub transform_type: ::std::option::Option<transform::Transform_type>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.vrl_tester.v1.Transform.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Transform {
    fn default() -> &'a Transform {
        <Transform as ::protobuf::Message>::default_instance()
    }
}

impl Transform {
    pub fn new() -> Transform {
        ::std::default::Default::default()
    }

    // .pulse.vrl_tester.v1.MetricTransform metric = 1;

    pub fn metric(&self) -> &MetricTransform {
        match self.transform_type {
            ::std::option::Option::Some(transform::Transform_type::Metric(ref v)) => v,
            _ => <MetricTransform as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_metric(&mut self) {
        self.transform_type = ::std::option::Option::None;
    }

    pub fn has_metric(&self) -> bool {
        match self.transform_type {
            ::std::option::Option::Some(transform::Transform_type::Metric(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_metric(&mut self, v: MetricTransform) {
        self.transform_type = ::std::option::Option::Some(transform::Transform_type::Metric(v))
    }

    // Mutable pointer to the field.
    pub fn mut_metric(&mut self) -> &mut MetricTransform {
        if let ::std::option::Option::Some(transform::Transform_type::Metric(_)) = self.transform_type {
        } else {
            self.transform_type = ::std::option::Option::Some(transform::Transform_type::Metric(MetricTransform::new()));
        }
        match self.transform_type {
            ::std::option::Option::Some(transform::Transform_type::Metric(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_metric(&mut self) -> MetricTransform {
        if self.has_metric() {
            match self.transform_type.take() {
                ::std::option::Option::Some(transform::Transform_type::Metric(v)) => v,
                _ => panic!(),
            }
        } else {
            MetricTransform::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, MetricTransform>(
            "metric",
            Transform::has_metric,
            Transform::metric,
            Transform::mut_metric,
            Transform::set_metric,
        ));
        oneofs.push(transform::Transform_type::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Transform>(
            "Transform",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Transform {
    const NAME: &'static str = "Transform";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.transform_type = ::std::option::Option::Some(transform::Transform_type::Metric(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.transform_type {
            match v {
                &transform::Transform_type::Metric(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.transform_type {
            match v {
                &transform::Transform_type::Metric(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Transform {
        Transform::new()
    }

    fn clear(&mut self) {
        self.transform_type = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Transform {
        static instance: Transform = Transform {
            transform_type: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Transform {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Transform").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Transform {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Transform {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Transform`
pub mod transform {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:pulse.vrl_tester.v1.Transform.transform_type)
    pub enum Transform_type {
        // @@protoc_insertion_point(oneof_field:pulse.vrl_tester.v1.Transform.metric)
        Metric(super::MetricTransform),
    }

    impl ::protobuf::Oneof for Transform_type {
    }

    impl ::protobuf::OneofFull for Transform_type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Transform as ::protobuf::MessageFull>::descriptor().oneof_by_name("transform_type").unwrap()).clone()
        }
    }

    impl Transform_type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Transform_type>("transform_type")
        }
    }
}

// @@protoc_insertion_point(message:pulse.vrl_tester.v1.KubernetesMetadata)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KubernetesMetadata {
    // message fields
    // @@protoc_insertion_point(field:pulse.vrl_tester.v1.KubernetesMetadata.namespace)
    pub namespace: ::protobuf::Chars,
    // @@protoc_insertion_point(field:pulse.vrl_tester.v1.KubernetesMetadata.pod_name)
    pub pod_name: ::protobuf::Chars,
    // @@protoc_insertion_point(field:pulse.vrl_tester.v1.KubernetesMetadata.pod_labels)
    pub pod_labels: ::std::collections::HashMap<::protobuf::Chars, ::protobuf::Chars>,
    // @@protoc_insertion_point(field:pulse.vrl_tester.v1.KubernetesMetadata.pod_annotations)
    pub pod_annotations: ::std::collections::HashMap<::protobuf::Chars, ::protobuf::Chars>,
    // @@protoc_insertion_point(field:pulse.vrl_tester.v1.KubernetesMetadata.service_name)
    pub service_name: ::std::option::Option<::protobuf::Chars>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.vrl_tester.v1.KubernetesMetadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KubernetesMetadata {
    fn default() -> &'a KubernetesMetadata {
        <KubernetesMetadata as ::protobuf::Message>::default_instance()
    }
}

impl KubernetesMetadata {
    pub fn new() -> KubernetesMetadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "namespace",
            |m: &KubernetesMetadata| { &m.namespace },
            |m: &mut KubernetesMetadata| { &mut m.namespace },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pod_name",
            |m: &KubernetesMetadata| { &m.pod_name },
            |m: &mut KubernetesMetadata| { &mut m.pod_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "pod_labels",
            |m: &KubernetesMetadata| { &m.pod_labels },
            |m: &mut KubernetesMetadata| { &mut m.pod_labels },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "pod_annotations",
            |m: &KubernetesMetadata| { &m.pod_annotations },
            |m: &mut KubernetesMetadata| { &mut m.pod_annotations },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "service_name",
            |m: &KubernetesMetadata| { &m.service_name },
            |m: &mut KubernetesMetadata| { &mut m.service_name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KubernetesMetadata>(
            "KubernetesMetadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KubernetesMetadata {
    const NAME: &'static str = "KubernetesMetadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.namespace = is.read_tokio_chars()?;
                },
                18 => {
                    self.pod_name = is.read_tokio_chars()?;
                },
                26 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_tokio_chars()?,
                            18 => value = is.read_tokio_chars()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.pod_labels.insert(key, value);
                },
                34 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_tokio_chars()?,
                            18 => value = is.read_tokio_chars()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.pod_annotations.insert(key, value);
                },
                42 => {
                    self.service_name = ::std::option::Option::Some(is.read_tokio_chars()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.namespace.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.namespace);
        }
        if !self.pod_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.pod_name);
        }
        for (k, v) in &self.pod_labels {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for (k, v) in &self.pod_annotations {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if let Some(v) = self.service_name.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.namespace.is_empty() {
            os.write_string(1, &self.namespace)?;
        }
        if !self.pod_name.is_empty() {
            os.write_string(2, &self.pod_name)?;
        }
        for (k, v) in &self.pod_labels {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(26)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        for (k, v) in &self.pod_annotations {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(34)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        if let Some(v) = self.service_name.as_ref() {
            os.write_string(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KubernetesMetadata {
        KubernetesMetadata::new()
    }

    fn clear(&mut self) {
        self.namespace.clear();
        self.pod_name.clear();
        self.pod_labels.clear();
        self.pod_annotations.clear();
        self.service_name = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KubernetesMetadata {
        static instance: ::protobuf::rt::Lazy<KubernetesMetadata> = ::protobuf::rt::Lazy::new();
        instance.get(KubernetesMetadata::new)
    }
}

impl ::protobuf::MessageFull for KubernetesMetadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KubernetesMetadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KubernetesMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KubernetesMetadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pulse.vrl_tester.v1.VrlTestCase)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct VrlTestCase {
    // message fields
    // @@protoc_insertion_point(field:pulse.vrl_tester.v1.VrlTestCase.program_replacements)
    pub program_replacements: ::std::collections::HashMap<::protobuf::Chars, ::protobuf::Chars>,
    // @@protoc_insertion_point(field:pulse.vrl_tester.v1.VrlTestCase.kubernetes_metadata)
    pub kubernetes_metadata: ::protobuf::MessageField<KubernetesMetadata>,
    // @@protoc_insertion_point(field:pulse.vrl_tester.v1.VrlTestCase.environment)
    pub environment: ::std::collections::HashMap<::protobuf::Chars, ::protobuf::Chars>,
    // @@protoc_insertion_point(field:pulse.vrl_tester.v1.VrlTestCase.transforms)
    pub transforms: ::std::vec::Vec<Transform>,
    // message oneof groups
    pub program_type: ::std::option::Option<vrl_test_case::Program_type>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.vrl_tester.v1.VrlTestCase.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VrlTestCase {
    fn default() -> &'a VrlTestCase {
        <VrlTestCase as ::protobuf::Message>::default_instance()
    }
}

impl VrlTestCase {
    pub fn new() -> VrlTestCase {
        ::std::default::Default::default()
    }

    // string program = 1;

    pub fn program(&self) -> &str {
        match self.program_type {
            ::std::option::Option::Some(vrl_test_case::Program_type::Program(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_program(&mut self) {
        self.program_type = ::std::option::Option::None;
    }

    pub fn has_program(&self) -> bool {
        match self.program_type {
            ::std::option::Option::Some(vrl_test_case::Program_type::Program(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_program(&mut self, v: ::protobuf::Chars) {
        self.program_type = ::std::option::Option::Some(vrl_test_case::Program_type::Program(v))
    }

    // Mutable pointer to the field.
    pub fn mut_program(&mut self) -> &mut ::protobuf::Chars {
        if let ::std::option::Option::Some(vrl_test_case::Program_type::Program(_)) = self.program_type {
        } else {
            self.program_type = ::std::option::Option::Some(vrl_test_case::Program_type::Program(::protobuf::Chars::new()));
        }
        match self.program_type {
            ::std::option::Option::Some(vrl_test_case::Program_type::Program(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_program(&mut self) -> ::protobuf::Chars {
        if self.has_program() {
            match self.program_type.take() {
                ::std::option::Option::Some(vrl_test_case::Program_type::Program(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::Chars::new()
        }
    }

    // string mutate_processor_name = 2;

    pub fn mutate_processor_name(&self) -> &str {
        match self.program_type {
            ::std::option::Option::Some(vrl_test_case::Program_type::MutateProcessorName(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_mutate_processor_name(&mut self) {
        self.program_type = ::std::option::Option::None;
    }

    pub fn has_mutate_processor_name(&self) -> bool {
        match self.program_type {
            ::std::option::Option::Some(vrl_test_case::Program_type::MutateProcessorName(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_mutate_processor_name(&mut self, v: ::protobuf::Chars) {
        self.program_type = ::std::option::Option::Some(vrl_test_case::Program_type::MutateProcessorName(v))
    }

    // Mutable pointer to the field.
    pub fn mut_mutate_processor_name(&mut self) -> &mut ::protobuf::Chars {
        if let ::std::option::Option::Some(vrl_test_case::Program_type::MutateProcessorName(_)) = self.program_type {
        } else {
            self.program_type = ::std::option::Option::Some(vrl_test_case::Program_type::MutateProcessorName(::protobuf::Chars::new()));
        }
        match self.program_type {
            ::std::option::Option::Some(vrl_test_case::Program_type::MutateProcessorName(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_mutate_processor_name(&mut self) -> ::protobuf::Chars {
        if self.has_mutate_processor_name() {
            match self.program_type.take() {
                ::std::option::Option::Some(vrl_test_case::Program_type::MutateProcessorName(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::Chars::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "program",
            VrlTestCase::has_program,
            VrlTestCase::program,
            VrlTestCase::set_program,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "mutate_processor_name",
            VrlTestCase::has_mutate_processor_name,
            VrlTestCase::mutate_processor_name,
            VrlTestCase::set_mutate_processor_name,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "program_replacements",
            |m: &VrlTestCase| { &m.program_replacements },
            |m: &mut VrlTestCase| { &mut m.program_replacements },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, KubernetesMetadata>(
            "kubernetes_metadata",
            |m: &VrlTestCase| { &m.kubernetes_metadata },
            |m: &mut VrlTestCase| { &mut m.kubernetes_metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "environment",
            |m: &VrlTestCase| { &m.environment },
            |m: &mut VrlTestCase| { &mut m.environment },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "transforms",
            |m: &VrlTestCase| { &m.transforms },
            |m: &mut VrlTestCase| { &mut m.transforms },
        ));
        oneofs.push(vrl_test_case::Program_type::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VrlTestCase>(
            "VrlTestCase",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VrlTestCase {
    const NAME: &'static str = "VrlTestCase";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.program_type = ::std::option::Option::Some(vrl_test_case::Program_type::Program(is.read_tokio_chars()?));
                },
                18 => {
                    self.program_type = ::std::option::Option::Some(vrl_test_case::Program_type::MutateProcessorName(is.read_tokio_chars()?));
                },
                26 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_tokio_chars()?,
                            18 => value = is.read_tokio_chars()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.program_replacements.insert(key, value);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.kubernetes_metadata)?;
                },
                42 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_tokio_chars()?,
                            18 => value = is.read_tokio_chars()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.environment.insert(key, value);
                },
                50 => {
                    self.transforms.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for (k, v) in &self.program_replacements {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if let Some(v) = self.kubernetes_metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for (k, v) in &self.environment {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for value in &self.transforms {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let ::std::option::Option::Some(ref v) = self.program_type {
            match v {
                &vrl_test_case::Program_type::Program(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &vrl_test_case::Program_type::MutateProcessorName(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for (k, v) in &self.program_replacements {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(26)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        if let Some(v) = self.kubernetes_metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        for (k, v) in &self.environment {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(42)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        for v in &self.transforms {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        if let ::std::option::Option::Some(ref v) = self.program_type {
            match v {
                &vrl_test_case::Program_type::Program(ref v) => {
                    os.write_string(1, v)?;
                },
                &vrl_test_case::Program_type::MutateProcessorName(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VrlTestCase {
        VrlTestCase::new()
    }

    fn clear(&mut self) {
        self.program_type = ::std::option::Option::None;
        self.program_type = ::std::option::Option::None;
        self.program_replacements.clear();
        self.kubernetes_metadata.clear();
        self.environment.clear();
        self.transforms.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VrlTestCase {
        static instance: ::protobuf::rt::Lazy<VrlTestCase> = ::protobuf::rt::Lazy::new();
        instance.get(VrlTestCase::new)
    }
}

impl ::protobuf::MessageFull for VrlTestCase {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VrlTestCase").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VrlTestCase {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VrlTestCase {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `VrlTestCase`
pub mod vrl_test_case {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:pulse.vrl_tester.v1.VrlTestCase.program_type)
    pub enum Program_type {
        // @@protoc_insertion_point(oneof_field:pulse.vrl_tester.v1.VrlTestCase.program)
        Program(::protobuf::Chars),
        // @@protoc_insertion_point(oneof_field:pulse.vrl_tester.v1.VrlTestCase.mutate_processor_name)
        MutateProcessorName(::protobuf::Chars),
    }

    impl ::protobuf::Oneof for Program_type {
    }

    impl ::protobuf::OneofFull for Program_type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::VrlTestCase as ::protobuf::MessageFull>::descriptor().oneof_by_name("program_type").unwrap()).clone()
        }
    }

    impl Program_type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Program_type>("program_type")
        }
    }
}

// @@protoc_insertion_point(message:pulse.vrl_tester.v1.VrlTesterConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct VrlTesterConfig {
    // message fields
    // @@protoc_insertion_point(field:pulse.vrl_tester.v1.VrlTesterConfig.test_cases)
    pub test_cases: ::std::vec::Vec<VrlTestCase>,
    // special fields
    // @@protoc_insertion_point(special_field:pulse.vrl_tester.v1.VrlTesterConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VrlTesterConfig {
    fn default() -> &'a VrlTesterConfig {
        <VrlTesterConfig as ::protobuf::Message>::default_instance()
    }
}

impl VrlTesterConfig {
    pub fn new() -> VrlTesterConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "test_cases",
            |m: &VrlTesterConfig| { &m.test_cases },
            |m: &mut VrlTesterConfig| { &mut m.test_cases },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VrlTesterConfig>(
            "VrlTesterConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VrlTesterConfig {
    const NAME: &'static str = "VrlTesterConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.test_cases.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.test_cases {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.test_cases {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VrlTesterConfig {
        VrlTesterConfig::new()
    }

    fn clear(&mut self) {
        self.test_cases.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VrlTesterConfig {
        static instance: VrlTesterConfig = VrlTesterConfig {
            test_cases: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for VrlTesterConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VrlTesterConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VrlTesterConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VrlTesterConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$pulse/vrl_tester/v1/vrl_tester.proto\x12\x13pulse.vrl_tester.v1\x1a\
    \x17validate/validate.proto\"Q\n\x0fMetricTransform\x12\x1d\n\x05input\
    \x18\x01\x20\x01(\tR\x05inputB\x07\xfaB\x04r\x02\x10\x01\x12\x1f\n\x06ou\
    tput\x18\x02\x20\x01(\tR\x06outputB\x07\xfaB\x04r\x02\x10\x01\"b\n\tTran\
    sform\x12>\n\x06metric\x18\x01\x20\x01(\x0b2$.pulse.vrl_tester.v1.Metric\
    TransformH\0R\x06metricB\x15\n\x0etransform_type\x12\x03\xf8B\x01\"\xd6\
    \x03\n\x12KubernetesMetadata\x12%\n\tnamespace\x18\x01\x20\x01(\tR\tname\
    spaceB\x07\xfaB\x04r\x02\x10\x01\x12\"\n\x08pod_name\x18\x02\x20\x01(\tR\
    \x07podNameB\x07\xfaB\x04r\x02\x10\x01\x12U\n\npod_labels\x18\x03\x20\
    \x03(\x0b26.pulse.vrl_tester.v1.KubernetesMetadata.PodLabelsEntryR\tpodL\
    abels\x12d\n\x0fpod_annotations\x18\x04\x20\x03(\x0b2;.pulse.vrl_tester.\
    v1.KubernetesMetadata.PodAnnotationsEntryR\x0epodAnnotations\x12&\n\x0cs\
    ervice_name\x18\x05\x20\x01(\tH\0R\x0bserviceName\x88\x01\x01\x1a<\n\x0e\
    PodLabelsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05\
    value\x18\x02\x20\x01(\tR\x05value:\x028\x01\x1aA\n\x13PodAnnotationsEnt\
    ry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\
    \x02\x20\x01(\tR\x05value:\x028\x01B\x0f\n\r_service_name\"\xf5\x04\n\
    \x0bVrlTestCase\x12#\n\x07program\x18\x01\x20\x01(\tH\0R\x07programB\x07\
    \xfaB\x04r\x02\x10\x01\x12=\n\x15mutate_processor_name\x18\x02\x20\x01(\
    \tH\0R\x13mutateProcessorNameB\x07\xfaB\x04r\x02\x10\x01\x12l\n\x14progr\
    am_replacements\x18\x03\x20\x03(\x0b29.pulse.vrl_tester.v1.VrlTestCase.P\
    rogramReplacementsEntryR\x13programReplacements\x12X\n\x13kubernetes_met\
    adata\x18\x04\x20\x01(\x0b2'.pulse.vrl_tester.v1.KubernetesMetadataR\x12\
    kubernetesMetadata\x12S\n\x0benvironment\x18\x05\x20\x03(\x0b21.pulse.vr\
    l_tester.v1.VrlTestCase.EnvironmentEntryR\x0benvironment\x12H\n\ntransfo\
    rms\x18\x06\x20\x03(\x0b2\x1e.pulse.vrl_tester.v1.TransformR\ntransforms\
    B\x08\xfaB\x05\x92\x01\x02\x08\x01\x1aF\n\x18ProgramReplacementsEntry\
    \x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\
    \x20\x01(\tR\x05value:\x028\x01\x1a>\n\x10EnvironmentEntry\x12\x10\n\x03\
    key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\
    \x05value:\x028\x01B\x13\n\x0cprogram_type\x12\x03\xf8B\x01\"\\\n\x0fVrl\
    TesterConfig\x12I\n\ntest_cases\x18\x01\x20\x03(\x0b2\x20.pulse.vrl_test\
    er.v1.VrlTestCaseR\ttestCasesB\x08\xfaB\x05\x92\x01\x02\x08\x01b\x06prot\
    o3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::validate::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(MetricTransform::generated_message_descriptor_data());
            messages.push(Transform::generated_message_descriptor_data());
            messages.push(KubernetesMetadata::generated_message_descriptor_data());
            messages.push(VrlTestCase::generated_message_descriptor_data());
            messages.push(VrlTesterConfig::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
