// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 32.0
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `opentelemetry/proto/common/v1/common.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:opentelemetry.proto.common.v1.AnyValue)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AnyValue {
    // message oneof groups
    pub value: ::std::option::Option<any_value::Value>,
    // special fields
    // @@protoc_insertion_point(special_field:opentelemetry.proto.common.v1.AnyValue.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AnyValue {
    fn default() -> &'a AnyValue {
        <AnyValue as ::protobuf::Message>::default_instance()
    }
}

impl AnyValue {
    pub fn new() -> AnyValue {
        ::std::default::Default::default()
    }

    // string string_value = 1;

    pub fn string_value(&self) -> &str {
        match self.value {
            ::std::option::Option::Some(any_value::Value::StringValue(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_string_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_string_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(any_value::Value::StringValue(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_string_value(&mut self, v: ::protobuf::Chars) {
        self.value = ::std::option::Option::Some(any_value::Value::StringValue(v))
    }

    // Mutable pointer to the field.
    pub fn mut_string_value(&mut self) -> &mut ::protobuf::Chars {
        if let ::std::option::Option::Some(any_value::Value::StringValue(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(any_value::Value::StringValue(::protobuf::Chars::new()));
        }
        match self.value {
            ::std::option::Option::Some(any_value::Value::StringValue(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_string_value(&mut self) -> ::protobuf::Chars {
        if self.has_string_value() {
            match self.value.take() {
                ::std::option::Option::Some(any_value::Value::StringValue(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::Chars::new()
        }
    }

    // bool bool_value = 2;

    pub fn bool_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(any_value::Value::BoolValue(v)) => v,
            _ => false,
        }
    }

    pub fn clear_bool_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_bool_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(any_value::Value::BoolValue(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bool_value(&mut self, v: bool) {
        self.value = ::std::option::Option::Some(any_value::Value::BoolValue(v))
    }

    // int64 int_value = 3;

    pub fn int_value(&self) -> i64 {
        match self.value {
            ::std::option::Option::Some(any_value::Value::IntValue(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_int_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_int_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(any_value::Value::IntValue(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_int_value(&mut self, v: i64) {
        self.value = ::std::option::Option::Some(any_value::Value::IntValue(v))
    }

    // double double_value = 4;

    pub fn double_value(&self) -> f64 {
        match self.value {
            ::std::option::Option::Some(any_value::Value::DoubleValue(v)) => v,
            _ => 0.,
        }
    }

    pub fn clear_double_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_double_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(any_value::Value::DoubleValue(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_double_value(&mut self, v: f64) {
        self.value = ::std::option::Option::Some(any_value::Value::DoubleValue(v))
    }

    // .opentelemetry.proto.common.v1.ArrayValue array_value = 5;

    pub fn array_value(&self) -> &ArrayValue {
        match self.value {
            ::std::option::Option::Some(any_value::Value::ArrayValue(ref v)) => v,
            _ => <ArrayValue as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_array_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_array_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(any_value::Value::ArrayValue(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_array_value(&mut self, v: ArrayValue) {
        self.value = ::std::option::Option::Some(any_value::Value::ArrayValue(v))
    }

    // Mutable pointer to the field.
    pub fn mut_array_value(&mut self) -> &mut ArrayValue {
        if let ::std::option::Option::Some(any_value::Value::ArrayValue(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(any_value::Value::ArrayValue(ArrayValue::new()));
        }
        match self.value {
            ::std::option::Option::Some(any_value::Value::ArrayValue(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_array_value(&mut self) -> ArrayValue {
        if self.has_array_value() {
            match self.value.take() {
                ::std::option::Option::Some(any_value::Value::ArrayValue(v)) => v,
                _ => panic!(),
            }
        } else {
            ArrayValue::new()
        }
    }

    // .opentelemetry.proto.common.v1.KeyValueList kvlist_value = 6;

    pub fn kvlist_value(&self) -> &KeyValueList {
        match self.value {
            ::std::option::Option::Some(any_value::Value::KvlistValue(ref v)) => v,
            _ => <KeyValueList as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_kvlist_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_kvlist_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(any_value::Value::KvlistValue(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_kvlist_value(&mut self, v: KeyValueList) {
        self.value = ::std::option::Option::Some(any_value::Value::KvlistValue(v))
    }

    // Mutable pointer to the field.
    pub fn mut_kvlist_value(&mut self) -> &mut KeyValueList {
        if let ::std::option::Option::Some(any_value::Value::KvlistValue(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(any_value::Value::KvlistValue(KeyValueList::new()));
        }
        match self.value {
            ::std::option::Option::Some(any_value::Value::KvlistValue(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_kvlist_value(&mut self) -> KeyValueList {
        if self.has_kvlist_value() {
            match self.value.take() {
                ::std::option::Option::Some(any_value::Value::KvlistValue(v)) => v,
                _ => panic!(),
            }
        } else {
            KeyValueList::new()
        }
    }

    // bytes bytes_value = 7;

    pub fn bytes_value(&self) -> &[u8] {
        match self.value {
            ::std::option::Option::Some(any_value::Value::BytesValue(ref v)) => v,
            _ => &[],
        }
    }

    pub fn clear_bytes_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_bytes_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(any_value::Value::BytesValue(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bytes_value(&mut self, v: ::bytes::Bytes) {
        self.value = ::std::option::Option::Some(any_value::Value::BytesValue(v))
    }

    // Mutable pointer to the field.
    pub fn mut_bytes_value(&mut self) -> &mut ::bytes::Bytes {
        if let ::std::option::Option::Some(any_value::Value::BytesValue(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(any_value::Value::BytesValue(::bytes::Bytes::new()));
        }
        match self.value {
            ::std::option::Option::Some(any_value::Value::BytesValue(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_bytes_value(&mut self) -> ::bytes::Bytes {
        if self.has_bytes_value() {
            match self.value.take() {
                ::std::option::Option::Some(any_value::Value::BytesValue(v)) => v,
                _ => panic!(),
            }
        } else {
            ::bytes::Bytes::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "string_value",
            AnyValue::has_string_value,
            AnyValue::string_value,
            AnyValue::set_string_value,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "bool_value",
            AnyValue::has_bool_value,
            AnyValue::bool_value,
            AnyValue::set_bool_value,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "int_value",
            AnyValue::has_int_value,
            AnyValue::int_value,
            AnyValue::set_int_value,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "double_value",
            AnyValue::has_double_value,
            AnyValue::double_value,
            AnyValue::set_double_value,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ArrayValue>(
            "array_value",
            AnyValue::has_array_value,
            AnyValue::array_value,
            AnyValue::mut_array_value,
            AnyValue::set_array_value,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, KeyValueList>(
            "kvlist_value",
            AnyValue::has_kvlist_value,
            AnyValue::kvlist_value,
            AnyValue::mut_kvlist_value,
            AnyValue::set_kvlist_value,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "bytes_value",
            AnyValue::has_bytes_value,
            AnyValue::bytes_value,
            AnyValue::set_bytes_value,
        ));
        oneofs.push(any_value::Value::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AnyValue>(
            "AnyValue",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AnyValue {
    const NAME: &'static str = "AnyValue";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.value = ::std::option::Option::Some(any_value::Value::StringValue(is.read_tokio_chars()?));
                },
                16 => {
                    self.value = ::std::option::Option::Some(any_value::Value::BoolValue(is.read_bool()?));
                },
                24 => {
                    self.value = ::std::option::Option::Some(any_value::Value::IntValue(is.read_int64()?));
                },
                33 => {
                    self.value = ::std::option::Option::Some(any_value::Value::DoubleValue(is.read_double()?));
                },
                42 => {
                    self.value = ::std::option::Option::Some(any_value::Value::ArrayValue(is.read_message()?));
                },
                50 => {
                    self.value = ::std::option::Option::Some(any_value::Value::KvlistValue(is.read_message()?));
                },
                58 => {
                    self.value = ::std::option::Option::Some(any_value::Value::BytesValue(is.read_tokio_bytes()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &any_value::Value::StringValue(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &any_value::Value::BoolValue(v) => {
                    my_size += 1 + 1;
                },
                &any_value::Value::IntValue(v) => {
                    my_size += ::protobuf::rt::int64_size(3, v);
                },
                &any_value::Value::DoubleValue(v) => {
                    my_size += 1 + 8;
                },
                &any_value::Value::ArrayValue(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &any_value::Value::KvlistValue(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &any_value::Value::BytesValue(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(7, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &any_value::Value::StringValue(ref v) => {
                    os.write_string(1, v)?;
                },
                &any_value::Value::BoolValue(v) => {
                    os.write_bool(2, v)?;
                },
                &any_value::Value::IntValue(v) => {
                    os.write_int64(3, v)?;
                },
                &any_value::Value::DoubleValue(v) => {
                    os.write_double(4, v)?;
                },
                &any_value::Value::ArrayValue(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &any_value::Value::KvlistValue(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &any_value::Value::BytesValue(ref v) => {
                    os.write_bytes(7, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AnyValue {
        AnyValue::new()
    }

    fn clear(&mut self) {
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AnyValue {
        static instance: AnyValue = AnyValue {
            value: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AnyValue {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AnyValue").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AnyValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AnyValue {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `AnyValue`
pub mod any_value {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:opentelemetry.proto.common.v1.AnyValue.value)
    pub enum Value {
        // @@protoc_insertion_point(oneof_field:opentelemetry.proto.common.v1.AnyValue.string_value)
        StringValue(::protobuf::Chars),
        // @@protoc_insertion_point(oneof_field:opentelemetry.proto.common.v1.AnyValue.bool_value)
        BoolValue(bool),
        // @@protoc_insertion_point(oneof_field:opentelemetry.proto.common.v1.AnyValue.int_value)
        IntValue(i64),
        // @@protoc_insertion_point(oneof_field:opentelemetry.proto.common.v1.AnyValue.double_value)
        DoubleValue(f64),
        // @@protoc_insertion_point(oneof_field:opentelemetry.proto.common.v1.AnyValue.array_value)
        ArrayValue(super::ArrayValue),
        // @@protoc_insertion_point(oneof_field:opentelemetry.proto.common.v1.AnyValue.kvlist_value)
        KvlistValue(super::KeyValueList),
        // @@protoc_insertion_point(oneof_field:opentelemetry.proto.common.v1.AnyValue.bytes_value)
        BytesValue(::bytes::Bytes),
    }

    impl ::protobuf::Oneof for Value {
    }

    impl ::protobuf::OneofFull for Value {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::AnyValue as ::protobuf::MessageFull>::descriptor().oneof_by_name("value").unwrap()).clone()
        }
    }

    impl Value {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Value>("value")
        }
    }
}

// @@protoc_insertion_point(message:opentelemetry.proto.common.v1.ArrayValue)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ArrayValue {
    // message fields
    // @@protoc_insertion_point(field:opentelemetry.proto.common.v1.ArrayValue.values)
    pub values: ::std::vec::Vec<AnyValue>,
    // special fields
    // @@protoc_insertion_point(special_field:opentelemetry.proto.common.v1.ArrayValue.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ArrayValue {
    fn default() -> &'a ArrayValue {
        <ArrayValue as ::protobuf::Message>::default_instance()
    }
}

impl ArrayValue {
    pub fn new() -> ArrayValue {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "values",
            |m: &ArrayValue| { &m.values },
            |m: &mut ArrayValue| { &mut m.values },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ArrayValue>(
            "ArrayValue",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ArrayValue {
    const NAME: &'static str = "ArrayValue";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.values.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.values {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ArrayValue {
        ArrayValue::new()
    }

    fn clear(&mut self) {
        self.values.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ArrayValue {
        static instance: ArrayValue = ArrayValue {
            values: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ArrayValue {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ArrayValue").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ArrayValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ArrayValue {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:opentelemetry.proto.common.v1.KeyValueList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KeyValueList {
    // message fields
    // @@protoc_insertion_point(field:opentelemetry.proto.common.v1.KeyValueList.values)
    pub values: ::std::vec::Vec<KeyValue>,
    // special fields
    // @@protoc_insertion_point(special_field:opentelemetry.proto.common.v1.KeyValueList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KeyValueList {
    fn default() -> &'a KeyValueList {
        <KeyValueList as ::protobuf::Message>::default_instance()
    }
}

impl KeyValueList {
    pub fn new() -> KeyValueList {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "values",
            |m: &KeyValueList| { &m.values },
            |m: &mut KeyValueList| { &mut m.values },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KeyValueList>(
            "KeyValueList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KeyValueList {
    const NAME: &'static str = "KeyValueList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.values.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.values {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KeyValueList {
        KeyValueList::new()
    }

    fn clear(&mut self) {
        self.values.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KeyValueList {
        static instance: KeyValueList = KeyValueList {
            values: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KeyValueList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KeyValueList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KeyValueList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyValueList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:opentelemetry.proto.common.v1.KeyValue)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KeyValue {
    // message fields
    // @@protoc_insertion_point(field:opentelemetry.proto.common.v1.KeyValue.key)
    pub key: ::protobuf::Chars,
    // @@protoc_insertion_point(field:opentelemetry.proto.common.v1.KeyValue.value)
    pub value: ::protobuf::MessageField<AnyValue>,
    // special fields
    // @@protoc_insertion_point(special_field:opentelemetry.proto.common.v1.KeyValue.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KeyValue {
    fn default() -> &'a KeyValue {
        <KeyValue as ::protobuf::Message>::default_instance()
    }
}

impl KeyValue {
    pub fn new() -> KeyValue {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &KeyValue| { &m.key },
            |m: &mut KeyValue| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, AnyValue>(
            "value",
            |m: &KeyValue| { &m.value },
            |m: &mut KeyValue| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KeyValue>(
            "KeyValue",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KeyValue {
    const NAME: &'static str = "KeyValue";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_tokio_chars()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.value)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if let Some(v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if let Some(v) = self.value.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KeyValue {
        KeyValue::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KeyValue {
        static instance: KeyValue = KeyValue {
            key: ::protobuf::Chars::new(),
            value: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KeyValue {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KeyValue").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KeyValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyValue {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:opentelemetry.proto.common.v1.InstrumentationScope)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct InstrumentationScope {
    // message fields
    // @@protoc_insertion_point(field:opentelemetry.proto.common.v1.InstrumentationScope.name)
    pub name: ::protobuf::Chars,
    // @@protoc_insertion_point(field:opentelemetry.proto.common.v1.InstrumentationScope.version)
    pub version: ::protobuf::Chars,
    // @@protoc_insertion_point(field:opentelemetry.proto.common.v1.InstrumentationScope.attributes)
    pub attributes: ::std::vec::Vec<KeyValue>,
    // @@protoc_insertion_point(field:opentelemetry.proto.common.v1.InstrumentationScope.dropped_attributes_count)
    pub dropped_attributes_count: u32,
    // special fields
    // @@protoc_insertion_point(special_field:opentelemetry.proto.common.v1.InstrumentationScope.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a InstrumentationScope {
    fn default() -> &'a InstrumentationScope {
        <InstrumentationScope as ::protobuf::Message>::default_instance()
    }
}

impl InstrumentationScope {
    pub fn new() -> InstrumentationScope {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &InstrumentationScope| { &m.name },
            |m: &mut InstrumentationScope| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &InstrumentationScope| { &m.version },
            |m: &mut InstrumentationScope| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "attributes",
            |m: &InstrumentationScope| { &m.attributes },
            |m: &mut InstrumentationScope| { &mut m.attributes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dropped_attributes_count",
            |m: &InstrumentationScope| { &m.dropped_attributes_count },
            |m: &mut InstrumentationScope| { &mut m.dropped_attributes_count },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InstrumentationScope>(
            "InstrumentationScope",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for InstrumentationScope {
    const NAME: &'static str = "InstrumentationScope";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_tokio_chars()?;
                },
                18 => {
                    self.version = is.read_tokio_chars()?;
                },
                26 => {
                    self.attributes.push(is.read_message()?);
                },
                32 => {
                    self.dropped_attributes_count = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.version);
        }
        for value in &self.attributes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.dropped_attributes_count != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.dropped_attributes_count);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.version.is_empty() {
            os.write_string(2, &self.version)?;
        }
        for v in &self.attributes {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if self.dropped_attributes_count != 0 {
            os.write_uint32(4, self.dropped_attributes_count)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> InstrumentationScope {
        InstrumentationScope::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.version.clear();
        self.attributes.clear();
        self.dropped_attributes_count = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static InstrumentationScope {
        static instance: InstrumentationScope = InstrumentationScope {
            name: ::protobuf::Chars::new(),
            version: ::protobuf::Chars::new(),
            attributes: ::std::vec::Vec::new(),
            dropped_attributes_count: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for InstrumentationScope {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("InstrumentationScope").unwrap()).clone()
    }
}

impl ::std::fmt::Display for InstrumentationScope {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InstrumentationScope {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:opentelemetry.proto.common.v1.EntityRef)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EntityRef {
    // message fields
    // @@protoc_insertion_point(field:opentelemetry.proto.common.v1.EntityRef.schema_url)
    pub schema_url: ::protobuf::Chars,
    // @@protoc_insertion_point(field:opentelemetry.proto.common.v1.EntityRef.type)
    pub type_: ::protobuf::Chars,
    // @@protoc_insertion_point(field:opentelemetry.proto.common.v1.EntityRef.id_keys)
    pub id_keys: ::std::vec::Vec<::protobuf::Chars>,
    // @@protoc_insertion_point(field:opentelemetry.proto.common.v1.EntityRef.description_keys)
    pub description_keys: ::std::vec::Vec<::protobuf::Chars>,
    // special fields
    // @@protoc_insertion_point(special_field:opentelemetry.proto.common.v1.EntityRef.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EntityRef {
    fn default() -> &'a EntityRef {
        <EntityRef as ::protobuf::Message>::default_instance()
    }
}

impl EntityRef {
    pub fn new() -> EntityRef {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "schema_url",
            |m: &EntityRef| { &m.schema_url },
            |m: &mut EntityRef| { &mut m.schema_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &EntityRef| { &m.type_ },
            |m: &mut EntityRef| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "id_keys",
            |m: &EntityRef| { &m.id_keys },
            |m: &mut EntityRef| { &mut m.id_keys },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "description_keys",
            |m: &EntityRef| { &m.description_keys },
            |m: &mut EntityRef| { &mut m.description_keys },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EntityRef>(
            "EntityRef",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EntityRef {
    const NAME: &'static str = "EntityRef";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.schema_url = is.read_tokio_chars()?;
                },
                18 => {
                    self.type_ = is.read_tokio_chars()?;
                },
                26 => {
                    self.id_keys.push(is.read_tokio_chars()?);
                },
                34 => {
                    self.description_keys.push(is.read_tokio_chars()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.schema_url.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.schema_url);
        }
        if !self.type_.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.type_);
        }
        for value in &self.id_keys {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in &self.description_keys {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.schema_url.is_empty() {
            os.write_string(1, &self.schema_url)?;
        }
        if !self.type_.is_empty() {
            os.write_string(2, &self.type_)?;
        }
        for v in &self.id_keys {
            os.write_string(3, &v)?;
        };
        for v in &self.description_keys {
            os.write_string(4, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EntityRef {
        EntityRef::new()
    }

    fn clear(&mut self) {
        self.schema_url.clear();
        self.type_.clear();
        self.id_keys.clear();
        self.description_keys.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EntityRef {
        static instance: EntityRef = EntityRef {
            schema_url: ::protobuf::Chars::new(),
            type_: ::protobuf::Chars::new(),
            id_keys: ::std::vec::Vec::new(),
            description_keys: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EntityRef {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EntityRef").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EntityRef {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EntityRef {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n*opentelemetry/proto/common/v1/common.proto\x12\x1dopentelemetry.proto\
    .common.v1\"\xe0\x02\n\x08AnyValue\x12#\n\x0cstring_value\x18\x01\x20\
    \x01(\tH\0R\x0bstringValue\x12\x1f\n\nbool_value\x18\x02\x20\x01(\x08H\0\
    R\tboolValue\x12\x1d\n\tint_value\x18\x03\x20\x01(\x03H\0R\x08intValue\
    \x12#\n\x0cdouble_value\x18\x04\x20\x01(\x01H\0R\x0bdoubleValue\x12L\n\
    \x0barray_value\x18\x05\x20\x01(\x0b2).opentelemetry.proto.common.v1.Arr\
    ayValueH\0R\narrayValue\x12P\n\x0ckvlist_value\x18\x06\x20\x01(\x0b2+.op\
    entelemetry.proto.common.v1.KeyValueListH\0R\x0bkvlistValue\x12!\n\x0bby\
    tes_value\x18\x07\x20\x01(\x0cH\0R\nbytesValueB\x07\n\x05value\"M\n\nArr\
    ayValue\x12?\n\x06values\x18\x01\x20\x03(\x0b2'.opentelemetry.proto.comm\
    on.v1.AnyValueR\x06values\"O\n\x0cKeyValueList\x12?\n\x06values\x18\x01\
    \x20\x03(\x0b2'.opentelemetry.proto.common.v1.KeyValueR\x06values\"[\n\
    \x08KeyValue\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12=\n\x05value\
    \x18\x02\x20\x01(\x0b2'.opentelemetry.proto.common.v1.AnyValueR\x05value\
    \"\xc7\x01\n\x14InstrumentationScope\x12\x12\n\x04name\x18\x01\x20\x01(\
    \tR\x04name\x12\x18\n\x07version\x18\x02\x20\x01(\tR\x07version\x12G\n\n\
    attributes\x18\x03\x20\x03(\x0b2'.opentelemetry.proto.common.v1.KeyValue\
    R\nattributes\x128\n\x18dropped_attributes_count\x18\x04\x20\x01(\rR\x16\
    droppedAttributesCount\"\x82\x01\n\tEntityRef\x12\x1d\n\nschema_url\x18\
    \x01\x20\x01(\tR\tschemaUrl\x12\x12\n\x04type\x18\x02\x20\x01(\tR\x04typ\
    e\x12\x17\n\x07id_keys\x18\x03\x20\x03(\tR\x06idKeys\x12)\n\x10descripti\
    on_keys\x18\x04\x20\x03(\tR\x0fdescriptionKeysB{\n\x20io.opentelemetry.p\
    roto.common.v1B\x0bCommonProtoP\x01Z(go.opentelemetry.io/proto/otlp/comm\
    on/v1\xaa\x02\x1dOpenTelemetry.Proto.Common.V1b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(AnyValue::generated_message_descriptor_data());
            messages.push(ArrayValue::generated_message_descriptor_data());
            messages.push(KeyValueList::generated_message_descriptor_data());
            messages.push(KeyValue::generated_message_descriptor_data());
            messages.push(InstrumentationScope::generated_message_descriptor_data());
            messages.push(EntityRef::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
