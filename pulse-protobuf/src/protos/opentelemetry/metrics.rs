// proto - bitdrift's client/server API definitions
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc 32.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `opentelemetry/proto/metrics/v1/metrics.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

// @@protoc_insertion_point(message:opentelemetry.proto.metrics.v1.MetricsData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MetricsData {
    // message fields
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.MetricsData.resource_metrics)
    pub resource_metrics: ::std::vec::Vec<ResourceMetrics>,
    // special fields
    // @@protoc_insertion_point(special_field:opentelemetry.proto.metrics.v1.MetricsData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MetricsData {
    fn default() -> &'a MetricsData {
        <MetricsData as ::protobuf::Message>::default_instance()
    }
}

impl MetricsData {
    pub fn new() -> MetricsData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "resource_metrics",
            |m: &MetricsData| { &m.resource_metrics },
            |m: &mut MetricsData| { &mut m.resource_metrics },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MetricsData>(
            "MetricsData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MetricsData {
    const NAME: &'static str = "MetricsData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.resource_metrics.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.resource_metrics {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.resource_metrics {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MetricsData {
        MetricsData::new()
    }

    fn clear(&mut self) {
        self.resource_metrics.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MetricsData {
        static instance: MetricsData = MetricsData {
            resource_metrics: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MetricsData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MetricsData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MetricsData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricsData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:opentelemetry.proto.metrics.v1.ResourceMetrics)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ResourceMetrics {
    // message fields
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.ResourceMetrics.resource)
    pub resource: ::protobuf::MessageField<super::resource::Resource>,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.ResourceMetrics.scope_metrics)
    pub scope_metrics: ::std::vec::Vec<ScopeMetrics>,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.ResourceMetrics.schema_url)
    pub schema_url: ::protobuf::Chars,
    // special fields
    // @@protoc_insertion_point(special_field:opentelemetry.proto.metrics.v1.ResourceMetrics.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ResourceMetrics {
    fn default() -> &'a ResourceMetrics {
        <ResourceMetrics as ::protobuf::Message>::default_instance()
    }
}

impl ResourceMetrics {
    pub fn new() -> ResourceMetrics {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::resource::Resource>(
            "resource",
            |m: &ResourceMetrics| { &m.resource },
            |m: &mut ResourceMetrics| { &mut m.resource },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "scope_metrics",
            |m: &ResourceMetrics| { &m.scope_metrics },
            |m: &mut ResourceMetrics| { &mut m.scope_metrics },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "schema_url",
            |m: &ResourceMetrics| { &m.schema_url },
            |m: &mut ResourceMetrics| { &mut m.schema_url },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ResourceMetrics>(
            "ResourceMetrics",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ResourceMetrics {
    const NAME: &'static str = "ResourceMetrics";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resource)?;
                },
                18 => {
                    self.scope_metrics.push(is.read_message()?);
                },
                26 => {
                    self.schema_url = is.read_tokio_chars()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.scope_metrics {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.schema_url.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.schema_url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.resource.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.scope_metrics {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if !self.schema_url.is_empty() {
            os.write_string(3, &self.schema_url)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ResourceMetrics {
        ResourceMetrics::new()
    }

    fn clear(&mut self) {
        self.resource.clear();
        self.scope_metrics.clear();
        self.schema_url.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ResourceMetrics {
        static instance: ResourceMetrics = ResourceMetrics {
            resource: ::protobuf::MessageField::none(),
            scope_metrics: ::std::vec::Vec::new(),
            schema_url: ::protobuf::Chars::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ResourceMetrics {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ResourceMetrics").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ResourceMetrics {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResourceMetrics {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:opentelemetry.proto.metrics.v1.ScopeMetrics)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ScopeMetrics {
    // message fields
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.ScopeMetrics.scope)
    pub scope: ::protobuf::MessageField<super::common::InstrumentationScope>,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.ScopeMetrics.metrics)
    pub metrics: ::std::vec::Vec<Metric>,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.ScopeMetrics.schema_url)
    pub schema_url: ::protobuf::Chars,
    // special fields
    // @@protoc_insertion_point(special_field:opentelemetry.proto.metrics.v1.ScopeMetrics.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ScopeMetrics {
    fn default() -> &'a ScopeMetrics {
        <ScopeMetrics as ::protobuf::Message>::default_instance()
    }
}

impl ScopeMetrics {
    pub fn new() -> ScopeMetrics {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::InstrumentationScope>(
            "scope",
            |m: &ScopeMetrics| { &m.scope },
            |m: &mut ScopeMetrics| { &mut m.scope },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "metrics",
            |m: &ScopeMetrics| { &m.metrics },
            |m: &mut ScopeMetrics| { &mut m.metrics },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "schema_url",
            |m: &ScopeMetrics| { &m.schema_url },
            |m: &mut ScopeMetrics| { &mut m.schema_url },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ScopeMetrics>(
            "ScopeMetrics",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ScopeMetrics {
    const NAME: &'static str = "ScopeMetrics";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.scope)?;
                },
                18 => {
                    self.metrics.push(is.read_message()?);
                },
                26 => {
                    self.schema_url = is.read_tokio_chars()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.scope.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.metrics {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.schema_url.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.schema_url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.scope.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.metrics {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if !self.schema_url.is_empty() {
            os.write_string(3, &self.schema_url)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ScopeMetrics {
        ScopeMetrics::new()
    }

    fn clear(&mut self) {
        self.scope.clear();
        self.metrics.clear();
        self.schema_url.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ScopeMetrics {
        static instance: ScopeMetrics = ScopeMetrics {
            scope: ::protobuf::MessageField::none(),
            metrics: ::std::vec::Vec::new(),
            schema_url: ::protobuf::Chars::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ScopeMetrics {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ScopeMetrics").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ScopeMetrics {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ScopeMetrics {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:opentelemetry.proto.metrics.v1.Metric)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Metric {
    // message fields
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.Metric.name)
    pub name: ::protobuf::Chars,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.Metric.description)
    pub description: ::protobuf::Chars,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.Metric.unit)
    pub unit: ::protobuf::Chars,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.Metric.metadata)
    pub metadata: ::std::vec::Vec<super::common::KeyValue>,
    // message oneof groups
    pub data: ::std::option::Option<metric::Data>,
    // special fields
    // @@protoc_insertion_point(special_field:opentelemetry.proto.metrics.v1.Metric.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Metric {
    fn default() -> &'a Metric {
        <Metric as ::protobuf::Message>::default_instance()
    }
}

impl Metric {
    pub fn new() -> Metric {
        ::std::default::Default::default()
    }

    // .opentelemetry.proto.metrics.v1.Gauge gauge = 5;

    pub fn gauge(&self) -> &Gauge {
        match self.data {
            ::std::option::Option::Some(metric::Data::Gauge(ref v)) => v,
            _ => <Gauge as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_gauge(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_gauge(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(metric::Data::Gauge(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_gauge(&mut self, v: Gauge) {
        self.data = ::std::option::Option::Some(metric::Data::Gauge(v))
    }

    // Mutable pointer to the field.
    pub fn mut_gauge(&mut self) -> &mut Gauge {
        if let ::std::option::Option::Some(metric::Data::Gauge(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(metric::Data::Gauge(Gauge::new()));
        }
        match self.data {
            ::std::option::Option::Some(metric::Data::Gauge(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_gauge(&mut self) -> Gauge {
        if self.has_gauge() {
            match self.data.take() {
                ::std::option::Option::Some(metric::Data::Gauge(v)) => v,
                _ => panic!(),
            }
        } else {
            Gauge::new()
        }
    }

    // .opentelemetry.proto.metrics.v1.Sum sum = 7;

    pub fn sum(&self) -> &Sum {
        match self.data {
            ::std::option::Option::Some(metric::Data::Sum(ref v)) => v,
            _ => <Sum as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_sum(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_sum(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(metric::Data::Sum(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sum(&mut self, v: Sum) {
        self.data = ::std::option::Option::Some(metric::Data::Sum(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sum(&mut self) -> &mut Sum {
        if let ::std::option::Option::Some(metric::Data::Sum(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(metric::Data::Sum(Sum::new()));
        }
        match self.data {
            ::std::option::Option::Some(metric::Data::Sum(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sum(&mut self) -> Sum {
        if self.has_sum() {
            match self.data.take() {
                ::std::option::Option::Some(metric::Data::Sum(v)) => v,
                _ => panic!(),
            }
        } else {
            Sum::new()
        }
    }

    // .opentelemetry.proto.metrics.v1.Histogram histogram = 9;

    pub fn histogram(&self) -> &Histogram {
        match self.data {
            ::std::option::Option::Some(metric::Data::Histogram(ref v)) => v,
            _ => <Histogram as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_histogram(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_histogram(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(metric::Data::Histogram(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_histogram(&mut self, v: Histogram) {
        self.data = ::std::option::Option::Some(metric::Data::Histogram(v))
    }

    // Mutable pointer to the field.
    pub fn mut_histogram(&mut self) -> &mut Histogram {
        if let ::std::option::Option::Some(metric::Data::Histogram(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(metric::Data::Histogram(Histogram::new()));
        }
        match self.data {
            ::std::option::Option::Some(metric::Data::Histogram(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_histogram(&mut self) -> Histogram {
        if self.has_histogram() {
            match self.data.take() {
                ::std::option::Option::Some(metric::Data::Histogram(v)) => v,
                _ => panic!(),
            }
        } else {
            Histogram::new()
        }
    }

    // .opentelemetry.proto.metrics.v1.ExponentialHistogram exponential_histogram = 10;

    pub fn exponential_histogram(&self) -> &ExponentialHistogram {
        match self.data {
            ::std::option::Option::Some(metric::Data::ExponentialHistogram(ref v)) => v,
            _ => <ExponentialHistogram as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_exponential_histogram(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_exponential_histogram(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(metric::Data::ExponentialHistogram(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_exponential_histogram(&mut self, v: ExponentialHistogram) {
        self.data = ::std::option::Option::Some(metric::Data::ExponentialHistogram(v))
    }

    // Mutable pointer to the field.
    pub fn mut_exponential_histogram(&mut self) -> &mut ExponentialHistogram {
        if let ::std::option::Option::Some(metric::Data::ExponentialHistogram(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(metric::Data::ExponentialHistogram(ExponentialHistogram::new()));
        }
        match self.data {
            ::std::option::Option::Some(metric::Data::ExponentialHistogram(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_exponential_histogram(&mut self) -> ExponentialHistogram {
        if self.has_exponential_histogram() {
            match self.data.take() {
                ::std::option::Option::Some(metric::Data::ExponentialHistogram(v)) => v,
                _ => panic!(),
            }
        } else {
            ExponentialHistogram::new()
        }
    }

    // .opentelemetry.proto.metrics.v1.Summary summary = 11;

    pub fn summary(&self) -> &Summary {
        match self.data {
            ::std::option::Option::Some(metric::Data::Summary(ref v)) => v,
            _ => <Summary as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_summary(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_summary(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(metric::Data::Summary(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_summary(&mut self, v: Summary) {
        self.data = ::std::option::Option::Some(metric::Data::Summary(v))
    }

    // Mutable pointer to the field.
    pub fn mut_summary(&mut self) -> &mut Summary {
        if let ::std::option::Option::Some(metric::Data::Summary(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(metric::Data::Summary(Summary::new()));
        }
        match self.data {
            ::std::option::Option::Some(metric::Data::Summary(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_summary(&mut self) -> Summary {
        if self.has_summary() {
            match self.data.take() {
                ::std::option::Option::Some(metric::Data::Summary(v)) => v,
                _ => panic!(),
            }
        } else {
            Summary::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Metric| { &m.name },
            |m: &mut Metric| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &Metric| { &m.description },
            |m: &mut Metric| { &mut m.description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "unit",
            |m: &Metric| { &m.unit },
            |m: &mut Metric| { &mut m.unit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Gauge>(
            "gauge",
            Metric::has_gauge,
            Metric::gauge,
            Metric::mut_gauge,
            Metric::set_gauge,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Sum>(
            "sum",
            Metric::has_sum,
            Metric::sum,
            Metric::mut_sum,
            Metric::set_sum,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Histogram>(
            "histogram",
            Metric::has_histogram,
            Metric::histogram,
            Metric::mut_histogram,
            Metric::set_histogram,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ExponentialHistogram>(
            "exponential_histogram",
            Metric::has_exponential_histogram,
            Metric::exponential_histogram,
            Metric::mut_exponential_histogram,
            Metric::set_exponential_histogram,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Summary>(
            "summary",
            Metric::has_summary,
            Metric::summary,
            Metric::mut_summary,
            Metric::set_summary,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "metadata",
            |m: &Metric| { &m.metadata },
            |m: &mut Metric| { &mut m.metadata },
        ));
        oneofs.push(metric::Data::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Metric>(
            "Metric",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Metric {
    const NAME: &'static str = "Metric";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_tokio_chars()?;
                },
                18 => {
                    self.description = is.read_tokio_chars()?;
                },
                26 => {
                    self.unit = is.read_tokio_chars()?;
                },
                42 => {
                    self.data = ::std::option::Option::Some(metric::Data::Gauge(is.read_message()?));
                },
                58 => {
                    self.data = ::std::option::Option::Some(metric::Data::Sum(is.read_message()?));
                },
                74 => {
                    self.data = ::std::option::Option::Some(metric::Data::Histogram(is.read_message()?));
                },
                82 => {
                    self.data = ::std::option::Option::Some(metric::Data::ExponentialHistogram(is.read_message()?));
                },
                90 => {
                    self.data = ::std::option::Option::Some(metric::Data::Summary(is.read_message()?));
                },
                98 => {
                    self.metadata.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        if !self.unit.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.unit);
        }
        for value in &self.metadata {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &metric::Data::Gauge(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &metric::Data::Sum(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &metric::Data::Histogram(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &metric::Data::ExponentialHistogram(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &metric::Data::Summary(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        if !self.unit.is_empty() {
            os.write_string(3, &self.unit)?;
        }
        for v in &self.metadata {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        };
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &metric::Data::Gauge(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &metric::Data::Sum(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &metric::Data::Histogram(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &metric::Data::ExponentialHistogram(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &metric::Data::Summary(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Metric {
        Metric::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.description.clear();
        self.unit.clear();
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Metric {
        static instance: Metric = Metric {
            name: ::protobuf::Chars::new(),
            description: ::protobuf::Chars::new(),
            unit: ::protobuf::Chars::new(),
            metadata: ::std::vec::Vec::new(),
            data: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Metric {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Metric").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Metric {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Metric {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Metric`
pub mod metric {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:opentelemetry.proto.metrics.v1.Metric.data)
    pub enum Data {
        // @@protoc_insertion_point(oneof_field:opentelemetry.proto.metrics.v1.Metric.gauge)
        Gauge(super::Gauge),
        // @@protoc_insertion_point(oneof_field:opentelemetry.proto.metrics.v1.Metric.sum)
        Sum(super::Sum),
        // @@protoc_insertion_point(oneof_field:opentelemetry.proto.metrics.v1.Metric.histogram)
        Histogram(super::Histogram),
        // @@protoc_insertion_point(oneof_field:opentelemetry.proto.metrics.v1.Metric.exponential_histogram)
        ExponentialHistogram(super::ExponentialHistogram),
        // @@protoc_insertion_point(oneof_field:opentelemetry.proto.metrics.v1.Metric.summary)
        Summary(super::Summary),
    }

    impl ::protobuf::Oneof for Data {
    }

    impl ::protobuf::OneofFull for Data {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Metric as ::protobuf::MessageFull>::descriptor().oneof_by_name("data").unwrap()).clone()
        }
    }

    impl Data {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Data>("data")
        }
    }
}

// @@protoc_insertion_point(message:opentelemetry.proto.metrics.v1.Gauge)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Gauge {
    // message fields
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.Gauge.data_points)
    pub data_points: ::std::vec::Vec<NumberDataPoint>,
    // special fields
    // @@protoc_insertion_point(special_field:opentelemetry.proto.metrics.v1.Gauge.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Gauge {
    fn default() -> &'a Gauge {
        <Gauge as ::protobuf::Message>::default_instance()
    }
}

impl Gauge {
    pub fn new() -> Gauge {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "data_points",
            |m: &Gauge| { &m.data_points },
            |m: &mut Gauge| { &mut m.data_points },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Gauge>(
            "Gauge",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Gauge {
    const NAME: &'static str = "Gauge";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data_points.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.data_points {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.data_points {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Gauge {
        Gauge::new()
    }

    fn clear(&mut self) {
        self.data_points.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Gauge {
        static instance: Gauge = Gauge {
            data_points: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Gauge {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Gauge").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Gauge {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Gauge {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:opentelemetry.proto.metrics.v1.Sum)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Sum {
    // message fields
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.Sum.data_points)
    pub data_points: ::std::vec::Vec<NumberDataPoint>,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.Sum.aggregation_temporality)
    pub aggregation_temporality: ::protobuf::EnumOrUnknown<AggregationTemporality>,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.Sum.is_monotonic)
    pub is_monotonic: bool,
    // special fields
    // @@protoc_insertion_point(special_field:opentelemetry.proto.metrics.v1.Sum.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Sum {
    fn default() -> &'a Sum {
        <Sum as ::protobuf::Message>::default_instance()
    }
}

impl Sum {
    pub fn new() -> Sum {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "data_points",
            |m: &Sum| { &m.data_points },
            |m: &mut Sum| { &mut m.data_points },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "aggregation_temporality",
            |m: &Sum| { &m.aggregation_temporality },
            |m: &mut Sum| { &mut m.aggregation_temporality },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_monotonic",
            |m: &Sum| { &m.is_monotonic },
            |m: &mut Sum| { &mut m.is_monotonic },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Sum>(
            "Sum",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Sum {
    const NAME: &'static str = "Sum";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data_points.push(is.read_message()?);
                },
                16 => {
                    self.aggregation_temporality = is.read_enum_or_unknown()?;
                },
                24 => {
                    self.is_monotonic = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.data_points {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.aggregation_temporality != ::protobuf::EnumOrUnknown::new(AggregationTemporality::AGGREGATION_TEMPORALITY_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(2, self.aggregation_temporality.value());
        }
        if self.is_monotonic != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.data_points {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if self.aggregation_temporality != ::protobuf::EnumOrUnknown::new(AggregationTemporality::AGGREGATION_TEMPORALITY_UNSPECIFIED) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.aggregation_temporality))?;
        }
        if self.is_monotonic != false {
            os.write_bool(3, self.is_monotonic)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Sum {
        Sum::new()
    }

    fn clear(&mut self) {
        self.data_points.clear();
        self.aggregation_temporality = ::protobuf::EnumOrUnknown::new(AggregationTemporality::AGGREGATION_TEMPORALITY_UNSPECIFIED);
        self.is_monotonic = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Sum {
        static instance: Sum = Sum {
            data_points: ::std::vec::Vec::new(),
            aggregation_temporality: ::protobuf::EnumOrUnknown::from_i32(0),
            is_monotonic: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Sum {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Sum").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Sum {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Sum {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:opentelemetry.proto.metrics.v1.Histogram)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Histogram {
    // message fields
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.Histogram.data_points)
    pub data_points: ::std::vec::Vec<HistogramDataPoint>,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.Histogram.aggregation_temporality)
    pub aggregation_temporality: ::protobuf::EnumOrUnknown<AggregationTemporality>,
    // special fields
    // @@protoc_insertion_point(special_field:opentelemetry.proto.metrics.v1.Histogram.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Histogram {
    fn default() -> &'a Histogram {
        <Histogram as ::protobuf::Message>::default_instance()
    }
}

impl Histogram {
    pub fn new() -> Histogram {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "data_points",
            |m: &Histogram| { &m.data_points },
            |m: &mut Histogram| { &mut m.data_points },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "aggregation_temporality",
            |m: &Histogram| { &m.aggregation_temporality },
            |m: &mut Histogram| { &mut m.aggregation_temporality },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Histogram>(
            "Histogram",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Histogram {
    const NAME: &'static str = "Histogram";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data_points.push(is.read_message()?);
                },
                16 => {
                    self.aggregation_temporality = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.data_points {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.aggregation_temporality != ::protobuf::EnumOrUnknown::new(AggregationTemporality::AGGREGATION_TEMPORALITY_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(2, self.aggregation_temporality.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.data_points {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if self.aggregation_temporality != ::protobuf::EnumOrUnknown::new(AggregationTemporality::AGGREGATION_TEMPORALITY_UNSPECIFIED) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.aggregation_temporality))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Histogram {
        Histogram::new()
    }

    fn clear(&mut self) {
        self.data_points.clear();
        self.aggregation_temporality = ::protobuf::EnumOrUnknown::new(AggregationTemporality::AGGREGATION_TEMPORALITY_UNSPECIFIED);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Histogram {
        static instance: Histogram = Histogram {
            data_points: ::std::vec::Vec::new(),
            aggregation_temporality: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Histogram {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Histogram").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Histogram {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Histogram {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:opentelemetry.proto.metrics.v1.ExponentialHistogram)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ExponentialHistogram {
    // message fields
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.ExponentialHistogram.data_points)
    pub data_points: ::std::vec::Vec<ExponentialHistogramDataPoint>,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.ExponentialHistogram.aggregation_temporality)
    pub aggregation_temporality: ::protobuf::EnumOrUnknown<AggregationTemporality>,
    // special fields
    // @@protoc_insertion_point(special_field:opentelemetry.proto.metrics.v1.ExponentialHistogram.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExponentialHistogram {
    fn default() -> &'a ExponentialHistogram {
        <ExponentialHistogram as ::protobuf::Message>::default_instance()
    }
}

impl ExponentialHistogram {
    pub fn new() -> ExponentialHistogram {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "data_points",
            |m: &ExponentialHistogram| { &m.data_points },
            |m: &mut ExponentialHistogram| { &mut m.data_points },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "aggregation_temporality",
            |m: &ExponentialHistogram| { &m.aggregation_temporality },
            |m: &mut ExponentialHistogram| { &mut m.aggregation_temporality },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExponentialHistogram>(
            "ExponentialHistogram",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExponentialHistogram {
    const NAME: &'static str = "ExponentialHistogram";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data_points.push(is.read_message()?);
                },
                16 => {
                    self.aggregation_temporality = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.data_points {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.aggregation_temporality != ::protobuf::EnumOrUnknown::new(AggregationTemporality::AGGREGATION_TEMPORALITY_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(2, self.aggregation_temporality.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.data_points {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if self.aggregation_temporality != ::protobuf::EnumOrUnknown::new(AggregationTemporality::AGGREGATION_TEMPORALITY_UNSPECIFIED) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.aggregation_temporality))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExponentialHistogram {
        ExponentialHistogram::new()
    }

    fn clear(&mut self) {
        self.data_points.clear();
        self.aggregation_temporality = ::protobuf::EnumOrUnknown::new(AggregationTemporality::AGGREGATION_TEMPORALITY_UNSPECIFIED);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExponentialHistogram {
        static instance: ExponentialHistogram = ExponentialHistogram {
            data_points: ::std::vec::Vec::new(),
            aggregation_temporality: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ExponentialHistogram {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExponentialHistogram").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExponentialHistogram {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExponentialHistogram {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:opentelemetry.proto.metrics.v1.Summary)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Summary {
    // message fields
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.Summary.data_points)
    pub data_points: ::std::vec::Vec<SummaryDataPoint>,
    // special fields
    // @@protoc_insertion_point(special_field:opentelemetry.proto.metrics.v1.Summary.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Summary {
    fn default() -> &'a Summary {
        <Summary as ::protobuf::Message>::default_instance()
    }
}

impl Summary {
    pub fn new() -> Summary {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "data_points",
            |m: &Summary| { &m.data_points },
            |m: &mut Summary| { &mut m.data_points },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Summary>(
            "Summary",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Summary {
    const NAME: &'static str = "Summary";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data_points.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.data_points {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.data_points {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Summary {
        Summary::new()
    }

    fn clear(&mut self) {
        self.data_points.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Summary {
        static instance: Summary = Summary {
            data_points: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Summary {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Summary").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Summary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Summary {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:opentelemetry.proto.metrics.v1.NumberDataPoint)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct NumberDataPoint {
    // message fields
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.NumberDataPoint.attributes)
    pub attributes: ::std::vec::Vec<super::common::KeyValue>,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.NumberDataPoint.start_time_unix_nano)
    pub start_time_unix_nano: u64,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.NumberDataPoint.time_unix_nano)
    pub time_unix_nano: u64,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.NumberDataPoint.exemplars)
    pub exemplars: ::std::vec::Vec<Exemplar>,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.NumberDataPoint.flags)
    pub flags: u32,
    // message oneof groups
    pub value: ::std::option::Option<number_data_point::Value>,
    // special fields
    // @@protoc_insertion_point(special_field:opentelemetry.proto.metrics.v1.NumberDataPoint.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NumberDataPoint {
    fn default() -> &'a NumberDataPoint {
        <NumberDataPoint as ::protobuf::Message>::default_instance()
    }
}

impl NumberDataPoint {
    pub fn new() -> NumberDataPoint {
        ::std::default::Default::default()
    }

    // double as_double = 4;

    pub fn as_double(&self) -> f64 {
        match self.value {
            ::std::option::Option::Some(number_data_point::Value::AsDouble(v)) => v,
            _ => 0.,
        }
    }

    pub fn clear_as_double(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_as_double(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(number_data_point::Value::AsDouble(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_as_double(&mut self, v: f64) {
        self.value = ::std::option::Option::Some(number_data_point::Value::AsDouble(v))
    }

    // sfixed64 as_int = 6;

    pub fn as_int(&self) -> i64 {
        match self.value {
            ::std::option::Option::Some(number_data_point::Value::AsInt(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_as_int(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_as_int(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(number_data_point::Value::AsInt(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_as_int(&mut self, v: i64) {
        self.value = ::std::option::Option::Some(number_data_point::Value::AsInt(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "attributes",
            |m: &NumberDataPoint| { &m.attributes },
            |m: &mut NumberDataPoint| { &mut m.attributes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "start_time_unix_nano",
            |m: &NumberDataPoint| { &m.start_time_unix_nano },
            |m: &mut NumberDataPoint| { &mut m.start_time_unix_nano },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "time_unix_nano",
            |m: &NumberDataPoint| { &m.time_unix_nano },
            |m: &mut NumberDataPoint| { &mut m.time_unix_nano },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "as_double",
            NumberDataPoint::has_as_double,
            NumberDataPoint::as_double,
            NumberDataPoint::set_as_double,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "as_int",
            NumberDataPoint::has_as_int,
            NumberDataPoint::as_int,
            NumberDataPoint::set_as_int,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "exemplars",
            |m: &NumberDataPoint| { &m.exemplars },
            |m: &mut NumberDataPoint| { &mut m.exemplars },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "flags",
            |m: &NumberDataPoint| { &m.flags },
            |m: &mut NumberDataPoint| { &mut m.flags },
        ));
        oneofs.push(number_data_point::Value::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NumberDataPoint>(
            "NumberDataPoint",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NumberDataPoint {
    const NAME: &'static str = "NumberDataPoint";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                58 => {
                    self.attributes.push(is.read_message()?);
                },
                17 => {
                    self.start_time_unix_nano = is.read_fixed64()?;
                },
                25 => {
                    self.time_unix_nano = is.read_fixed64()?;
                },
                33 => {
                    self.value = ::std::option::Option::Some(number_data_point::Value::AsDouble(is.read_double()?));
                },
                49 => {
                    self.value = ::std::option::Option::Some(number_data_point::Value::AsInt(is.read_sfixed64()?));
                },
                42 => {
                    self.exemplars.push(is.read_message()?);
                },
                64 => {
                    self.flags = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.attributes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.start_time_unix_nano != 0 {
            my_size += 1 + 8;
        }
        if self.time_unix_nano != 0 {
            my_size += 1 + 8;
        }
        for value in &self.exemplars {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.flags != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.flags);
        }
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &number_data_point::Value::AsDouble(v) => {
                    my_size += 1 + 8;
                },
                &number_data_point::Value::AsInt(v) => {
                    my_size += 1 + 8;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.attributes {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if self.start_time_unix_nano != 0 {
            os.write_fixed64(2, self.start_time_unix_nano)?;
        }
        if self.time_unix_nano != 0 {
            os.write_fixed64(3, self.time_unix_nano)?;
        }
        for v in &self.exemplars {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if self.flags != 0 {
            os.write_uint32(8, self.flags)?;
        }
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &number_data_point::Value::AsDouble(v) => {
                    os.write_double(4, v)?;
                },
                &number_data_point::Value::AsInt(v) => {
                    os.write_sfixed64(6, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NumberDataPoint {
        NumberDataPoint::new()
    }

    fn clear(&mut self) {
        self.attributes.clear();
        self.start_time_unix_nano = 0;
        self.time_unix_nano = 0;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.exemplars.clear();
        self.flags = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NumberDataPoint {
        static instance: NumberDataPoint = NumberDataPoint {
            attributes: ::std::vec::Vec::new(),
            start_time_unix_nano: 0,
            time_unix_nano: 0,
            exemplars: ::std::vec::Vec::new(),
            flags: 0,
            value: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NumberDataPoint {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NumberDataPoint").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NumberDataPoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NumberDataPoint {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `NumberDataPoint`
pub mod number_data_point {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:opentelemetry.proto.metrics.v1.NumberDataPoint.value)
    pub enum Value {
        // @@protoc_insertion_point(oneof_field:opentelemetry.proto.metrics.v1.NumberDataPoint.as_double)
        AsDouble(f64),
        // @@protoc_insertion_point(oneof_field:opentelemetry.proto.metrics.v1.NumberDataPoint.as_int)
        AsInt(i64),
    }

    impl ::protobuf::Oneof for Value {
    }

    impl ::protobuf::OneofFull for Value {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::NumberDataPoint as ::protobuf::MessageFull>::descriptor().oneof_by_name("value").unwrap()).clone()
        }
    }

    impl Value {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Value>("value")
        }
    }
}

// @@protoc_insertion_point(message:opentelemetry.proto.metrics.v1.HistogramDataPoint)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HistogramDataPoint {
    // message fields
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.HistogramDataPoint.attributes)
    pub attributes: ::std::vec::Vec<super::common::KeyValue>,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.HistogramDataPoint.start_time_unix_nano)
    pub start_time_unix_nano: u64,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.HistogramDataPoint.time_unix_nano)
    pub time_unix_nano: u64,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.HistogramDataPoint.count)
    pub count: u64,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.HistogramDataPoint.sum)
    pub sum: ::std::option::Option<f64>,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.HistogramDataPoint.bucket_counts)
    pub bucket_counts: ::std::vec::Vec<u64>,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.HistogramDataPoint.explicit_bounds)
    pub explicit_bounds: ::std::vec::Vec<f64>,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.HistogramDataPoint.exemplars)
    pub exemplars: ::std::vec::Vec<Exemplar>,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.HistogramDataPoint.flags)
    pub flags: u32,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.HistogramDataPoint.min)
    pub min: ::std::option::Option<f64>,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.HistogramDataPoint.max)
    pub max: ::std::option::Option<f64>,
    // special fields
    // @@protoc_insertion_point(special_field:opentelemetry.proto.metrics.v1.HistogramDataPoint.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HistogramDataPoint {
    fn default() -> &'a HistogramDataPoint {
        <HistogramDataPoint as ::protobuf::Message>::default_instance()
    }
}

impl HistogramDataPoint {
    pub fn new() -> HistogramDataPoint {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "attributes",
            |m: &HistogramDataPoint| { &m.attributes },
            |m: &mut HistogramDataPoint| { &mut m.attributes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "start_time_unix_nano",
            |m: &HistogramDataPoint| { &m.start_time_unix_nano },
            |m: &mut HistogramDataPoint| { &mut m.start_time_unix_nano },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "time_unix_nano",
            |m: &HistogramDataPoint| { &m.time_unix_nano },
            |m: &mut HistogramDataPoint| { &mut m.time_unix_nano },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "count",
            |m: &HistogramDataPoint| { &m.count },
            |m: &mut HistogramDataPoint| { &mut m.count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sum",
            |m: &HistogramDataPoint| { &m.sum },
            |m: &mut HistogramDataPoint| { &mut m.sum },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "bucket_counts",
            |m: &HistogramDataPoint| { &m.bucket_counts },
            |m: &mut HistogramDataPoint| { &mut m.bucket_counts },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "explicit_bounds",
            |m: &HistogramDataPoint| { &m.explicit_bounds },
            |m: &mut HistogramDataPoint| { &mut m.explicit_bounds },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "exemplars",
            |m: &HistogramDataPoint| { &m.exemplars },
            |m: &mut HistogramDataPoint| { &mut m.exemplars },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "flags",
            |m: &HistogramDataPoint| { &m.flags },
            |m: &mut HistogramDataPoint| { &mut m.flags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "min",
            |m: &HistogramDataPoint| { &m.min },
            |m: &mut HistogramDataPoint| { &mut m.min },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "max",
            |m: &HistogramDataPoint| { &m.max },
            |m: &mut HistogramDataPoint| { &mut m.max },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HistogramDataPoint>(
            "HistogramDataPoint",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HistogramDataPoint {
    const NAME: &'static str = "HistogramDataPoint";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                74 => {
                    self.attributes.push(is.read_message()?);
                },
                17 => {
                    self.start_time_unix_nano = is.read_fixed64()?;
                },
                25 => {
                    self.time_unix_nano = is.read_fixed64()?;
                },
                33 => {
                    self.count = is.read_fixed64()?;
                },
                41 => {
                    self.sum = ::std::option::Option::Some(is.read_double()?);
                },
                50 => {
                    is.read_repeated_packed_fixed64_into(&mut self.bucket_counts)?;
                },
                49 => {
                    self.bucket_counts.push(is.read_fixed64()?);
                },
                58 => {
                    is.read_repeated_packed_double_into(&mut self.explicit_bounds)?;
                },
                57 => {
                    self.explicit_bounds.push(is.read_double()?);
                },
                66 => {
                    self.exemplars.push(is.read_message()?);
                },
                80 => {
                    self.flags = is.read_uint32()?;
                },
                89 => {
                    self.min = ::std::option::Option::Some(is.read_double()?);
                },
                97 => {
                    self.max = ::std::option::Option::Some(is.read_double()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.attributes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.start_time_unix_nano != 0 {
            my_size += 1 + 8;
        }
        if self.time_unix_nano != 0 {
            my_size += 1 + 8;
        }
        if self.count != 0 {
            my_size += 1 + 8;
        }
        if let Some(v) = self.sum {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::vec_packed_fixed64_size(6, &self.bucket_counts);
        my_size += ::protobuf::rt::vec_packed_double_size(7, &self.explicit_bounds);
        for value in &self.exemplars {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.flags != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.flags);
        }
        if let Some(v) = self.min {
            my_size += 1 + 8;
        }
        if let Some(v) = self.max {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.attributes {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        if self.start_time_unix_nano != 0 {
            os.write_fixed64(2, self.start_time_unix_nano)?;
        }
        if self.time_unix_nano != 0 {
            os.write_fixed64(3, self.time_unix_nano)?;
        }
        if self.count != 0 {
            os.write_fixed64(4, self.count)?;
        }
        if let Some(v) = self.sum {
            os.write_double(5, v)?;
        }
        os.write_repeated_packed_fixed64(6, &self.bucket_counts)?;
        os.write_repeated_packed_double(7, &self.explicit_bounds)?;
        for v in &self.exemplars {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        if self.flags != 0 {
            os.write_uint32(10, self.flags)?;
        }
        if let Some(v) = self.min {
            os.write_double(11, v)?;
        }
        if let Some(v) = self.max {
            os.write_double(12, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HistogramDataPoint {
        HistogramDataPoint::new()
    }

    fn clear(&mut self) {
        self.attributes.clear();
        self.start_time_unix_nano = 0;
        self.time_unix_nano = 0;
        self.count = 0;
        self.sum = ::std::option::Option::None;
        self.bucket_counts.clear();
        self.explicit_bounds.clear();
        self.exemplars.clear();
        self.flags = 0;
        self.min = ::std::option::Option::None;
        self.max = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HistogramDataPoint {
        static instance: HistogramDataPoint = HistogramDataPoint {
            attributes: ::std::vec::Vec::new(),
            start_time_unix_nano: 0,
            time_unix_nano: 0,
            count: 0,
            sum: ::std::option::Option::None,
            bucket_counts: ::std::vec::Vec::new(),
            explicit_bounds: ::std::vec::Vec::new(),
            exemplars: ::std::vec::Vec::new(),
            flags: 0,
            min: ::std::option::Option::None,
            max: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HistogramDataPoint {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HistogramDataPoint").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HistogramDataPoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HistogramDataPoint {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ExponentialHistogramDataPoint {
    // message fields
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.attributes)
    pub attributes: ::std::vec::Vec<super::common::KeyValue>,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.start_time_unix_nano)
    pub start_time_unix_nano: u64,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.time_unix_nano)
    pub time_unix_nano: u64,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.count)
    pub count: u64,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.sum)
    pub sum: ::std::option::Option<f64>,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.scale)
    pub scale: i32,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.zero_count)
    pub zero_count: u64,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.positive)
    pub positive: ::protobuf::MessageField<exponential_histogram_data_point::Buckets>,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.negative)
    pub negative: ::protobuf::MessageField<exponential_histogram_data_point::Buckets>,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.flags)
    pub flags: u32,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.exemplars)
    pub exemplars: ::std::vec::Vec<Exemplar>,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.min)
    pub min: ::std::option::Option<f64>,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.max)
    pub max: ::std::option::Option<f64>,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.zero_threshold)
    pub zero_threshold: f64,
    // special fields
    // @@protoc_insertion_point(special_field:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExponentialHistogramDataPoint {
    fn default() -> &'a ExponentialHistogramDataPoint {
        <ExponentialHistogramDataPoint as ::protobuf::Message>::default_instance()
    }
}

impl ExponentialHistogramDataPoint {
    pub fn new() -> ExponentialHistogramDataPoint {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(14);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "attributes",
            |m: &ExponentialHistogramDataPoint| { &m.attributes },
            |m: &mut ExponentialHistogramDataPoint| { &mut m.attributes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "start_time_unix_nano",
            |m: &ExponentialHistogramDataPoint| { &m.start_time_unix_nano },
            |m: &mut ExponentialHistogramDataPoint| { &mut m.start_time_unix_nano },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "time_unix_nano",
            |m: &ExponentialHistogramDataPoint| { &m.time_unix_nano },
            |m: &mut ExponentialHistogramDataPoint| { &mut m.time_unix_nano },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "count",
            |m: &ExponentialHistogramDataPoint| { &m.count },
            |m: &mut ExponentialHistogramDataPoint| { &mut m.count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sum",
            |m: &ExponentialHistogramDataPoint| { &m.sum },
            |m: &mut ExponentialHistogramDataPoint| { &mut m.sum },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "scale",
            |m: &ExponentialHistogramDataPoint| { &m.scale },
            |m: &mut ExponentialHistogramDataPoint| { &mut m.scale },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "zero_count",
            |m: &ExponentialHistogramDataPoint| { &m.zero_count },
            |m: &mut ExponentialHistogramDataPoint| { &mut m.zero_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, exponential_histogram_data_point::Buckets>(
            "positive",
            |m: &ExponentialHistogramDataPoint| { &m.positive },
            |m: &mut ExponentialHistogramDataPoint| { &mut m.positive },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, exponential_histogram_data_point::Buckets>(
            "negative",
            |m: &ExponentialHistogramDataPoint| { &m.negative },
            |m: &mut ExponentialHistogramDataPoint| { &mut m.negative },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "flags",
            |m: &ExponentialHistogramDataPoint| { &m.flags },
            |m: &mut ExponentialHistogramDataPoint| { &mut m.flags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "exemplars",
            |m: &ExponentialHistogramDataPoint| { &m.exemplars },
            |m: &mut ExponentialHistogramDataPoint| { &mut m.exemplars },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "min",
            |m: &ExponentialHistogramDataPoint| { &m.min },
            |m: &mut ExponentialHistogramDataPoint| { &mut m.min },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "max",
            |m: &ExponentialHistogramDataPoint| { &m.max },
            |m: &mut ExponentialHistogramDataPoint| { &mut m.max },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "zero_threshold",
            |m: &ExponentialHistogramDataPoint| { &m.zero_threshold },
            |m: &mut ExponentialHistogramDataPoint| { &mut m.zero_threshold },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExponentialHistogramDataPoint>(
            "ExponentialHistogramDataPoint",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExponentialHistogramDataPoint {
    const NAME: &'static str = "ExponentialHistogramDataPoint";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.attributes.push(is.read_message()?);
                },
                17 => {
                    self.start_time_unix_nano = is.read_fixed64()?;
                },
                25 => {
                    self.time_unix_nano = is.read_fixed64()?;
                },
                33 => {
                    self.count = is.read_fixed64()?;
                },
                41 => {
                    self.sum = ::std::option::Option::Some(is.read_double()?);
                },
                48 => {
                    self.scale = is.read_sint32()?;
                },
                57 => {
                    self.zero_count = is.read_fixed64()?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.positive)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.negative)?;
                },
                80 => {
                    self.flags = is.read_uint32()?;
                },
                90 => {
                    self.exemplars.push(is.read_message()?);
                },
                97 => {
                    self.min = ::std::option::Option::Some(is.read_double()?);
                },
                105 => {
                    self.max = ::std::option::Option::Some(is.read_double()?);
                },
                113 => {
                    self.zero_threshold = is.read_double()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.attributes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.start_time_unix_nano != 0 {
            my_size += 1 + 8;
        }
        if self.time_unix_nano != 0 {
            my_size += 1 + 8;
        }
        if self.count != 0 {
            my_size += 1 + 8;
        }
        if let Some(v) = self.sum {
            my_size += 1 + 8;
        }
        if self.scale != 0 {
            my_size += ::protobuf::rt::sint32_size(6, self.scale);
        }
        if self.zero_count != 0 {
            my_size += 1 + 8;
        }
        if let Some(v) = self.positive.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.negative.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.flags != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.flags);
        }
        for value in &self.exemplars {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.min {
            my_size += 1 + 8;
        }
        if let Some(v) = self.max {
            my_size += 1 + 8;
        }
        if self.zero_threshold != 0. {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.attributes {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if self.start_time_unix_nano != 0 {
            os.write_fixed64(2, self.start_time_unix_nano)?;
        }
        if self.time_unix_nano != 0 {
            os.write_fixed64(3, self.time_unix_nano)?;
        }
        if self.count != 0 {
            os.write_fixed64(4, self.count)?;
        }
        if let Some(v) = self.sum {
            os.write_double(5, v)?;
        }
        if self.scale != 0 {
            os.write_sint32(6, self.scale)?;
        }
        if self.zero_count != 0 {
            os.write_fixed64(7, self.zero_count)?;
        }
        if let Some(v) = self.positive.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.negative.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if self.flags != 0 {
            os.write_uint32(10, self.flags)?;
        }
        for v in &self.exemplars {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        };
        if let Some(v) = self.min {
            os.write_double(12, v)?;
        }
        if let Some(v) = self.max {
            os.write_double(13, v)?;
        }
        if self.zero_threshold != 0. {
            os.write_double(14, self.zero_threshold)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExponentialHistogramDataPoint {
        ExponentialHistogramDataPoint::new()
    }

    fn clear(&mut self) {
        self.attributes.clear();
        self.start_time_unix_nano = 0;
        self.time_unix_nano = 0;
        self.count = 0;
        self.sum = ::std::option::Option::None;
        self.scale = 0;
        self.zero_count = 0;
        self.positive.clear();
        self.negative.clear();
        self.flags = 0;
        self.exemplars.clear();
        self.min = ::std::option::Option::None;
        self.max = ::std::option::Option::None;
        self.zero_threshold = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExponentialHistogramDataPoint {
        static instance: ExponentialHistogramDataPoint = ExponentialHistogramDataPoint {
            attributes: ::std::vec::Vec::new(),
            start_time_unix_nano: 0,
            time_unix_nano: 0,
            count: 0,
            sum: ::std::option::Option::None,
            scale: 0,
            zero_count: 0,
            positive: ::protobuf::MessageField::none(),
            negative: ::protobuf::MessageField::none(),
            flags: 0,
            exemplars: ::std::vec::Vec::new(),
            min: ::std::option::Option::None,
            max: ::std::option::Option::None,
            zero_threshold: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ExponentialHistogramDataPoint {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExponentialHistogramDataPoint").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExponentialHistogramDataPoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExponentialHistogramDataPoint {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ExponentialHistogramDataPoint`
pub mod exponential_histogram_data_point {
    // @@protoc_insertion_point(message:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Buckets {
        // message fields
        // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.offset)
        pub offset: i32,
        // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.bucket_counts)
        pub bucket_counts: ::std::vec::Vec<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Buckets {
        fn default() -> &'a Buckets {
            <Buckets as ::protobuf::Message>::default_instance()
        }
    }

    impl Buckets {
        pub fn new() -> Buckets {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "offset",
                |m: &Buckets| { &m.offset },
                |m: &mut Buckets| { &mut m.offset },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "bucket_counts",
                |m: &Buckets| { &m.bucket_counts },
                |m: &mut Buckets| { &mut m.bucket_counts },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Buckets>(
                "ExponentialHistogramDataPoint.Buckets",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Buckets {
        const NAME: &'static str = "Buckets";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.offset = is.read_sint32()?;
                    },
                    18 => {
                        is.read_repeated_packed_uint64_into(&mut self.bucket_counts)?;
                    },
                    16 => {
                        self.bucket_counts.push(is.read_uint64()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.offset != 0 {
                my_size += ::protobuf::rt::sint32_size(1, self.offset);
            }
            my_size += ::protobuf::rt::vec_packed_uint64_size(2, &self.bucket_counts);
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.offset != 0 {
                os.write_sint32(1, self.offset)?;
            }
            os.write_repeated_packed_uint64(2, &self.bucket_counts)?;
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Buckets {
            Buckets::new()
        }

        fn clear(&mut self) {
            self.offset = 0;
            self.bucket_counts.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Buckets {
            static instance: Buckets = Buckets {
                offset: 0,
                bucket_counts: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Buckets {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ExponentialHistogramDataPoint.Buckets").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Buckets {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Buckets {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:opentelemetry.proto.metrics.v1.SummaryDataPoint)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SummaryDataPoint {
    // message fields
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.SummaryDataPoint.attributes)
    pub attributes: ::std::vec::Vec<super::common::KeyValue>,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.SummaryDataPoint.start_time_unix_nano)
    pub start_time_unix_nano: u64,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.SummaryDataPoint.time_unix_nano)
    pub time_unix_nano: u64,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.SummaryDataPoint.count)
    pub count: u64,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.SummaryDataPoint.sum)
    pub sum: f64,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.SummaryDataPoint.quantile_values)
    pub quantile_values: ::std::vec::Vec<summary_data_point::ValueAtQuantile>,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.SummaryDataPoint.flags)
    pub flags: u32,
    // special fields
    // @@protoc_insertion_point(special_field:opentelemetry.proto.metrics.v1.SummaryDataPoint.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SummaryDataPoint {
    fn default() -> &'a SummaryDataPoint {
        <SummaryDataPoint as ::protobuf::Message>::default_instance()
    }
}

impl SummaryDataPoint {
    pub fn new() -> SummaryDataPoint {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "attributes",
            |m: &SummaryDataPoint| { &m.attributes },
            |m: &mut SummaryDataPoint| { &mut m.attributes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "start_time_unix_nano",
            |m: &SummaryDataPoint| { &m.start_time_unix_nano },
            |m: &mut SummaryDataPoint| { &mut m.start_time_unix_nano },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "time_unix_nano",
            |m: &SummaryDataPoint| { &m.time_unix_nano },
            |m: &mut SummaryDataPoint| { &mut m.time_unix_nano },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "count",
            |m: &SummaryDataPoint| { &m.count },
            |m: &mut SummaryDataPoint| { &mut m.count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sum",
            |m: &SummaryDataPoint| { &m.sum },
            |m: &mut SummaryDataPoint| { &mut m.sum },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "quantile_values",
            |m: &SummaryDataPoint| { &m.quantile_values },
            |m: &mut SummaryDataPoint| { &mut m.quantile_values },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "flags",
            |m: &SummaryDataPoint| { &m.flags },
            |m: &mut SummaryDataPoint| { &mut m.flags },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SummaryDataPoint>(
            "SummaryDataPoint",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SummaryDataPoint {
    const NAME: &'static str = "SummaryDataPoint";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                58 => {
                    self.attributes.push(is.read_message()?);
                },
                17 => {
                    self.start_time_unix_nano = is.read_fixed64()?;
                },
                25 => {
                    self.time_unix_nano = is.read_fixed64()?;
                },
                33 => {
                    self.count = is.read_fixed64()?;
                },
                41 => {
                    self.sum = is.read_double()?;
                },
                50 => {
                    self.quantile_values.push(is.read_message()?);
                },
                64 => {
                    self.flags = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.attributes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.start_time_unix_nano != 0 {
            my_size += 1 + 8;
        }
        if self.time_unix_nano != 0 {
            my_size += 1 + 8;
        }
        if self.count != 0 {
            my_size += 1 + 8;
        }
        if self.sum != 0. {
            my_size += 1 + 8;
        }
        for value in &self.quantile_values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.flags != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.flags);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.attributes {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if self.start_time_unix_nano != 0 {
            os.write_fixed64(2, self.start_time_unix_nano)?;
        }
        if self.time_unix_nano != 0 {
            os.write_fixed64(3, self.time_unix_nano)?;
        }
        if self.count != 0 {
            os.write_fixed64(4, self.count)?;
        }
        if self.sum != 0. {
            os.write_double(5, self.sum)?;
        }
        for v in &self.quantile_values {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        if self.flags != 0 {
            os.write_uint32(8, self.flags)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SummaryDataPoint {
        SummaryDataPoint::new()
    }

    fn clear(&mut self) {
        self.attributes.clear();
        self.start_time_unix_nano = 0;
        self.time_unix_nano = 0;
        self.count = 0;
        self.sum = 0.;
        self.quantile_values.clear();
        self.flags = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SummaryDataPoint {
        static instance: SummaryDataPoint = SummaryDataPoint {
            attributes: ::std::vec::Vec::new(),
            start_time_unix_nano: 0,
            time_unix_nano: 0,
            count: 0,
            sum: 0.,
            quantile_values: ::std::vec::Vec::new(),
            flags: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SummaryDataPoint {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SummaryDataPoint").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SummaryDataPoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SummaryDataPoint {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `SummaryDataPoint`
pub mod summary_data_point {
    // @@protoc_insertion_point(message:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ValueAtQuantile {
        // message fields
        // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.quantile)
        pub quantile: f64,
        // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.value)
        pub value: f64,
        // special fields
        // @@protoc_insertion_point(special_field:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ValueAtQuantile {
        fn default() -> &'a ValueAtQuantile {
            <ValueAtQuantile as ::protobuf::Message>::default_instance()
        }
    }

    impl ValueAtQuantile {
        pub fn new() -> ValueAtQuantile {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "quantile",
                |m: &ValueAtQuantile| { &m.quantile },
                |m: &mut ValueAtQuantile| { &mut m.quantile },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "value",
                |m: &ValueAtQuantile| { &m.value },
                |m: &mut ValueAtQuantile| { &mut m.value },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ValueAtQuantile>(
                "SummaryDataPoint.ValueAtQuantile",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ValueAtQuantile {
        const NAME: &'static str = "ValueAtQuantile";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.quantile = is.read_double()?;
                    },
                    17 => {
                        self.value = is.read_double()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.quantile != 0. {
                my_size += 1 + 8;
            }
            if self.value != 0. {
                my_size += 1 + 8;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.quantile != 0. {
                os.write_double(1, self.quantile)?;
            }
            if self.value != 0. {
                os.write_double(2, self.value)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ValueAtQuantile {
            ValueAtQuantile::new()
        }

        fn clear(&mut self) {
            self.quantile = 0.;
            self.value = 0.;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ValueAtQuantile {
            static instance: ValueAtQuantile = ValueAtQuantile {
                quantile: 0.,
                value: 0.,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ValueAtQuantile {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("SummaryDataPoint.ValueAtQuantile").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ValueAtQuantile {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ValueAtQuantile {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:opentelemetry.proto.metrics.v1.Exemplar)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Exemplar {
    // message fields
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.Exemplar.filtered_attributes)
    pub filtered_attributes: ::std::vec::Vec<super::common::KeyValue>,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.Exemplar.time_unix_nano)
    pub time_unix_nano: u64,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.Exemplar.span_id)
    pub span_id: ::bytes::Bytes,
    // @@protoc_insertion_point(field:opentelemetry.proto.metrics.v1.Exemplar.trace_id)
    pub trace_id: ::bytes::Bytes,
    // message oneof groups
    pub value: ::std::option::Option<exemplar::Value>,
    // special fields
    // @@protoc_insertion_point(special_field:opentelemetry.proto.metrics.v1.Exemplar.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Exemplar {
    fn default() -> &'a Exemplar {
        <Exemplar as ::protobuf::Message>::default_instance()
    }
}

impl Exemplar {
    pub fn new() -> Exemplar {
        ::std::default::Default::default()
    }

    // double as_double = 3;

    pub fn as_double(&self) -> f64 {
        match self.value {
            ::std::option::Option::Some(exemplar::Value::AsDouble(v)) => v,
            _ => 0.,
        }
    }

    pub fn clear_as_double(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_as_double(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(exemplar::Value::AsDouble(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_as_double(&mut self, v: f64) {
        self.value = ::std::option::Option::Some(exemplar::Value::AsDouble(v))
    }

    // sfixed64 as_int = 6;

    pub fn as_int(&self) -> i64 {
        match self.value {
            ::std::option::Option::Some(exemplar::Value::AsInt(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_as_int(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_as_int(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(exemplar::Value::AsInt(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_as_int(&mut self, v: i64) {
        self.value = ::std::option::Option::Some(exemplar::Value::AsInt(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "filtered_attributes",
            |m: &Exemplar| { &m.filtered_attributes },
            |m: &mut Exemplar| { &mut m.filtered_attributes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "time_unix_nano",
            |m: &Exemplar| { &m.time_unix_nano },
            |m: &mut Exemplar| { &mut m.time_unix_nano },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "as_double",
            Exemplar::has_as_double,
            Exemplar::as_double,
            Exemplar::set_as_double,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "as_int",
            Exemplar::has_as_int,
            Exemplar::as_int,
            Exemplar::set_as_int,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "span_id",
            |m: &Exemplar| { &m.span_id },
            |m: &mut Exemplar| { &mut m.span_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "trace_id",
            |m: &Exemplar| { &m.trace_id },
            |m: &mut Exemplar| { &mut m.trace_id },
        ));
        oneofs.push(exemplar::Value::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Exemplar>(
            "Exemplar",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Exemplar {
    const NAME: &'static str = "Exemplar";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                58 => {
                    self.filtered_attributes.push(is.read_message()?);
                },
                17 => {
                    self.time_unix_nano = is.read_fixed64()?;
                },
                25 => {
                    self.value = ::std::option::Option::Some(exemplar::Value::AsDouble(is.read_double()?));
                },
                49 => {
                    self.value = ::std::option::Option::Some(exemplar::Value::AsInt(is.read_sfixed64()?));
                },
                34 => {
                    self.span_id = is.read_tokio_bytes()?;
                },
                42 => {
                    self.trace_id = is.read_tokio_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.filtered_attributes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.time_unix_nano != 0 {
            my_size += 1 + 8;
        }
        if !self.span_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.span_id);
        }
        if !self.trace_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.trace_id);
        }
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &exemplar::Value::AsDouble(v) => {
                    my_size += 1 + 8;
                },
                &exemplar::Value::AsInt(v) => {
                    my_size += 1 + 8;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.filtered_attributes {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if self.time_unix_nano != 0 {
            os.write_fixed64(2, self.time_unix_nano)?;
        }
        if !self.span_id.is_empty() {
            os.write_bytes(4, &self.span_id)?;
        }
        if !self.trace_id.is_empty() {
            os.write_bytes(5, &self.trace_id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &exemplar::Value::AsDouble(v) => {
                    os.write_double(3, v)?;
                },
                &exemplar::Value::AsInt(v) => {
                    os.write_sfixed64(6, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Exemplar {
        Exemplar::new()
    }

    fn clear(&mut self) {
        self.filtered_attributes.clear();
        self.time_unix_nano = 0;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.span_id.clear();
        self.trace_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Exemplar {
        static instance: Exemplar = Exemplar {
            filtered_attributes: ::std::vec::Vec::new(),
            time_unix_nano: 0,
            span_id: ::bytes::Bytes::new(),
            trace_id: ::bytes::Bytes::new(),
            value: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Exemplar {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Exemplar").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Exemplar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Exemplar {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Exemplar`
pub mod exemplar {

    #[derive(Clone,PartialEq,Debug)]
    // @@protoc_insertion_point(oneof:opentelemetry.proto.metrics.v1.Exemplar.value)
    pub enum Value {
        // @@protoc_insertion_point(oneof_field:opentelemetry.proto.metrics.v1.Exemplar.as_double)
        AsDouble(f64),
        // @@protoc_insertion_point(oneof_field:opentelemetry.proto.metrics.v1.Exemplar.as_int)
        AsInt(i64),
    }

    impl ::protobuf::Oneof for Value {
    }

    impl ::protobuf::OneofFull for Value {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Exemplar as ::protobuf::MessageFull>::descriptor().oneof_by_name("value").unwrap()).clone()
        }
    }

    impl Value {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Value>("value")
        }
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:opentelemetry.proto.metrics.v1.AggregationTemporality)
pub enum AggregationTemporality {
    // @@protoc_insertion_point(enum_value:opentelemetry.proto.metrics.v1.AggregationTemporality.AGGREGATION_TEMPORALITY_UNSPECIFIED)
    AGGREGATION_TEMPORALITY_UNSPECIFIED = 0,
    // @@protoc_insertion_point(enum_value:opentelemetry.proto.metrics.v1.AggregationTemporality.AGGREGATION_TEMPORALITY_DELTA)
    AGGREGATION_TEMPORALITY_DELTA = 1,
    // @@protoc_insertion_point(enum_value:opentelemetry.proto.metrics.v1.AggregationTemporality.AGGREGATION_TEMPORALITY_CUMULATIVE)
    AGGREGATION_TEMPORALITY_CUMULATIVE = 2,
}

impl ::protobuf::Enum for AggregationTemporality {
    const NAME: &'static str = "AggregationTemporality";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<AggregationTemporality> {
        match value {
            0 => ::std::option::Option::Some(AggregationTemporality::AGGREGATION_TEMPORALITY_UNSPECIFIED),
            1 => ::std::option::Option::Some(AggregationTemporality::AGGREGATION_TEMPORALITY_DELTA),
            2 => ::std::option::Option::Some(AggregationTemporality::AGGREGATION_TEMPORALITY_CUMULATIVE),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<AggregationTemporality> {
        match str {
            "AGGREGATION_TEMPORALITY_UNSPECIFIED" => ::std::option::Option::Some(AggregationTemporality::AGGREGATION_TEMPORALITY_UNSPECIFIED),
            "AGGREGATION_TEMPORALITY_DELTA" => ::std::option::Option::Some(AggregationTemporality::AGGREGATION_TEMPORALITY_DELTA),
            "AGGREGATION_TEMPORALITY_CUMULATIVE" => ::std::option::Option::Some(AggregationTemporality::AGGREGATION_TEMPORALITY_CUMULATIVE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [AggregationTemporality] = &[
        AggregationTemporality::AGGREGATION_TEMPORALITY_UNSPECIFIED,
        AggregationTemporality::AGGREGATION_TEMPORALITY_DELTA,
        AggregationTemporality::AGGREGATION_TEMPORALITY_CUMULATIVE,
    ];
}

impl ::protobuf::EnumFull for AggregationTemporality {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("AggregationTemporality").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for AggregationTemporality {
    fn default() -> Self {
        AggregationTemporality::AGGREGATION_TEMPORALITY_UNSPECIFIED
    }
}

impl AggregationTemporality {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<AggregationTemporality>("AggregationTemporality")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:opentelemetry.proto.metrics.v1.DataPointFlags)
pub enum DataPointFlags {
    // @@protoc_insertion_point(enum_value:opentelemetry.proto.metrics.v1.DataPointFlags.DATA_POINT_FLAGS_DO_NOT_USE)
    DATA_POINT_FLAGS_DO_NOT_USE = 0,
    // @@protoc_insertion_point(enum_value:opentelemetry.proto.metrics.v1.DataPointFlags.DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK)
    DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK = 1,
}

impl ::protobuf::Enum for DataPointFlags {
    const NAME: &'static str = "DataPointFlags";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DataPointFlags> {
        match value {
            0 => ::std::option::Option::Some(DataPointFlags::DATA_POINT_FLAGS_DO_NOT_USE),
            1 => ::std::option::Option::Some(DataPointFlags::DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<DataPointFlags> {
        match str {
            "DATA_POINT_FLAGS_DO_NOT_USE" => ::std::option::Option::Some(DataPointFlags::DATA_POINT_FLAGS_DO_NOT_USE),
            "DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK" => ::std::option::Option::Some(DataPointFlags::DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [DataPointFlags] = &[
        DataPointFlags::DATA_POINT_FLAGS_DO_NOT_USE,
        DataPointFlags::DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK,
    ];
}

impl ::protobuf::EnumFull for DataPointFlags {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("DataPointFlags").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for DataPointFlags {
    fn default() -> Self {
        DataPointFlags::DATA_POINT_FLAGS_DO_NOT_USE
    }
}

impl DataPointFlags {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<DataPointFlags>("DataPointFlags")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n,opentelemetry/proto/metrics/v1/metrics.proto\x12\x1eopentelemetry.pro\
    to.metrics.v1\x1a*opentelemetry/proto/common/v1/common.proto\x1a.opentel\
    emetry/proto/resource/v1/resource.proto\"i\n\x0bMetricsData\x12Z\n\x10re\
    source_metrics\x18\x01\x20\x03(\x0b2/.opentelemetry.proto.metrics.v1.Res\
    ourceMetricsR\x0fresourceMetrics\"\xd2\x01\n\x0fResourceMetrics\x12E\n\
    \x08resource\x18\x01\x20\x01(\x0b2).opentelemetry.proto.resource.v1.Reso\
    urceR\x08resource\x12Q\n\rscope_metrics\x18\x02\x20\x03(\x0b2,.opentelem\
    etry.proto.metrics.v1.ScopeMetricsR\x0cscopeMetrics\x12\x1d\n\nschema_ur\
    l\x18\x03\x20\x01(\tR\tschemaUrlJ\x06\x08\xe8\x07\x10\xe9\x07\"\xba\x01\
    \n\x0cScopeMetrics\x12I\n\x05scope\x18\x01\x20\x01(\x0b23.opentelemetry.\
    proto.common.v1.InstrumentationScopeR\x05scope\x12@\n\x07metrics\x18\x02\
    \x20\x03(\x0b2&.opentelemetry.proto.metrics.v1.MetricR\x07metrics\x12\
    \x1d\n\nschema_url\x18\x03\x20\x01(\tR\tschemaUrl\"\xa6\x04\n\x06Metric\
    \x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x20\n\x0bdescription\
    \x18\x02\x20\x01(\tR\x0bdescription\x12\x12\n\x04unit\x18\x03\x20\x01(\t\
    R\x04unit\x12=\n\x05gauge\x18\x05\x20\x01(\x0b2%.opentelemetry.proto.met\
    rics.v1.GaugeH\0R\x05gauge\x127\n\x03sum\x18\x07\x20\x01(\x0b2#.opentele\
    metry.proto.metrics.v1.SumH\0R\x03sum\x12I\n\thistogram\x18\t\x20\x01(\
    \x0b2).opentelemetry.proto.metrics.v1.HistogramH\0R\thistogram\x12k\n\
    \x15exponential_histogram\x18\n\x20\x01(\x0b24.opentelemetry.proto.metri\
    cs.v1.ExponentialHistogramH\0R\x14exponentialHistogram\x12C\n\x07summary\
    \x18\x0b\x20\x01(\x0b2'.opentelemetry.proto.metrics.v1.SummaryH\0R\x07su\
    mmary\x12C\n\x08metadata\x18\x0c\x20\x03(\x0b2'.opentelemetry.proto.comm\
    on.v1.KeyValueR\x08metadataB\x06\n\x04dataJ\x04\x08\x04\x10\x05J\x04\x08\
    \x06\x10\x07J\x04\x08\x08\x10\t\"Y\n\x05Gauge\x12P\n\x0bdata_points\x18\
    \x01\x20\x03(\x0b2/.opentelemetry.proto.metrics.v1.NumberDataPointR\ndat\
    aPoints\"\xeb\x01\n\x03Sum\x12P\n\x0bdata_points\x18\x01\x20\x03(\x0b2/.\
    opentelemetry.proto.metrics.v1.NumberDataPointR\ndataPoints\x12o\n\x17ag\
    gregation_temporality\x18\x02\x20\x01(\x0e26.opentelemetry.proto.metrics\
    .v1.AggregationTemporalityR\x16aggregationTemporality\x12!\n\x0cis_monot\
    onic\x18\x03\x20\x01(\x08R\x0bisMonotonic\"\xd1\x01\n\tHistogram\x12S\n\
    \x0bdata_points\x18\x01\x20\x03(\x0b22.opentelemetry.proto.metrics.v1.Hi\
    stogramDataPointR\ndataPoints\x12o\n\x17aggregation_temporality\x18\x02\
    \x20\x01(\x0e26.opentelemetry.proto.metrics.v1.AggregationTemporalityR\
    \x16aggregationTemporality\"\xe7\x01\n\x14ExponentialHistogram\x12^\n\
    \x0bdata_points\x18\x01\x20\x03(\x0b2=.opentelemetry.proto.metrics.v1.Ex\
    ponentialHistogramDataPointR\ndataPoints\x12o\n\x17aggregation_temporali\
    ty\x18\x02\x20\x01(\x0e26.opentelemetry.proto.metrics.v1.AggregationTemp\
    oralityR\x16aggregationTemporality\"\\\n\x07Summary\x12Q\n\x0bdata_point\
    s\x18\x01\x20\x03(\x0b20.opentelemetry.proto.metrics.v1.SummaryDataPoint\
    R\ndataPoints\"\xd6\x02\n\x0fNumberDataPoint\x12G\n\nattributes\x18\x07\
    \x20\x03(\x0b2'.opentelemetry.proto.common.v1.KeyValueR\nattributes\x12/\
    \n\x14start_time_unix_nano\x18\x02\x20\x01(\x06R\x11startTimeUnixNano\
    \x12$\n\x0etime_unix_nano\x18\x03\x20\x01(\x06R\x0ctimeUnixNano\x12\x1d\
    \n\tas_double\x18\x04\x20\x01(\x01H\0R\x08asDouble\x12\x17\n\x06as_int\
    \x18\x06\x20\x01(\x10H\0R\x05asInt\x12F\n\texemplars\x18\x05\x20\x03(\
    \x0b2(.opentelemetry.proto.metrics.v1.ExemplarR\texemplars\x12\x14\n\x05\
    flags\x18\x08\x20\x01(\rR\x05flagsB\x07\n\x05valueJ\x04\x08\x01\x10\x02\
    \"\xd9\x03\n\x12HistogramDataPoint\x12G\n\nattributes\x18\t\x20\x03(\x0b\
    2'.opentelemetry.proto.common.v1.KeyValueR\nattributes\x12/\n\x14start_t\
    ime_unix_nano\x18\x02\x20\x01(\x06R\x11startTimeUnixNano\x12$\n\x0etime_\
    unix_nano\x18\x03\x20\x01(\x06R\x0ctimeUnixNano\x12\x14\n\x05count\x18\
    \x04\x20\x01(\x06R\x05count\x12\x15\n\x03sum\x18\x05\x20\x01(\x01H\0R\
    \x03sum\x88\x01\x01\x12#\n\rbucket_counts\x18\x06\x20\x03(\x06R\x0cbucke\
    tCounts\x12'\n\x0fexplicit_bounds\x18\x07\x20\x03(\x01R\x0eexplicitBound\
    s\x12F\n\texemplars\x18\x08\x20\x03(\x0b2(.opentelemetry.proto.metrics.v\
    1.ExemplarR\texemplars\x12\x14\n\x05flags\x18\n\x20\x01(\rR\x05flags\x12\
    \x15\n\x03min\x18\x0b\x20\x01(\x01H\x01R\x03min\x88\x01\x01\x12\x15\n\
    \x03max\x18\x0c\x20\x01(\x01H\x02R\x03max\x88\x01\x01B\x06\n\x04_sumB\
    \x06\n\x04_minB\x06\n\x04_maxJ\x04\x08\x01\x10\x02\"\xfa\x05\n\x1dExpone\
    ntialHistogramDataPoint\x12G\n\nattributes\x18\x01\x20\x03(\x0b2'.opente\
    lemetry.proto.common.v1.KeyValueR\nattributes\x12/\n\x14start_time_unix_\
    nano\x18\x02\x20\x01(\x06R\x11startTimeUnixNano\x12$\n\x0etime_unix_nano\
    \x18\x03\x20\x01(\x06R\x0ctimeUnixNano\x12\x14\n\x05count\x18\x04\x20\
    \x01(\x06R\x05count\x12\x15\n\x03sum\x18\x05\x20\x01(\x01H\0R\x03sum\x88\
    \x01\x01\x12\x14\n\x05scale\x18\x06\x20\x01(\x11R\x05scale\x12\x1d\n\nze\
    ro_count\x18\x07\x20\x01(\x06R\tzeroCount\x12a\n\x08positive\x18\x08\x20\
    \x01(\x0b2E.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\
    .BucketsR\x08positive\x12a\n\x08negative\x18\t\x20\x01(\x0b2E.openteleme\
    try.proto.metrics.v1.ExponentialHistogramDataPoint.BucketsR\x08negative\
    \x12\x14\n\x05flags\x18\n\x20\x01(\rR\x05flags\x12F\n\texemplars\x18\x0b\
    \x20\x03(\x0b2(.opentelemetry.proto.metrics.v1.ExemplarR\texemplars\x12\
    \x15\n\x03min\x18\x0c\x20\x01(\x01H\x01R\x03min\x88\x01\x01\x12\x15\n\
    \x03max\x18\r\x20\x01(\x01H\x02R\x03max\x88\x01\x01\x12%\n\x0ezero_thres\
    hold\x18\x0e\x20\x01(\x01R\rzeroThreshold\x1aF\n\x07Buckets\x12\x16\n\
    \x06offset\x18\x01\x20\x01(\x11R\x06offset\x12#\n\rbucket_counts\x18\x02\
    \x20\x03(\x04R\x0cbucketCountsB\x06\n\x04_sumB\x06\n\x04_minB\x06\n\x04_\
    max\"\xa6\x03\n\x10SummaryDataPoint\x12G\n\nattributes\x18\x07\x20\x03(\
    \x0b2'.opentelemetry.proto.common.v1.KeyValueR\nattributes\x12/\n\x14sta\
    rt_time_unix_nano\x18\x02\x20\x01(\x06R\x11startTimeUnixNano\x12$\n\x0et\
    ime_unix_nano\x18\x03\x20\x01(\x06R\x0ctimeUnixNano\x12\x14\n\x05count\
    \x18\x04\x20\x01(\x06R\x05count\x12\x10\n\x03sum\x18\x05\x20\x01(\x01R\
    \x03sum\x12i\n\x0fquantile_values\x18\x06\x20\x03(\x0b2@.opentelemetry.p\
    roto.metrics.v1.SummaryDataPoint.ValueAtQuantileR\x0equantileValues\x12\
    \x14\n\x05flags\x18\x08\x20\x01(\rR\x05flags\x1aC\n\x0fValueAtQuantile\
    \x12\x1a\n\x08quantile\x18\x01\x20\x01(\x01R\x08quantile\x12\x14\n\x05va\
    lue\x18\x02\x20\x01(\x01R\x05valueJ\x04\x08\x01\x10\x02\"\x85\x02\n\x08E\
    xemplar\x12X\n\x13filtered_attributes\x18\x07\x20\x03(\x0b2'.opentelemet\
    ry.proto.common.v1.KeyValueR\x12filteredAttributes\x12$\n\x0etime_unix_n\
    ano\x18\x02\x20\x01(\x06R\x0ctimeUnixNano\x12\x1d\n\tas_double\x18\x03\
    \x20\x01(\x01H\0R\x08asDouble\x12\x17\n\x06as_int\x18\x06\x20\x01(\x10H\
    \0R\x05asInt\x12\x17\n\x07span_id\x18\x04\x20\x01(\x0cR\x06spanId\x12\
    \x19\n\x08trace_id\x18\x05\x20\x01(\x0cR\x07traceIdB\x07\n\x05valueJ\x04\
    \x08\x01\x10\x02*\x8c\x01\n\x16AggregationTemporality\x12'\n#AGGREGATION\
    _TEMPORALITY_UNSPECIFIED\x10\0\x12!\n\x1dAGGREGATION_TEMPORALITY_DELTA\
    \x10\x01\x12&\n\"AGGREGATION_TEMPORALITY_CUMULATIVE\x10\x02*^\n\x0eDataP\
    ointFlags\x12\x1f\n\x1bDATA_POINT_FLAGS_DO_NOT_USE\x10\0\x12+\n'DATA_POI\
    NT_FLAGS_NO_RECORDED_VALUE_MASK\x10\x01B\x7f\n!io.opentelemetry.proto.me\
    trics.v1B\x0cMetricsProtoP\x01Z)go.opentelemetry.io/proto/otlp/metrics/v\
    1\xaa\x02\x1eOpenTelemetry.Proto.Metrics.V1b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::common::file_descriptor().clone());
            deps.push(super::resource::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(16);
            messages.push(MetricsData::generated_message_descriptor_data());
            messages.push(ResourceMetrics::generated_message_descriptor_data());
            messages.push(ScopeMetrics::generated_message_descriptor_data());
            messages.push(Metric::generated_message_descriptor_data());
            messages.push(Gauge::generated_message_descriptor_data());
            messages.push(Sum::generated_message_descriptor_data());
            messages.push(Histogram::generated_message_descriptor_data());
            messages.push(ExponentialHistogram::generated_message_descriptor_data());
            messages.push(Summary::generated_message_descriptor_data());
            messages.push(NumberDataPoint::generated_message_descriptor_data());
            messages.push(HistogramDataPoint::generated_message_descriptor_data());
            messages.push(ExponentialHistogramDataPoint::generated_message_descriptor_data());
            messages.push(SummaryDataPoint::generated_message_descriptor_data());
            messages.push(Exemplar::generated_message_descriptor_data());
            messages.push(exponential_histogram_data_point::Buckets::generated_message_descriptor_data());
            messages.push(summary_data_point::ValueAtQuantile::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(AggregationTemporality::generated_enum_descriptor_data());
            enums.push(DataPointFlags::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
