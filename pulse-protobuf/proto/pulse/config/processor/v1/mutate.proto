// pulse - bitdrift's observability proxy
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code is governed by a source available license that can be found in the
// LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

syntax = "proto3";
package pulse.config.processor.v1;

import "validate/validate.proto";

// Processor that performs basic mutation based on metadata. Mutation is performed by a VRL program,
// which is documented at a high level here: https://vector.dev/docs/reference/vrl/. Pulse supports
// a limited set of operations on metrics, and provides context metadata that can be used during
// transforms. The following context is provided:
// .name is the name of the metric. Can be modified.
// .tags are the metric tags as a map. Can be modified.
// .mtype is the type of the metric. Cannot be modified.
//
// If using Kubernetes discovery, the following metadata is provided:
// %k8s.service.name is the name of the service if service discovery is enabled and there is an
//                   associated service.
// %k8s.namespace is the namespace of the pod.
// %k8s.pod.name is the name of the pod.
// %k8s.pod.ip is the IP of the pod.
// %k8s.pod.labels are the labels of the pod.
// %k8s.pod.annotations are the annotations of the pod.
// %k8s.node.name is the name of the node.
// %k8s.node.ip is the IP of the node.
// %k8s.node.labels are the labels of the node.
// %k8s.node.annotations are the annotations of the node.
// %prom.scrape.address is <IP>:<PORT> if the target has been scraped.
//
// Errors and abort() are handled differently. Errors will emit a periodic warnings and are
// assumed to be real operator errors. Aborts via abort() are assumed to be intentional with the
// desire to drop the metric.
//
// Early return is possible using the return statement. The expression passed to return will be
// ignored so it can be anything, such as "return true".
//
// It is possible to "flatten" Prometheus histograms and summaries into multiple component metrics.
// For histograms this emits multiple <metric>_bucket metrics, a <metric>_count metric, and a
// <metric>_sum metric. For summaries this emits multiple <metric> metrics with different quantiles
// and a <metric>_sum and <metric>_count metric. This is done by setting the following pseudo
// field to true:
// .flatten_prom_histogram_and_summary = true
//
// Pulse also implements some custom functions beyond what is available from core VRL. These
// include:
//
// - pulse_inc_counter(name: string, value: int): Increments a counter with the given name by the
//   given value. The name must be a constant string.
//
// - pulse_log(value: any, level: string, rate_limit_secs: int): Outputs a rate limited log.
//
//     value: (required) The value to log of any type
//     level: (optional) The log level to use. Must be one of "trace", "debug", "info", "warn",
//       "error". Defaults to "info".
//     rate_limit_secs: (optional) The rate limit in seconds for the message. Defaults to 1 second.
message MutateConfig {
  string vrl_program = 1 [(validate.rules).string = {min_len: 1}];
}
