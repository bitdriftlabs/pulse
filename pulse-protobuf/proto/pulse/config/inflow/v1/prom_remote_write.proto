// pulse - bitdrift's observability proxy
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code is governed by a source available license that can be found in the
// LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

syntax = "proto3";
package pulse.config.inflow.v1;

import "pulse/config/inflow/v1/inflow_common.proto";
import "validate/validate.proto";

// Configuration for the Prometheus remote write server inflow.
message PromRemoteWriteServerConfig {
  // Parser settings for incoming remote write protocol.
  message ParseConfig {
    // https://github.com/lyft/statsrelay/ sets the Prometheus SUMMARY metric type for StatsD timer
    // values. This is not compliant with the actual Prometheus data model.
    bool summary_as_timer = 1;

    // https://github.com/lyft/statsrelay/ sets the Prometheus COUNTER metric type for StatsD delta
    // counter values. This is not compliant with the actual Prometheus data model.
    bool counter_as_delta = 2;

    // https://github.com/lyft/statsrelay/ does not dedup metric family metadata in the metadata
    // list. If set, ignore duplicate entries and do not warn about them.
    bool ignore_duplicate_metadata = 3;
  }

  // Which address to bind to.
  string bind = 1 [(validate.rules).string = {min_len: 1}];

  // Extra configuration for parsing incoming remote write protocol.
  ParseConfig parse_config = 2;

  // How to determine the downstream ID of incoming metrics. If not specified, defaults to
  // `remote_ip`.
  DownstreamIdSource downstream_id_source = 3;
}
