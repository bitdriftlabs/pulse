// pulse - bitdrift's observability proxy
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code is governed by a source available license that can be found in the
// LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

syntax = "proto3";
package pulse.config.inflow.v1;

import "pulse/config/common/v1/common.proto";
import "google/protobuf/duration.proto";
import "validate/validate.proto";

// Collect prometheus metrics by discovering endpoints via Kubernetes. The annotations checked are
// the standard Prometheus annotations such as prometheus.io/scrape, prometheus.io/path, etc.
message KubernetesPrometheusConfig {
  message UseK8sHttpsServiceAuthMatcher {
    message KeyValue {
      string key = 1 [(validate.rules).string = {min_len: 1}];
      // If not supplied, the value is ignored and only key presence is checked.
      optional string value = 2;
    }

    oneof auth_matcher {
      option (validate.required) = true;

      // Matches if the supplied key/value pair is present in the pod's annotations.
      KeyValue annotation_matcher = 1;

      // Always matches.
      bool always = 2;
    }
  }

  message InclusionFilter {
    message AnnotationMatcher {
      // Which annotation to use for deciding whether to scrape.
      string inclusion_annotation_name = 1 [(validate.rules).string = {min_len: 1}];
      // The regex to match the name against.
      string inclusion_annotation_regex = 2 [(validate.rules).string = {min_len: 1}];
      // The annotation to use for deciding which port to scrape. This can be the same as the
      // inclusion annotation name if desired.
      string port_annotation_name = 3 [(validate.rules).string = {min_len: 1}];
    }

    oneof filter_type {
      option (validate.required) = true;

      // Apply the following regex to each container port name to determine if it should be
      // scraped. If the regex is a match, the container port will be scraped.
      string container_port_name_regex = 1;

      // This allows extracting a scrape port from a generic annotation. Optionally it allows
      // matching on a different annotation for inclusion versus extracting the port.
      AnnotationMatcher annotation_matcher = 2;
    }
  }

  // Scrapes metrics from Prometheus endpoints defined on pods via associated service annotations.
  // Resolves to all pod-local endpoints using the service annotations to infer path, port, etc.
  message Endpoint {
    // If any of the optionally provided matchers matches, HTTPS K8s service auth will be used
    // against the scrape target.
    repeated UseK8sHttpsServiceAuthMatcher use_k8s_https_service_auth_matchers = 2;
  }

  // Watch a Kubernetes endpoints resource and scrape all ready endpoints remotely.
  message RemoteEndpoint {
    // The namespace of the Kubernetes endpoints resource to watch.
    string namespace = 1 [(validate.rules).string = {min_len: 1}];

    // The name of the Kubernetes endpoints resource to watch.
    string service = 2 [(validate.rules).string = {min_len: 1}];

    // Inclusion filters can be used to include endpoints to be scraped even if they do not have the
    // standard Prometheus annotations. An inclusion filter if successful will result in a endpoint
    // port to be scraped.
    repeated InclusionFilter inclusion_filters = 3;

    // If any of the optionally provided matchers matches, HTTPS K8s service auth will be used
    // against the scrape target.
    repeated UseK8sHttpsServiceAuthMatcher use_k8s_https_service_auth_matchers = 4;
  }

  // Scrape metrics from endpoints discovered on the node. This will resolve to the kubelet
  // endpoint on the local node.
  message Node {
    // The path to the prometheus endpoint on the node.
    string path = 1 [(validate.rules).string = {min_len: 1}];
  }

  message PrometheusAnnotationOverrides {
    // If not set, defaults to "prometheus.io/scrape".
    optional string scrape = 1;

    // If not set, defaults to "prometheus.io/namespace".
    optional string namespace = 2;

    // If not set, defaults to "prometheus.io/path".
    optional string path = 3;

    // If not set, defaults to "prometheus.io/scheme".
    optional string scheme = 4;

    // If not set, defaults to "prometheus.io/port".
    optional string port = 5;
  }

  // Scrapes metrics from Prometheus endpoints defined on pods via pod annotations.
  message Pod {
    // Inclusion filters can be used to include pods to be scraped even if they do not have the
    // standard Prometheus annotations. An inclusion filter if successful will result in a container
    // port to be scraped.
    repeated InclusionFilter inclusion_filters = 1;

    // If any of the optionally provided matchers matches, HTTPS K8s service auth will be used
    // against the scrape target.
    repeated UseK8sHttpsServiceAuthMatcher use_k8s_https_service_auth_matchers = 2;

    // Optional overrides for the base Prometheus annotations used to discover scrape targets.
    PrometheusAnnotationOverrides annotation_overrides = 3;
  }

  // An implementation of the Prometheus HTTP service discovery protocol as documented here:
  // https://prometheus.io/docs/prometheus/latest/http_sd/
  message HttpServiceDiscovery {
    // The URL to scrape for service discovery. This should be a valid URL.
    common.v1.EnvOrInline url = 1 [(validate.rules).message = {required: true}];

    // The interval to use for fetching the service discovery config. If not set default to
    // 1 minute.
    google.protobuf.Duration fetch_interval = 2;
  }

  // How often eligible Prometheus endpoints are scraped.
  google.protobuf.Duration scrape_interval = 1 [(validate.rules).message.required = true];

  oneof target {
    option (validate.required) = true;

    Endpoint endpoint = 2;
    Node node = 3;
    Pod pod = 4;
    HttpServiceDiscovery http_service_discovery = 8;
    RemoteEndpoint remote_endpoint = 9;
  }

  // Whether to emit the synthetic "up" metric as per
  // https://prometheus.io/docs/concepts/jobs_instances/. If true, for each scrape target "up" will
  // be a gauge set to 0 or 1 depending on whether the scrape was successful. The "instance" tag
  // will be set to the target's address. The "job" tag will not currently be set.
  bool emit_up_metric = 5;

  message TLS {
    optional string cert_file = 1;
    optional string key_file = 2;
    bool insecure_skip_verify = 3;
  }

  // Based on https://prometheus.io/docs/prometheus/latest/configuration/configuration/#tls_config
  // allow users to add cert and key files
  TLS tls_config = 6;

  // The timeout to use on the scrape request. If not set this defaults to 15s.
  google.protobuf.Duration scrape_timeout = 7;
}
