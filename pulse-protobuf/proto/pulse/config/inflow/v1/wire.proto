// pulse - bitdrift's observability proxy
// Copyright Bitdrift, Inc. All rights reserved.
//
// Use of this source code is governed by a source available license that can be found in the
// LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

syntax = "proto3";
package pulse.config.inflow.v1;

import "pulse/config/common/v1/common.proto";
import "google/protobuf/duration.proto";
import "validate/validate.proto";

// Advanced configuration for socket based inflows.
message AdvancedSocketServerConfig {
  // How long to wait for a connection to receive data before it is shutdown for being idle.
  // Defaults to 60s.
  google.protobuf.Duration idle_timeout = 1 [(validate.rules).duration.gt = {}];

  // How much data to buffer on an incoming socket before applying back pressure. Defaults to
  // 8KiB.
  optional uint64 buffer_size = 2;

  // The maximum amount of time an incoming connection will be kept alive. Can be usefull to force
  // connection rotation and fix imbalance for downstreams. Defaults to none.
  google.protobuf.Duration max_connection_duration = 3 [(validate.rules).duration.gt = {}];
}

// Configuration for a TCP based inflow.
message TcpServerConfig {
  // Which address to bind to.
  string bind = 1 [(validate.rules).string = {min_len: 1}];

  // Which protocol is expected.
  common.v1.WireProtocol protocol = 2 [(validate.rules).message.required = true];

  // Advanced configuration for the inflow.
  AdvancedSocketServerConfig advanced = 3;

  // If true, the KubernetesBootstrapConfig will be used to watch all pods on the node. Incoming
  // metrics will be looked up by remote IP to match the origin pod and its metadata to the
  // metrics.
  bool bind_k8s_pod_metadata_by_remote_ip = 4;

  // An optional amount of time that metrics will be buffered by the inflow before being further
  // dispatched. Practically, this is useful when relying on Kubernetes informer metadata and there
  // is no external mechanism to synchronize pods fully starting (e.g., an init container) such that
  // there is a potential race condition between pods sending statsd metrics prior to the informer
  // being aware of the pod's existence. Defaults to disabled. 5s is a reasonable setting in most
  // environments where the above conditions apply. Note that counters, gauges, and timers will
  // be aggregated to avoid unbounded memory growth of the application sends a lot of metrics.
  google.protobuf.Duration pre_buffer_window = 5;

  // If this is true and a pre-buffer window is set, all incoming metrics will be pre-buffered
  // continuously. This is useful if for example applications are sending larger numbers of timers
  // and we would like to do as little processing as possible on initial ingestion.
  bool always_pre_buffer = 6;

  // The size of the reservoir for timers. If not set defaults to 100.
  optional uint32 reservoir_size = 7;
}

// Configuration for a UDP based inflow.
message UdpServerConfig {
  message PreBufferConfig {
    // An optional amount of time that metrics will be buffered by the inflow before being further
    // dispatched. Practically, this is useful when relying on Kubernetes informer metadata and
    // there is no external mechanism to synchronize pods fully starting (e.g., an init container)
    // such that there is a potential race condition between pods sending statsd metrics prior to
    // the informer being aware of the pod's existence. 5s is a reasonable setting in most
    // environments where the above conditions apply. Note that counters, gauges, and timers will be
    // aggregated to avoid unbounded memory growth of the application sends a lot of metrics.
    google.protobuf.Duration pre_buffer_window = 1 [(validate.rules).message.required = true];

    // Because UDP is a datagram protocol, there is no actual stream to key off of like there is
    // for TCP. Every incoming IP is bound to a "session" which will timeout after the configured
    // session idle timeout. This should be set as large as possible but less than any potential
    // window for IP recycling. For example if pod IP addresses have a recycle cooldown of 30s, a
    // reasonable setting for this might be 20s.
    google.protobuf.Duration session_idle_timeout = 2 [(validate.rules).message.required = true];

    // If this is true and a pre-buffer window is set, all incoming metrics will be pre-buffered
    // continuously. This is useful if for example applications are sending larger numbers of timers
    // and we would like to do as little processing as possible on initial ingestion.
    bool always_pre_buffer = 3;

    // The size of the reservoir for timers. If not set defaults to 100.
    optional uint32 reservoir_size = 4;
  }

  // Which address to bind to.
  string bind = 1 [(validate.rules).string = {min_len: 1}];

  // Which protocol is expected.
  common.v1.WireProtocol protocol = 2 [(validate.rules).message.required = true];

  // If true, the KubernetesBootstrapConfig will be used to watch all pods on the node. Incoming
  // metrics will be looked up by remote IP to match the origin pod and its metadata to the
  // metrics.
  bool bind_k8s_pod_metadata_by_remote_ip = 3;

  // Configuration for UDP session pre-buffering. See above for more information. Defaults to
  // disabled.
  PreBufferConfig pre_buffer = 4;
}

// Configuration for a unix domain docket based inflow.
message UnixServerConfig {
  // The path to bind to.
  string path = 1 [(validate.rules).string = {min_len: 1}];

  // Which protocol is expected.
  common.v1.WireProtocol protocol = 2 [(validate.rules).message.required = true];

  // Advanced configuration for the inflow.
  AdvancedSocketServerConfig advanced = 3;
}
